// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RadioReport.HeadCT.Repo;

namespace RadioReport.HeadCT.Repo.Migrations
{
    [DbContext(typeof(HeadCTDbContext))]
    [Migration("20210826062300_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PageNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("WasModified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("PageInfos");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessionNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Evaluation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExaminationType")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("FindingsDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FreeField")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("LicenseFractionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LicensingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("PatientAge")
                        .HasColumnType("smallint");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PresetCode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StudyInstanceUID")
                        .HasColumnType("text");

                    b.Property<byte>("TotalPageCount")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Approved")
                        .HasColumnType("text");

                    b.Property<string>("Discussion")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsICD10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferenceImage")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReportSummary")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportResults");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ReportSession");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("ObjectName")
                        .HasColumnType("text");

                    b.Property<byte[]>("Stream")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("ImageFile");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<byte?>("Age")
                        .HasColumnType("smallint");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PatientInformation");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.FindingLocalizer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mapping")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FindingLocalizers");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("BuildVersion")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Paragraphs")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportTypeName", "VersionName")
                        .IsUnique();

                    b.ToTable("ReportSchemas");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ReportSchemaId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportSchemaId")
                        .IsUnique();

                    b.ToTable("ReportSchemaSessions");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.Acquisition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AcquisitionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("BreathingProtocolType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsArterial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArterialEarly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArterialLate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTMyelography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsECGGating")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNative")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerfusionCT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPulmonaryArterialPhase")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVenous")
                        .HasColumnType("boolean");

                    b.Property<float?>("LateDelayInMin")
                        .HasColumnType("real");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<int?>("NumberOfLines")
                        .HasColumnType("integer");

                    b.Property<byte>("PatientPositioningType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ReferenceValueInMAs")
                        .HasColumnType("integer");

                    b.Property<float?>("SliceThicknessInMm")
                        .HasColumnType("real");

                    b.Property<byte>("TechniqueType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.Property<int?>("TubeCurrent1MAs")
                        .HasColumnType("integer");

                    b.Property<int?>("TubeCurrent2MAs")
                        .HasColumnType("integer");

                    b.Property<byte>("TubeCurrentModulationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("TubeVoltage1KV")
                        .HasColumnType("integer");

                    b.Property<int?>("TubeVoltage2KV")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("Acquisitions");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.AnamnesisPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Days")
                        .HasColumnType("integer");

                    b.Property<int?>("Hours")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDSA")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRI")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPETCT")
                        .HasColumnType("boolean");

                    b.Property<byte>("MonthOfCT")
                        .HasColumnType("smallint");

                    b.Property<byte>("MonthOfDSA")
                        .HasColumnType("smallint");

                    b.Property<byte>("MonthOfMRI")
                        .HasColumnType("smallint");

                    b.Property<byte>("MonthOfPETCT")
                        .HasColumnType("smallint");

                    b.Property<int?>("Months")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<int>("YearOfCT")
                        .HasColumnType("integer");

                    b.Property<int>("YearOfDSA")
                        .HasColumnType("integer");

                    b.Property<int>("YearOfMRI")
                        .HasColumnType("integer");

                    b.Property<int>("YearOfPETCT")
                        .HasColumnType("integer");

                    b.Property<int?>("Years")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("AnamnesisPages");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.BasalNucleiFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BasalGangliaLocations")
                        .HasColumnType("numeric(20,0)");

                    b.Property<Guid?>("BasalNucleiPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("ContrastDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DensityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosisLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosisType1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosisType2")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosisType3")
                        .HasColumnType("smallint");

                    b.Property<byte>("DistributionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ExtentOfMidlineShift")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HistologyKnownType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("Is1LesionOfTheSamePathology")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAtrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConfluent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFourthVentricle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologyKnown")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInvolvementOfVentricles")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralVentricleLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralVentricleRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMassEffect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMidlineShift")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerifocalEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubstanceDefect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThirdVentricle")
                        .HasColumnType("boolean");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaximumDiameter")
                        .HasColumnType("integer");

                    b.Property<byte>("MidlineShiftSideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<int?>("Quantitative")
                        .HasColumnType("integer");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<int?>("Size")
                        .HasColumnType("integer");

                    b.Property<int?>("Size2ndPlane")
                        .HasColumnType("integer");

                    b.Property<int?>("Size3rdPlane")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BasalNucleiPageId");

                    b.ToTable("BasalNucleiFindings");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.BasalNucleiPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("BasalNucleiPages");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.BrainstemCranialNervesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BrainstemCranialNervesPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("ContrastDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CranialNerveType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DensityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis2")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis3")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HistologyKnownType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("Is3rdVentricle")
                        .HasColumnType("boolean");

                    b.Property<bool>("Is4thVentricle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBrainstemAtrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCanalisHypoglossi")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCochlearNerve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConfluent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCrusCerebri")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCrusCerebriLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCrusCerebriRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFacialisCanal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForamenStylomastoid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFossulaPetrosa")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGanglionInferius")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGeniculumOfTheFacialNerve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologyKnown")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHydrocephalus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLaminaTecti")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralVentricleLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralVentricleRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMassEffect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMeatusAcusticusInternus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMedullaOblongata")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMedullaOblongataAnterior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMedullaOblongataCentral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMedullaOblongataPosterior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMesencephalon")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMidbrainAtrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThan1Lesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNerveCompression")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNerveThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNucleusRuber")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerifocalEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerineuralTumorSpread")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPons")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPonsCentral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPonsLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPonsPeripheral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPonsRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRootEntryZone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubstanceDefect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubstantiaNigra")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSulcusLateralisPosterior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperciliaryGanglion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTegmentumMesencephali")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrigonumNerviVagi")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVentricularherniation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVestibularNerve")
                        .HasColumnType("boolean");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxDiameter")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<int?>("Quantitative")
                        .HasColumnType("integer");

                    b.Property<int?>("SecondPlane")
                        .HasColumnType("integer");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<int?>("Size")
                        .HasColumnType("integer");

                    b.Property<int?>("ThirdPlane")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BrainstemCranialNervesPageId");

                    b.ToTable("BrainstemCranialNervesFindings");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.BrainstemCranialNervesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("BrainstemCranialNervesPages");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.CMSideEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMSideEffectType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DurationAdverseReactionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCompletelyDeclining")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeriousAdverseEvent")
                        .HasColumnType("boolean");

                    b.Property<int?>("MinAfterCMinjection")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("CMSideEffects");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.CerebrospinalFluidSpaceFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AsymmetryType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("CerebrospinalFluidSpacePageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("ConfigurationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<int?>("CorpusCallosumAngle")
                        .HasColumnType("integer");

                    b.Property<byte>("DensityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("EvansIndex")
                        .HasColumnType("numeric");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FisherScaleType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HistologyKnownType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Is1LesionOfTheSameEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdjacentToTheTentorium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnteriorHornLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnteriorHornRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAquaeductusMesencephaliSylvii")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAtrophyOfBrainParenchyma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBilateralHygromas")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCellaMediaLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCellaMediaRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCerebrospinalFluidNegativePressure")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCisternaMagna")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDisplacement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnlargementOfIIIVentricle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpiduralHematoma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExtended")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFlatteningOfTheGyri")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForamenLuschkae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForamenLuschkaeLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForamenLuschkaeRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForamenMagendie")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForamenMonroi")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForamenMonroiLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForamenMonroiRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFrontal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFrontobasal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologyKnown")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHydrocephalus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHyperdynamicFluidFlowVoid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypertrophyChoroidPlexus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIIIVentricle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIVVentricle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInTheAqueduct")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInTheIIIVentricle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfratentorial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInsularCistern")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInterpeduncularCistern")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIschemia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralVentricle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralVentricleLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralVentricleRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftSide")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMeckelCave")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMedian")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOccipital")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPachymeningealEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParenchymalDefect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParietal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerifocalEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerimesencephalic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPlumpingPosteriorHorns")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPontineCistern")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPontocerebellarCistern")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPontomedullaryCistern")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorHornLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorHornRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrepontineCistern")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsQuadrigeminalCistern")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightSide")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScarredResiduals")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSlitVentricle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubarachnoidCisterns")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubduralHematoma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubependymalNodules")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubstanceDefect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuprasellarCistern")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemporal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemporalHornExpansion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemporalHornLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemporalHornRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickeningDuraMater")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTonsilDepression")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTransependymalPressureCaps")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrigonumLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrigonumRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVasospasm")
                        .HasColumnType("boolean");

                    b.Property<int?>("MamillopontineDistance")
                        .HasColumnType("integer");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MassDifferentialDiagnosis2Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("MassDifferentialDiagnosis3Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("MassDifferentialDiagnosisIDescribe1Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("MassDifferentialDiagnosisIKnow1Type")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxDiameter")
                        .HasColumnType("integer");

                    b.Property<byte>("NormVariantVentricleType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PatternType")
                        .HasColumnType("smallint");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<int?>("PontomesencephalicAngle")
                        .HasColumnType("integer");

                    b.Property<int?>("Quantitative")
                        .HasColumnType("integer");

                    b.Property<int?>("SecondPlane")
                        .HasColumnType("integer");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ShrinkingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<int?>("Size")
                        .HasColumnType("integer");

                    b.Property<int?>("ThirdPlane")
                        .HasColumnType("integer");

                    b.Property<byte>("VentricleDifferentialDiagnosis1Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("VentricleDifferentialDiagnosis2Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CerebrospinalFluidSpacePageId");

                    b.HasIndex("ImageFileId");

                    b.ToTable("CerebrospinalFluidSpaceFindings");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.CerebrospinalFluidSpacePage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("CerebrospinalFluidSpacePages");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.ClinicalSymptomFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AlteredStateOfConsciousnessType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("AnamnesisPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("AtaxiaType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CentralEndocrineDisorderType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CharacterizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CognitiveChangeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CranialNervesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DysesthesiaType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FacialNervePalsyDetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAnisocoria")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConductiveHearingLoss")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDisorderOfConsciousnessComa")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnophthalmos")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExophthalmos")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFever")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHeadache")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHearingLoss")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHyperacusis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypoacusis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypoakusisSensorineuralHearingLoss")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMeningism")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMydriasis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMyosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNausea")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNauseaVomiting")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPapilledema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPersonalityChanges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPhotophobia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPtosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPulsatile")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSensorineuralHearingLoss")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThunderclapHeadache")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTinnitus")
                        .HasColumnType("boolean");

                    b.Property<byte>("LocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MotorDeficitType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("NystagmusType")
                        .HasColumnType("smallint");

                    b.Property<byte>("OlfactoryNerveDetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpeechDisorderType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TremorType")
                        .HasColumnType("smallint");

                    b.Property<byte>("VertigoType")
                        .HasColumnType("smallint");

                    b.Property<byte>("VisualDisturbanceType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesisPageId");

                    b.ToTable("ClinicalSymptomFindings");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.CortexFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ClassificationAdams1")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationAdams2")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationAdams3")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationWHO1")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationWHO2")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationWHO3")
                        .HasColumnType("smallint");

                    b.Property<byte>("ConfigurationMarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CortexDifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CortexDifferentialDiagnosisType1")
                        .HasColumnType("smallint");

                    b.Property<byte>("CortexDifferentialDiagnosisType2")
                        .HasColumnType("smallint");

                    b.Property<byte>("CortexDifferentialDiagnosisType3")
                        .HasColumnType("smallint");

                    b.Property<decimal>("CortexLocations")
                        .HasColumnType("numeric(20,0)");

                    b.Property<Guid?>("CortexPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("CorticalThinningType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DensityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HistologyKnownType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("Is3RdVentricle")
                        .HasColumnType("boolean");

                    b.Property<bool>("Is4thVentricle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAqueduct")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAtrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBlurringOfWhiteGreyJunction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCaputMedusa")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConfluent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContactToTheVentricularSystem")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCortex")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCorticalThinning")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCorticalTuber")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCuneus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysticParts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDescentOfTheCerebellarTonsils")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFrontal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGyrusTemporalisTransversus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhagicLacunae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHerniation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologyKnown")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHydrocephalus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInferiorCerebellarPeduncle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfratentorial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralOccipitotemporalGyrus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralVentricleLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralVentricleRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLesionOfTheSameEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLingualGyrus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMassEffect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMesiotemporalSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMicroBleeding")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMiddleCerebellarPeduncle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMidlineShift")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNarrowedSulci")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOccipital")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParietal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParsIntermedia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerifocalEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPraecuneus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSolidParts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubependymalNodules")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperiorCerebellarPeduncle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemporal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVentricularHerniation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWhiteMatter")
                        .HasColumnType("boolean");

                    b.Property<byte>("LocalizationModifiedClassificationAdams")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationWHOClassification")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxDiameter")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxSizeInPreviousExamination")
                        .HasColumnType("integer");

                    b.Property<int?>("MidlineShift")
                        .HasColumnType("integer");

                    b.Property<byte>("MidlineShiftSideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<int?>("Quantitative")
                        .HasColumnType("integer");

                    b.Property<byte>("RegionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SecondPlane")
                        .HasColumnType("integer");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<int?>("Size")
                        .HasColumnType("integer");

                    b.Property<int?>("Size2ndPlane")
                        .HasColumnType("integer");

                    b.Property<int?>("Size3rdPlane")
                        .HasColumnType("integer");

                    b.Property<int?>("ThirdPlane")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CortexPageId");

                    b.ToTable("CortexFindings");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.CortexPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("CortexPages");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.ExaminationIndicationFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AspectScore")
                        .HasColumnType("integer");

                    b.Property<byte>("DetailsType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ExaminationPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<int?>("GlasgowComaScale")
                        .HasColumnType("integer");

                    b.Property<byte>("HeadacheCourseType")
                        .HasColumnType("smallint");

                    b.Property<int?>("HoursAfterClinicalOnset")
                        .HasColumnType("integer");

                    b.Property<byte>("HuntHessScaleType")
                        .HasColumnType("smallint");

                    b.Property<byte>("IndicationSubType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsExertion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsImmuneSupression")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIschemia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsKnownAnticoagulation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsKnownCoagulopathy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMajorTrauma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMinorTrauma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNeoplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNeurologicalDeficit")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPapilledema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPathologilacFindingInPreviousExamination")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPenetratingInjury")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPolytrauma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPregnancy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProgressiveClinicalFindings")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRefractoryEpilepsy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubacuteTrauma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThunderclapHeadache")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerificationOfShuntPositioning")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWakeUpStroke")
                        .HasColumnType("boolean");

                    b.Property<byte?>("Month")
                        .HasColumnType("smallint");

                    b.Property<int?>("NihssScore")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationPageId");

                    b.ToTable("ExaminationIndicationFindings");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.ExaminationPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBrainMRI")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBrainstemMRI")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOrbitaMRI")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParanasalSinusMRI")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPituitaryMRI")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemporalBone")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ExaminationPages");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.FacialSkullPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("FacialSkullPages");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.MeningesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CharacterizationHematomaType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<int?>("CurrentExaminationInHu")
                        .HasColumnType("integer");

                    b.Property<byte>("CysticPartsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DensityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis2")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis3")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GrowthPatternType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HistologyKnownType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAbscessCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdjacentContusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAlongFalx")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAlongTentorium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssociatedInfarction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssociatedSkullFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBiconvex")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCerebellopontineAngle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConcomitantHydrocephalus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContrastEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContrastEnhancementMembrane")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContrecoupSDH")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCorticalVeinDisplacement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCrescentShaped")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCrossingSutures")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysticParts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDuraTailSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDuralAttachmentCrossed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDuralAttachmentNotExceeded")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDuralDisplacementBetweenEDHAndBrain")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDuralThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmpyema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnPlaqueConfiguration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFalx")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForamenMagnum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFrontal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGyriformGrowth")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHerniation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologyKnown")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHydrocephalus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHyperostosisOfTheAdjacentBone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfratentorial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInsularCistern")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraforaminalFissuralGrowth")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntrameatalGrowth")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntrasellar")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsJugularForamen")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLaminaCribrosa")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeptomeninges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalVenousStasis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMedian")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMidlineShift")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThenOneLesionOfTheSameEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOccipital")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOpticNerveSheath")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPachymeninges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParietal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerifocalCerebralEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorClinoidProcess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeptations")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSigmoidSulcus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSkullBase")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSolidParts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSphenoidWing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuturesNotCrossed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSwirlSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemporal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTentorium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrigoneOfTheLateralVentricle")
                        .HasColumnType("boolean");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxExtensionInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxWidthInMm")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MeningesPageId")
                        .HasColumnType("uuid");

                    b.Property<int?>("MeningesWidthInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MidlineShiftInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("MidlineShiftSideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<int?>("PreviousExaminationInHu")
                        .HasColumnType("integer");

                    b.Property<int?>("QuantitativeInHu")
                        .HasColumnType("integer");

                    b.Property<byte>("RegionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SecondPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SizeInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("ThirdPlaneInMm")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ImageFileId");

                    b.HasIndex("MeningesPageId");

                    b.ToTable("MeningesFindings");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.MeningesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("MeningesPages");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.PreviousInterventionsTherapiesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnamnesisPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Month")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesisPageId");

                    b.ToTable("PreviousInterventionsTherapiesFindings");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.Reconstruction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AcquisitionId")
                        .HasColumnType("uuid");

                    b.Property<int?>("DoseLengthProductMGycm")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTAngiography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLungs")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMIP")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMPR")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMinIP")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissues")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVRT")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("ReconstructionType")
                        .HasColumnType("smallint");

                    b.Property<float?>("SliceThicknessST1Mm")
                        .HasColumnType("real");

                    b.Property<float?>("SliceThicknessST2Mm")
                        .HasColumnType("real");

                    b.Property<float?>("SliceThicknessST3Mm")
                        .HasColumnType("real");

                    b.Property<float?>("SliceThicknessST4Mm")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AcquisitionId");

                    b.ToTable("Reconstructions");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.SellarRegionFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CarotidArterySideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DensityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ExtensionSize")
                        .HasColumnType("integer");

                    b.Property<int?>("ExtensionSize2ndPlane")
                        .HasColumnType("integer");

                    b.Property<int?>("ExtensionSize3rdPlane")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HistologyKnownType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("Is1LesionOfTheSameEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAbducensNerveVI")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdenohypophysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBonyRemodeling")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCavernousSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContactToOpticChiasm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContactWithCarotidArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDetectionOfLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDisplacement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDisplacementOfPituitaryStalk")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDuraMaterMeningen")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDuraTailSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExtensionToSuprasellar")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologyKnown")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHydrocephalus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationIntoCavernousSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInternalCarotidArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNasopharynx")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNeurohypophysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOculomotorNerveIII")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOlfactoryNerveII")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOpticChiasm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOpticNerveI")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerifocalEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPituitaryStalk")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSphenoidSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubstanceDefect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOfInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsToothBoneFormation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrochlearNerveIV")
                        .HasColumnType("boolean");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PituitaryStalkSideType")
                        .HasColumnType("smallint");

                    b.Property<int?>("Quantitative")
                        .HasColumnType("integer");

                    b.Property<byte>("RelationToThePituitaryGlandType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SellarRegionDiagnosis1Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("SellarRegionDiagnosis2Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("SellarRegionDiagnosis3Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("SellarRegionDiagnosisLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("SellarRegionPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("SellarRegionPageId");

                    b.ToTable("SellarRegionFindings");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.SellarRegionPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SellarRegionPages");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.SummaryPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SummaryPages");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.TechnologyPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BarcodeCMCharge")
                        .HasColumnType("text");

                    b.Property<byte>("CMReinforcedType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ContrastVolumeInMl")
                        .HasColumnType("integer");

                    b.Property<byte>("ImageQualityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("IodineConcentrationType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBeamHardeningArtifact")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCMSideEffect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCortisoneIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH1BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH2BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntrathecal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntravenous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetalArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMotion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotFurtherSpecified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsO2Administration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOther")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPulsationArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRespiratoryArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneousEpinephrine")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SequencesType")
                        .HasColumnType("smallint");

                    b.Property<string>("SetName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("TechnologyPages");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.VesselsFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ASPECTScore")
                        .HasColumnType("integer");

                    b.Property<int>("AffectedSegmentsOrVesselsLocation")
                        .HasColumnType("integer");

                    b.Property<byte>("ArterialSupplyAreaPatternType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ArterialTerritoryType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ArteriesWithOutletType")
                        .HasColumnType("smallint");

                    b.Property<decimal>("BasalGangliaLocation")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("CBFGradingType")
                        .HasColumnType("smallint");

                    b.Property<int?>("CBFInMl100gMin")
                        .HasColumnType("integer");

                    b.Property<byte>("CBVGradingType")
                        .HasColumnType("smallint");

                    b.Property<int?>("CBVInMl100g")
                        .HasColumnType("integer");

                    b.Property<byte>("CerebralEdemaType")
                        .HasColumnType("smallint");

                    b.Property<int>("CerebralVenousThrombosisLocation")
                        .HasColumnType("integer");

                    b.Property<byte>("CollateralizationSeverityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<decimal>("CortexLocation")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int?>("DegreeOfStenosisCalculatedInNASCETInPercentage")
                        .HasColumnType("integer");

                    b.Property<byte>("DetailsType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DiameterDiseaseFreePoststenoticSegmentInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("DiameterStenosisInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("DifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ExtensionAneurysmInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<float?>("GradingVolumeInMm3")
                        .HasColumnType("real");

                    b.Property<byte>("HyperPerfusionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HypoPerfusionType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<byte>("InfarctStageType")
                        .HasColumnType("smallint");

                    b.Property<byte>("InternalCarotidArterySegmentsLocations")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAntCommunicatingArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArtifactRelated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssociatedFindingsWedgeShapedConfiguration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBranchesOfTheExternalCarotidArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCSFIsodense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCaliberIrregularities")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCerebralEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervicalVesselElongation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCirculusArteriosusWillisii")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCollateralizationOfTheICAViaECABranches")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCongestiveHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContralateralVertebralArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContrastEnhancementOfTheArterialWall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCortex")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCortexAffected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCorticalVeins")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCorticalVeinsLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCorticalVeinsRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCuneus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDissectionOfUpstreamCervicalArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDownstreamInfarctionAreas")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEccentric")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEctasiaOfTheUpstreamVeins")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEtatLacunaire")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFrontal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGyrusTemporalisTransversus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemodynamicallyRelevant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhagicTransformation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHyperdenseMediaSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHyperdenseVesselSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHyperperfusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypoperfusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfarctionDemarked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInferiorCerebellarPeduncle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInferiorPetrosalSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInflammatoryChange")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfratentorial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInternalCerebralVeins")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInternalCerebralVeinsLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInternalCerebralVeinsRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIschemia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIschemicGenesis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralOccipitotemporalGyrus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftA1Aplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftA1Hypoplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftA1SplittingOrDuplication")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAVAplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAVHypoplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAcomAAplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAcomAHypoplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAcomASplittingOrDuplication")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAcomPAplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAcomPHypoplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftP1Aplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftP1HypoplasiaOrFTPConfiguration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftP1SplittingOrDuplication")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftPICAEndingAV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftSphenoparietalSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftTripleACA")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftVeinOfLabbe")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeptomeningealCollaterals")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLimitedDelineationOfTheBasalGanglia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLimitedDelineationOfTheThalamus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLimitedEvaluability")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLimitedMedullaCorticalDifferentiation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLingualGyrus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocoregionalObliterationOfFattyTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMiddleCerebellarPeduncle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMultipleLesions")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNarrowedSulci")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNoEvidenceOfAPerfusionDisturbance")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNoIntracerebralHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNoRelevantPenumbra")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOccipital")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOstialStenosisAffectedVessel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPRESS")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPanarteritisNodosa")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParenchymatous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParietal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParsIntermedia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerfusionOfTheICAParsCervicalis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerifocalGliosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPetechial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPetechialHemorrhages")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPostCommunicatingArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPostictalChanges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPraecuneus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPseudolaminarNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRelevantPenumbra")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReperfusionSyndrome")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRetrogradePerfusionOfTheOphthalmicArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReverseFlow")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReverseFlowSuspected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReverseFlowSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightA1Aplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightA1Hypoplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightA1SplittingOrDuplication")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAVAplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAVHypoplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAcomAAplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAcomAHypoplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAcomASplittingOrDuplication")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAcomPAplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAcomPHypoplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightP1Aplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightP1HypoplasiaOrFTPConfiguration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightP1SplittingOrDuplication")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightPICAEndingAV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightSphenoparietalSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightTripleACA")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightVeinOfLabbe")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSAH")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShortStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSigmoidSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSinusCavernosus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftPlaque")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStringOfPearlsAspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubarachnoidHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperiorCerebellarPeduncle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperiorPetrosalSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperiorSagittalSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSwellingOfTheGyri")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemporal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTerritorialPatternWedgeShapedConfiguration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThrombolization")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThrombosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThrombusInUpstreamCervicalArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThroughContralateralExternalCarotidArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThroughIpsilateralVertebralArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTransverseSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTumorDisease")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpstreamCervicalArteryWithHighGradeStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpstreamCervicalArteryWithOcclusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsV1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsV2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsV3")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsV4")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVentricularHerniation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWallHematoma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWhiteMatter")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWhiteMatterAffected")
                        .HasColumnType("boolean");

                    b.Property<byte>("IschemicAreaPatternType")
                        .HasColumnType("smallint");

                    b.Property<int?>("LengthInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("LongitudinalExpansionThrombusInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("MTTGradingType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MTTInSec")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<float?>("MismatchRatio")
                        .HasColumnType("real");

                    b.Property<byte>("MismatchType")
                        .HasColumnType("smallint");

                    b.Property<float?>("MismatchVolumeInMm3")
                        .HasColumnType("real");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OrientationAneurysmType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathologyType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("Perfusion01ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Perfusion01PictureNumber")
                        .HasColumnType("text");

                    b.Property<string>("Perfusion01SerialNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("Perfusion02ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Perfusion02PictureNumber")
                        .HasColumnType("text");

                    b.Property<string>("Perfusion02SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<int?>("SecondPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<byte>("SeverityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SubarachnoidHemorrhageLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SubarachnoidHemorrhageType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TTPGradingType")
                        .HasColumnType("smallint");

                    b.Property<int?>("TTPInSec")
                        .HasColumnType("integer");

                    b.Property<int?>("ThirdPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<int>("VascularTerritoryLocation")
                        .HasColumnType("integer");

                    b.Property<byte>("VascularTerritoryType")
                        .HasColumnType("smallint");

                    b.Property<byte>("VesselsDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("VesselsPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("WhiteMatterType")
                        .HasColumnType("smallint");

                    b.Property<int?>("WidthAneurysmNeckInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("WithAVShuntType")
                        .HasColumnType("smallint");

                    b.Property<byte>("WithoutAVShuntType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ImageFileId");

                    b.HasIndex("Perfusion01ImageFileId");

                    b.HasIndex("Perfusion02ImageFileId");

                    b.HasIndex("VesselsPageId");

                    b.ToTable("VesselsFindings");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.VesselsPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("VesselsPages");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("Pages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("ReportResults")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.HasOne("RadioReport.HeadCT.Domain.Models.ExaminationPage", null)
                        .WithOne("PatientInformation")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", null)
                        .WithOne("Session")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", "ReportSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.Acquisition", b =>
                {
                    b.HasOne("RadioReport.HeadCT.Domain.Models.TechnologyPage", null)
                        .WithMany("Acquisitions")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.AnamnesisPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.BasalNucleiFinding", b =>
                {
                    b.HasOne("RadioReport.HeadCT.Domain.Models.BasalNucleiPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("BasalNucleiPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.BasalNucleiPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.BrainstemCranialNervesFinding", b =>
                {
                    b.HasOne("RadioReport.HeadCT.Domain.Models.BrainstemCranialNervesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("BrainstemCranialNervesPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.BrainstemCranialNervesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.CMSideEffect", b =>
                {
                    b.HasOne("RadioReport.HeadCT.Domain.Models.TechnologyPage", null)
                        .WithMany("CMSideEffects")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.CerebrospinalFluidSpaceFinding", b =>
                {
                    b.HasOne("RadioReport.HeadCT.Domain.Models.CerebrospinalFluidSpacePage", null)
                        .WithMany("Findings")
                        .HasForeignKey("CerebrospinalFluidSpacePageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "ImageFile")
                        .WithMany()
                        .HasForeignKey("ImageFileId");
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.CerebrospinalFluidSpacePage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.ClinicalSymptomFinding", b =>
                {
                    b.HasOne("RadioReport.HeadCT.Domain.Models.AnamnesisPage", null)
                        .WithMany("ClinicalSymptomFindings")
                        .HasForeignKey("AnamnesisPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.CortexFinding", b =>
                {
                    b.HasOne("RadioReport.HeadCT.Domain.Models.CortexPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("CortexPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.CortexPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.ExaminationIndicationFinding", b =>
                {
                    b.HasOne("RadioReport.HeadCT.Domain.Models.ExaminationPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("ExaminationPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.ExaminationPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.FacialSkullPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.MeningesFinding", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "ImageFile")
                        .WithMany()
                        .HasForeignKey("ImageFileId");

                    b.HasOne("RadioReport.HeadCT.Domain.Models.MeningesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("MeningesPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.MeningesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.PreviousInterventionsTherapiesFinding", b =>
                {
                    b.HasOne("RadioReport.HeadCT.Domain.Models.AnamnesisPage", null)
                        .WithMany("PreviousInterventionsTherapiesFindings")
                        .HasForeignKey("AnamnesisPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.Reconstruction", b =>
                {
                    b.HasOne("RadioReport.HeadCT.Domain.Models.Acquisition", null)
                        .WithMany("Reconstructions")
                        .HasForeignKey("AcquisitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.SellarRegionFinding", b =>
                {
                    b.HasOne("RadioReport.HeadCT.Domain.Models.SellarRegionPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("SellarRegionPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.SellarRegionPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.SummaryPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.TechnologyPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.VesselsFinding", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "ImageFile")
                        .WithMany()
                        .HasForeignKey("ImageFileId");

                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "Perfusion01ImageFile")
                        .WithMany()
                        .HasForeignKey("Perfusion01ImageFileId");

                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "Perfusion02ImageFile")
                        .WithMany()
                        .HasForeignKey("Perfusion02ImageFileId");

                    b.HasOne("RadioReport.HeadCT.Domain.Models.VesselsPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("VesselsPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.HeadCT.Domain.Models.VesselsPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
