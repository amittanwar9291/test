// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RadioReport.SpineCT.Repo;

namespace RadioReport.SpineCT.Repo.Migrations
{
    [DbContext(typeof(SpineCTDbContext))]
    [Migration("20210824084542_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PageNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("WasModified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("PageInfos");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessionNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Evaluation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExaminationType")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("FindingsDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FreeField")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("LicenseFractionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LicensingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("PatientAge")
                        .HasColumnType("smallint");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PresetCode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StudyInstanceUID")
                        .HasColumnType("text");

                    b.Property<byte>("TotalPageCount")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Approved")
                        .HasColumnType("text");

                    b.Property<string>("Discussion")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsICD10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferenceImage")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReportSummary")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportResults");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ReportSession");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ObjectName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ImageFiles");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<byte?>("Age")
                        .HasColumnType("smallint");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PatientInformation");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.FindingLocalizer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mapping")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FindingLocalizers");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("BuildVersion")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Paragraphs")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportTypeName", "VersionName")
                        .IsUnique();

                    b.ToTable("ReportSchemas");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ReportSchemaId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportSchemaId")
                        .IsUnique();

                    b.ToTable("ReportSchemaSessions");
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.Acquisition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AcquisitionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("BreathingProtocolType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsArterial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArterialEarly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArterialLate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTMyelography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsECGGating")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNative")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPulmonaryArterialPhase")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVenous")
                        .HasColumnType("boolean");

                    b.Property<float?>("LateDelayInMin")
                        .HasColumnType("real");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<int?>("NumberOfLines")
                        .HasColumnType("integer");

                    b.Property<byte>("PatientPositioningType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ReferenceValueInMAs")
                        .HasColumnType("integer");

                    b.Property<float?>("SliceThicknessInMm")
                        .HasColumnType("real");

                    b.Property<byte>("TechniqueType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.Property<int?>("TubeCurrent1MAs")
                        .HasColumnType("integer");

                    b.Property<int?>("TubeCurrent2MAs")
                        .HasColumnType("integer");

                    b.Property<byte>("TubeCurrentModulationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("TubeVoltage1KV")
                        .HasColumnType("integer");

                    b.Property<int?>("TubeVoltage2KV")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("Acquisitions");
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.AnamnesisIndication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AnamnesisIndicationType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("AnamnesisPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("IntracranialHypotensionSyndromeType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCSFLeakage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConusCaudaSyndrome")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffuseLumbago")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffuseLumbagoLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffuseLumbagoRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMinorInjury")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMotorDeficit")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPain")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPseudoradicularSymptoms")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPseudoradicularSymptomsLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPseudoradicularSymptomsRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRadiculopathy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRadiculopathyLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRadiculopathyRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSensoryDeficit")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrauma")
                        .HasColumnType("boolean");

                    b.Property<byte>("MonthOfVertebralBodyFracture")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<decimal>("SpineLocation")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("SpineLocationBones")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("YearOfVertebralBodyFracture")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesisPageId");

                    b.ToTable("AnamnesisIndications");
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.AnamnesisPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRI")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsXRay")
                        .HasColumnType("boolean");

                    b.Property<byte>("MonthOfCT")
                        .HasColumnType("smallint");

                    b.Property<byte>("MonthOfMRI")
                        .HasColumnType("smallint");

                    b.Property<byte>("MonthOfXRay")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<int>("YearOfCT")
                        .HasColumnType("integer");

                    b.Property<int>("YearOfMRI")
                        .HasColumnType("integer");

                    b.Property<int>("YearOfXRay")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("AnamnesisPages");
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.BonesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("A0ClassificationASubtype")
                        .HasColumnType("smallint");

                    b.Property<byte>("A0ClassificationBSubtype")
                        .HasColumnType("smallint");

                    b.Property<byte>("A0ClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("A0CoccygisClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("A0OsSacrumClassificationASubtype")
                        .HasColumnType("smallint");

                    b.Property<byte>("A0OsSacrumClassificationBSubtype")
                        .HasColumnType("smallint");

                    b.Property<byte>("A0OsSacrumClassificationCSubtype")
                        .HasColumnType("smallint");

                    b.Property<byte>("A0OsSacrumClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("AdjacentSclerosisType")
                        .HasColumnType("smallint");

                    b.Property<int?>("AtlantodentalIntervalInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("AxisArcType")
                        .HasColumnType("smallint");

                    b.Property<byte>("BonesDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("BonesFractureDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("BonesPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("C0NoFutherDefinedTypeLeft")
                        .HasColumnType("smallint");

                    b.Property<byte>("C0NoFutherDefinedTypeRight")
                        .HasColumnType("smallint");

                    b.Property<byte>("C1NoFutherDefinedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("C1SpecialFractureTypesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("C1ToC2FractureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("C2FractureDetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("C2FractureLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("C2NoFutherDefinedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("C2SpecialFractureTypesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CCommonSpecialFractureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CalcificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CoccygisNoFutherDefinedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CommonNoFutherDefinedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ComplicationsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementDistribution")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CortexType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DensityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DetailsInterventionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("Expansion2ndPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("Expansion3rdPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpansionMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureStabilityLeft")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureStabilityRight")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GehweilerType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GenantClassificationGradeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GenantFractureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<decimal>("InterventionSpineLocations")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("InterventionType")
                        .HasColumnType("smallint");

                    b.Property<decimal>("IntervertebralDiscReplacementSpineLocations")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("IsAbove1LesionSameEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdjacentSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdjacentSoftTissueInjury")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnteriorColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneApposition")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneCementLeakage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCementEvidenceInParavertebralVeins")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCodmanTriangle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompressionOfAdjacentStructures")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCystic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDD1SuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDD2Subordinate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDislocation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdgrenVainoSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExtensiveVertebralHemangioma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFractureOccipitalCondyleSideLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFractureOccipitalCondyleSideRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGeographicAppearance")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGroundGlassAspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncreasedAtlantodentalInterval")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIndicationOfPulmonaryArteryEmbolism")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationOfAdjacentSoftTissues")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInterruptionOfEndPlate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntralesionalFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInvolvementOfLeftVertebralArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInvolvementOfRightVertebralArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiquidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMarginalSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMaterialFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMiddleColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMultilayered")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsSacrumLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsSacrumRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoblastic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoproliferativeReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPathologicFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPedunculateGrowingAwayFromNearbyJoint")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPermeativeGrowthPattern")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPolkaDotSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRemodelling")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSchmorlNode")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpineSideLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpineSideRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSunburst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSwelling")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrailingEdgeParticipation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVertebralArteryInvolvement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWithSignificantDisplacement")
                        .HasColumnType("boolean");

                    b.Property<byte>("LocalizationVertebralArchType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocationSideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MassSpineDD1")
                        .HasColumnType("smallint");

                    b.Property<byte>("MassSpineDD2")
                        .HasColumnType("smallint");

                    b.Property<byte>("MassSpineDD3")
                        .HasColumnType("smallint");

                    b.Property<byte>("MassSpineDensityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MatrixType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MinVertebralBodyHeightInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OsSacrumDenisClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("OsSacrumNoFutherDefinedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("OsSacrumSpecialFractureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathologyOfTheVertebralArchBonesDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<int?>("RotationLeftInDeg")
                        .HasColumnType("integer");

                    b.Property<byte>("RotationOrTranslationLeft")
                        .HasColumnType("smallint");

                    b.Property<byte>("RotationOrTranslationRight")
                        .HasColumnType("smallint");

                    b.Property<int?>("RotationRightInDeg")
                        .HasColumnType("integer");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignificantType")
                        .HasColumnType("smallint");

                    b.Property<decimal>("SpineLocation")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("SpondylodesisSpineLocations")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("StabilityType")
                        .HasColumnType("smallint");

                    b.Property<int?>("TranslationLeftInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("TranslationRightInMm")
                        .HasColumnType("integer");

                    b.Property<decimal>("VertebraSpineLocations")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("VertebralBodyLocalizations")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BonesPageId");

                    b.ToTable("BonesFindings");
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.BonesFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("BonesDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("CortexType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsExtensiveVertebralHemangioma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationOfAdjacentSoftTissues")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiquidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMarginalSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPolkaDotSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSunburst")
                        .HasColumnType("boolean");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("BonesFindingPresets");
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.BonesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("BonesPages");
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.CMSideEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMSideEffectType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DurationAdverseReactionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCompletelyDeclining")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeriousAdverseEvent")
                        .HasColumnType("boolean");

                    b.Property<int?>("MinAfterCMinjection")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("CMSideEffects");
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.ConfigurationFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CastellviType")
                        .HasColumnType("smallint");

                    b.Property<int?>("CervicalSpineCobbAngle")
                        .HasColumnType("integer");

                    b.Property<decimal>("CervicalSpineLocation")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("CervicalSpinePathologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CervicalVertexSpineType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ConfigurationPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("DefinitionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("EtiologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsC7NeckRib")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervical")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervicalSpine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervicothoracic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLumbalizedTH12")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLumbarSpine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLumbosacral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThoracicSpine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThoracolumbar")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTorsionCervicalSpine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTorsionLumbarSpine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTorsionThoracicSpine")
                        .HasColumnType("boolean");

                    b.Property<int?>("LumbarSpineCobbAngle")
                        .HasColumnType("integer");

                    b.Property<decimal>("LumbarSpineLocation")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("LumbarSpinePathologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LumbarVertexSpineType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LumbosacralType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MeyerdingClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PatternType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<decimal>("SpondylolisthesisLocation")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int?>("ThoracicSpineCobbAngle")
                        .HasColumnType("integer");

                    b.Property<decimal>("ThoracicSpineLocation")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("ThoracicSpinePathologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ThoracicVertexSpineType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationPageId");

                    b.ToTable("ConfigurationFindings");
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.ConfigurationPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ConfigurationPages");
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.DiscFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AtlantodentalDistanceInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("BulgingDetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ComplicationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("CraniocaudalExtensionInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("DirectionOfMigrationType")
                        .HasColumnType("smallint");

                    b.Property<int>("DiscLocation")
                        .HasColumnType("integer");

                    b.Property<Guid?>("DiscPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("ExpansionIntoSpinalCanalType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FacetJointArthrosisForaminalStenosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GradeType")
                        .HasColumnType("smallint");

                    b.Property<int?>("IntraspinalLargestDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActiveDiscitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnderssonLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnkylosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnteriorColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnteriorLongitudinalLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArthritis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArthrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAtlantoaxialJointErosions")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBasilarImpression")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBulging")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConsolidated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContrastEnhancementOfTheDisc")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCyst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDensErosion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDensProtrusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiscCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnthesitisChronic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsErosion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFacetJointArthropathy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFacetJointArthropathyLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFacetJointArthropathyRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFacetJointArthrosisForaminalStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFacetJointArthrosisLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFacetJointArthrosisRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFacetJointsErosions")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForaminalStenosisLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForaminalStenosisRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHyperostoticSpondylophyte")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypertrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncreasedSizeOfTheDisc")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntervertebralDiscRupture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraspinal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIrregularityOfAdjacentVertebralEndplates")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLigNuchae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiggFlava")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiggInterspinosa")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiggSupraspinosa")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocatedAtPsoasMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLuxation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLuxationLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLuxationRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMiddleColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMixtaosteophyte")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMultiple")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNarrowingOfTheIntervertebralDisc")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNerveRootAffectionLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNerveRootAffectionRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOssification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOssificationOfTheIntervertebralSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoarthritis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteochondrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteophyte")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteophyteFormation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoproliferativeReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParasyndesmophyte")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParavertebral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParavertebralInflammatoryResponse")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorLongitudinalLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRetrospondylophyte")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRomanusLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRuptureOfAnteriorLongitudinalLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRuptureOfPosteriorLongitudinalLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSecondary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpinalCanalStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpondylolysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpondylolysisLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpondylolysisRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStenosisLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStenosisRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubluxation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSyndesmophyte")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovialCyst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovialCystLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovialCystRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUncovertebralArthrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUncovertebralArthrosisForaminalStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUncovertebralArthrosisLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUncovertebralArthrosisRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVacuumPhenomenon")
                        .HasColumnType("boolean");

                    b.Property<byte>("LevelCraniocaudalType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("NerveRootAffectionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OsteoproliferativeReactionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ParavertebralLargestDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("PathriaClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ProtrusionExtrusionDetailsType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ReferenceChamberlainLineInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("SagittalDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpineAxialLocation")
                        .HasColumnType("smallint");

                    b.Property<decimal>("SpineLocation")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("StenosisType")
                        .HasColumnType("smallint");

                    b.Property<int?>("TransverseDiameterSpinalCanalWidthInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("UncovertebralArthrosisForaminalStenosisType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("DiscPageId");

                    b.ToTable("DiscFindings");
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.DiscPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("DiscPages");
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.LocalizationPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("SpineLocation")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("LocalizationPages");
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.MyelonSpinalCanalFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AccordingToMeyerdingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CalcificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CharIIHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CharacterizationType")
                        .HasColumnType("smallint");

                    b.Property<int>("ContrastEnhancementDistributionType")
                        .HasColumnType("integer");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DDHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis1Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis2Type")
                        .HasColumnType("smallint");

                    b.Property<decimal>("DifferentialDiagnosisAbove1LesionLocations")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int?>("Expansion2ndPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("Expansion3rdPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpansionMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAnterior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsClottedNerveRoots")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompressionFromAnterior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompressionFromLeftSide")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompressionFromPosterior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompressionFromRightSide")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCystic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDifferentialDiagnosisAbove1LesionOfTheSameEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmptyDuralSac")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGasInclusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHourglassNeurinoma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntralesionalFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIsSpinalCanalLocalizationRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLDiscProtrusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralRecessStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeptomeningealSpread")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLigFlavumHypertrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLigFlavumHypertrophyLeftSide")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLigFlavumHypertrophyRightSide")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNeuralForaminalCompression")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNeuralForaminalCompressionLeftSide")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNeuralForaminalCompressionRightSide")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNeuralForaminalWidening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosterior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPseudospondylolisthesis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRetrospondylosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRootDisplacement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScaloppingOrThinnedPedicle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeptationInTheSubarachnoidSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSerpiginousVascularStructures")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSignificantVascularization")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpinalCanalLocalizationLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpondylosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpondylosisLeftSide")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpondylosisRightSide")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTShapedStenosisSpinalCanal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUncovertebralArthrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUncovertebralArthrosisLeftSide")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUncovertebralArthrosisRightSide")
                        .HasColumnType("boolean");

                    b.Property<decimal>("LocalizationOfNerveRootDisplacement")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("LocalizationOfNeuralForaminalWidening")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("LocalizationTopOrBottomVertebra")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MeasurementInHU")
                        .HasColumnType("integer");

                    b.Property<byte>("MyelonAffectionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MyelonSpinalCanalDensityType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("MyelonSpinalCanalPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<int?>("SagittalDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("SpinalCanalLocation")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpinalCanalStenosisDetailType")
                        .HasColumnType("smallint");

                    b.Property<decimal>("SpineLocation")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("SpondylosisDetailsType")
                        .HasColumnType("smallint");

                    b.Property<int?>("TransverseDiameterInMm")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MyelonSpinalCanalPageId");

                    b.ToTable("MyelonSpinalCanalFindings");
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.MyelonSpinalCanalPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AreFindings")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("MyelonSpinalCanalPages");
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.PreviousIntervention", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnamnesisPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("DetailsInterventionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRight")
                        .HasColumnType("boolean");

                    b.Property<byte>("MonthOfLumbarPuncture")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PreviousInterventionType")
                        .HasColumnType("smallint");

                    b.Property<decimal>("SpineLocation")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("YearOfLumbarPuncture")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesisPageId");

                    b.ToTable("PreviousInterventions");
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.Reconstruction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AcquisitionId")
                        .HasColumnType("uuid");

                    b.Property<int?>("DoseLengthProductMGycm")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTAngiography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLungs")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMIP")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMPR")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMinIP")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissues")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVRT")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("ReconstructionType")
                        .HasColumnType("smallint");

                    b.Property<float?>("SliceThicknessST1Mm")
                        .HasColumnType("real");

                    b.Property<float?>("SliceThicknessST2Mm")
                        .HasColumnType("real");

                    b.Property<float?>("SliceThicknessST3Mm")
                        .HasColumnType("real");

                    b.Property<float?>("SliceThicknessST4Mm")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AcquisitionId");

                    b.ToTable("Reconstructions");
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.SacroiliacJointFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AnkylosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosisType01")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosisType02")
                        .HasColumnType("smallint");

                    b.Property<byte>("ExtensionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAnkylosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneBridges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsErosions")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsJointSpaceNarrowing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteophytesAnterior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSecondary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVacuumPhenomenon")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PelvisLocation")
                        .HasColumnType("smallint");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("SacroiliacJointPageId")
                        .HasColumnType("uuid");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<byte>("SubchondralSclerosisType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ImageFileId");

                    b.HasIndex("SacroiliacJointPageId");

                    b.ToTable("SacroiliacJointFindings");
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.SacroiliacJointPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SacroiliacJointPages");
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.SoftTissuesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AffectedVesselOrUreterType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CalcificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CervicalSpineAutochthonousSideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CharacterizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DensityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis2")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HistologicallyProvenType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("IliocostalisMuscleSideType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAffectedVesselOrUreterLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAffectedVesselOrUreterRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAortocaval")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBones")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsuleOrMembrane")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervical")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervicalLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervicalRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervicalSpineAutochthonous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCommunicationWithTheIntraduralSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCystic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFattyDegeneration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFemoral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFemoralLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFemoralRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGasInclusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHematoma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologicallyProven")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIliocostalisMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInguinal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInguinalLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInguinalRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInterfascial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntermuscular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntralesionalFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntramuscular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLevatorScapulaeMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLongissimusCapitisMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLongissimusMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMassEffect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMultifidusMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscularAtrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscularHypotrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNerveRoot")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParaaortal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParailiacal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParailiacalLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParailiacalRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPresacral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPresacralLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPresacralRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPsoasMajorMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsQuadratusLumborumMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSemispinalisCapitisMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSemispinalisColliMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpleniusCapitisMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperinfection")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSurroundinginflammatoryReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThoracicOrLumbarSpineAutochthonous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrapeziusMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUrether")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUretherLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUretherRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVessels")
                        .HasColumnType("boolean");

                    b.Property<int?>("LargestLymphNodeSADInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("LeftMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("LeftPathologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LevatorScapulaeMuscleSideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LongissimusCapitisMuscleSideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LongissimusMuscleSideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MeasurementInHU")
                        .HasColumnType("integer");

                    b.Property<decimal>("MoreThanOneLesionSpineLocation")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("MultifidusMuscleSideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MuscularAtrophyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathologyType")
                        .HasColumnType("smallint");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<byte>("PsoasMajorMuscleSideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("QuadratusLumborumMuscleSideType")
                        .HasColumnType("smallint");

                    b.Property<int?>("RightMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("RightPathologyType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SecondPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("SemispinalisCapitisMuscleSideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SemispinalisColliMuscleSideType")
                        .HasColumnType("smallint");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("SoftTissuesPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SpineAxialLocation")
                        .HasColumnType("smallint");

                    b.Property<decimal>("SpineLocation")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("SpineLocationBones")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("SpleniusCapitisMuscleSideType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ThirdPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("ThoracicOrLumbarSpineAutochthonousSideType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ImageFileId");

                    b.HasIndex("SoftTissuesPageId");

                    b.ToTable("SoftTissuesFindings");
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.SoftTissuesFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ContrastEnhancementDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsuleOrMembrane")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCommunicationWithTheIntraduralSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSurroundinginflammatoryReaction")
                        .HasColumnType("boolean");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("SoftTissuesFindingPresets");
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.SoftTissuesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SoftTissuesPages");
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.SummaryPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("FindingsDynamicsType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBiopsyRecommended")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneScintigraphy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsComplementaryImaging")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConsultationNeurology")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConsultationNeurosurgery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConsultationOrthopedics")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConsultationPainTherapist")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsISGInfiltrationLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsISGInfiltrationRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRTCervicalSpine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRTLumbarSpine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRTSacroiliacJoint")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRTThoracicSpine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPETCT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPainTherapyInterventional")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWithIVContrastAgent")
                        .HasColumnType("boolean");

                    b.Property<byte>("PainTherapyInterventionalType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SummaryPages");
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.TechnologyPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BarcodeCMCharge")
                        .HasColumnType("text");

                    b.Property<byte>("CMReinforcedType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ContrastVolumeInMl")
                        .HasColumnType("integer");

                    b.Property<byte>("ImageQualityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("IodineConcentrationType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCMSideEffect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCortisoneIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH1BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH2BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntradural")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntravenous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetalArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMotion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotFurtherSpecified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsO2Administration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOther")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPulsationArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRespiratoryArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneousEpinephrine")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SequencesType")
                        .HasColumnType("smallint");

                    b.Property<string>("SetName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("TechnologyPages");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("Pages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("ReportResults")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.HasOne("RadioReport.SpineCT.Domain.Models.LocalizationPage", null)
                        .WithOne("PatientInformation")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", null)
                        .WithOne("Session")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", "ReportSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.Acquisition", b =>
                {
                    b.HasOne("RadioReport.SpineCT.Domain.Models.TechnologyPage", null)
                        .WithMany("Acquisitions")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.AnamnesisIndication", b =>
                {
                    b.HasOne("RadioReport.SpineCT.Domain.Models.AnamnesisPage", null)
                        .WithMany("AnamnesisIndications")
                        .HasForeignKey("AnamnesisPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.AnamnesisPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.BonesFinding", b =>
                {
                    b.HasOne("RadioReport.SpineCT.Domain.Models.BonesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("BonesPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.BonesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.CMSideEffect", b =>
                {
                    b.HasOne("RadioReport.SpineCT.Domain.Models.TechnologyPage", null)
                        .WithMany("CMSideEffects")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.ConfigurationFinding", b =>
                {
                    b.HasOne("RadioReport.SpineCT.Domain.Models.ConfigurationPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("ConfigurationPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.ConfigurationPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.DiscFinding", b =>
                {
                    b.HasOne("RadioReport.SpineCT.Domain.Models.DiscPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("DiscPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.DiscPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.LocalizationPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.MyelonSpinalCanalFinding", b =>
                {
                    b.HasOne("RadioReport.SpineCT.Domain.Models.MyelonSpinalCanalPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("MyelonSpinalCanalPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.MyelonSpinalCanalPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.PreviousIntervention", b =>
                {
                    b.HasOne("RadioReport.SpineCT.Domain.Models.AnamnesisPage", null)
                        .WithMany("PreviousInterventions")
                        .HasForeignKey("AnamnesisPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.Reconstruction", b =>
                {
                    b.HasOne("RadioReport.SpineCT.Domain.Models.Acquisition", null)
                        .WithMany("Reconstructions")
                        .HasForeignKey("AcquisitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.SacroiliacJointFinding", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "ImageFile")
                        .WithMany()
                        .HasForeignKey("ImageFileId");

                    b.HasOne("RadioReport.SpineCT.Domain.Models.SacroiliacJointPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("SacroiliacJointPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.SacroiliacJointPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.SoftTissuesFinding", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "ImageFile")
                        .WithMany()
                        .HasForeignKey("ImageFileId");

                    b.HasOne("RadioReport.SpineCT.Domain.Models.SoftTissuesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("SoftTissuesPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.SoftTissuesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.SummaryPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.SpineCT.Domain.Models.TechnologyPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
