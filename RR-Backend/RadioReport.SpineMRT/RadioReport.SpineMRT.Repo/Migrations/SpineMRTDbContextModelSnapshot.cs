// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RadioReport.SpineMRT.Repo;

namespace RadioReport.SpineMRT.Repo.Migrations
{
    [DbContext(typeof(SpineMRTDbContext))]
    partial class SpineMRTDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PageNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("WasModified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("PageInfos");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessionNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Evaluation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExaminationType")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("FindingsDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FreeField")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("LicenseFractionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LicensingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("PatientAge")
                        .HasColumnType("smallint");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PresetCode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StudyInstanceUID")
                        .HasColumnType("text");

                    b.Property<byte>("TotalPageCount")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Approved")
                        .HasColumnType("text");

                    b.Property<string>("Discussion")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsICD10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferenceImage")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReportSummary")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportResults");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ReportSession");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ObjectName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ImageFiles");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<byte?>("Age")
                        .HasColumnType("smallint");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PatientInformation");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.FindingLocalizer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mapping")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FindingLocalizers");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("BuildVersion")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Paragraphs")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportTypeName", "VersionName")
                        .IsUnique();

                    b.ToTable("ReportSchemas");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ReportSchemaId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportSchemaId")
                        .IsUnique();

                    b.ToTable("ReportSchemaSessions");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.AnamnesisPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ComplaintsType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<byte>("LumbagoSideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("NeurologySideType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("AnamnesisPages");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.BonesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AxisArcType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("BonesPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("C1C2FractureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("C1ToC2FractureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("C2FractureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("C3FractureFormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("C3FractureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CMEnhancementForm")
                        .HasColumnType("smallint");

                    b.Property<byte>("CMEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationArcusVertebraeInjuryType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CorticalisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DensityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis01")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis02")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis03")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureStabilityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GehweilerType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HistologySecuredType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("InfiltrationPatternType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilagecap")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilagecapT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCentral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeepFractureLine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffuse")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExpansive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGroundGlassMatrix")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologyProven")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistoryOfOsteosynthesis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistoryOfSpondylodesis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistoryOfVertebroplastyy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInTheSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationAdjacentSoftTissues")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationOfAdjacentBones")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationOfSoftTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInterruptionEndPlate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInvolvementAdjacentEndplate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftVertebralArteryDetectable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocationInferiorCortex")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLowSignalOfTheRim")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsObliqueSagittalFractureLine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOriginFromMidline")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoblastic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoidMatrix")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPathologicFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPedicleDestruction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerifocalSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealSpur")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightVertebralArteryDetectable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSchmorlNode")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerotic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScleroticMargin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSecondary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeptaChambered")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpinalCanalInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStability")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSurroundingInflammatoryReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<byte>("LimitationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationInTheVertebralArchType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationSagittalType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationSideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MainCharacteristicsDifferentialDiagnosis01")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxThicknessOfCap")
                        .HasColumnType("integer");

                    b.Property<int?>("MeasurementInMmFromTheInferiorCortex")
                        .HasColumnType("integer");

                    b.Property<byte>("NoSpecType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OsCoccygisFractureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("OsSacrumFractureFormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("OsSacrumFractureType")
                        .HasColumnType("smallint");

                    b.Property<int?>("Rotation")
                        .HasColumnType("integer");

                    b.Property<byte>("RotationOrTranslationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalSTIR")
                        .HasColumnType("smallint");

                    b.Property<int?>("Size")
                        .HasColumnType("integer");

                    b.Property<decimal>("SpineLocation")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("SpineLocation2")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("SpineLocation3")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("StabilityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("T1wSignal")
                        .HasColumnType("smallint");

                    b.Property<byte>("T2wSignal")
                        .HasColumnType("smallint");

                    b.Property<int?>("Translation")
                        .HasColumnType("integer");

                    b.Property<byte>("TraumaLocation")
                        .HasColumnType("smallint");

                    b.Property<byte>("ValuationOfFractureType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BonesPageId");

                    b.ToTable("BonesFindings");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.BonesFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMEnhancementForm")
                        .HasColumnType("smallint");

                    b.Property<byte>("CMEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CorticalisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("InfiltrationPatternType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilagecap")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilagecapT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCentral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExpansive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGroundGlassMatrix")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationOfSoftTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInterruptionEndPlate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInvolvementAdjacentEndplate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOriginFromMidline")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoblastic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoidMatrix")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerifocalSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealSpur")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScleroticMargin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeptaChambered")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSurroundingInflammatoryReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<byte>("LimitationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MainCharacteristicsDifferentialDiagnosis01")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalSTIR")
                        .HasColumnType("smallint");

                    b.Property<byte>("T1wSignal")
                        .HasColumnType("smallint");

                    b.Property<byte>("T2wSignal")
                        .HasColumnType("smallint");

                    b.Property<byte>("TraumaLocation")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("BonesFindingPresets");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.BonesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("BonesPages");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.ConfigurationFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("CervicalSpineCobbAngle")
                        .HasColumnType("integer");

                    b.Property<decimal>("CervicalSpineLocation")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("CervicalSpinePathologyType")
                        .HasColumnType("smallint");

                    b.Property<int>("CervicalSpineScoliosisType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ConfigurationPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("DetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("EtiologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsC7NeckRib")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervical")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervicalSpine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLumbalizedTH12")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLumbarSpine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLumbosacral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThoracicSpine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThoracolumbar")
                        .HasColumnType("boolean");

                    b.Property<int?>("LumbarSpineCobbAngle")
                        .HasColumnType("integer");

                    b.Property<decimal>("LumbarSpineLocation")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("LumbarSpinePathologyType")
                        .HasColumnType("smallint");

                    b.Property<int>("LumbarSpineScoliosisType")
                        .HasColumnType("integer");

                    b.Property<byte>("LumbosacralType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MeyerdingClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("SacralizedL5Type")
                        .HasColumnType("smallint");

                    b.Property<decimal>("SpondylolisthesisLocation")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int?>("ThoracicSpineCobbAngle")
                        .HasColumnType("integer");

                    b.Property<decimal>("ThoracicSpineLocation")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("ThoracicSpinePathologyType")
                        .HasColumnType("smallint");

                    b.Property<int>("ThoracicSpineScoliosisType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationPageId");

                    b.ToTable("ConfigurationFindings");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.ConfigurationPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ConfigurationPages");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.DiscFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AnderssonFractureType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("AnteriorImageFileId")
                        .HasColumnType("uuid");

                    b.Property<string>("AnteriorPictureNumber")
                        .HasColumnType("text");

                    b.Property<string>("AnteriorSerialNumber")
                        .HasColumnType("text");

                    b.Property<byte>("AtlantoOccipitaleDistanceType")
                        .HasColumnType("smallint");

                    b.Property<byte>("BulgingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CraniocaudalesLevelType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DiameterMigrationSequester")
                        .HasColumnType("integer");

                    b.Property<byte>("DifferentialDiagnosisType1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosisType2")
                        .HasColumnType("smallint");

                    b.Property<int>("DiscLocation")
                        .HasColumnType("integer");

                    b.Property<Guid?>("DiscPageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DiscitisImageFileId")
                        .HasColumnType("uuid");

                    b.Property<string>("DiscitisPictureNumber")
                        .HasColumnType("text");

                    b.Property<string>("DiscitisSerialNumber")
                        .HasColumnType("text");

                    b.Property<byte>("EntheitisType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ExpansionInZDimensionInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("ExpansionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingDetailType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAccompanyingFacetJointArthrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAccompanyingFacetJointArthrosisLocalizationLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAccompanyingFacetJointArthrosisLocalizationRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAccompanyingOsteochondrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActiveDiscitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnderssonFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnderssonLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnkylosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnteriorContrastEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnteriorLongitudinalLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnteriorSTIR")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnteriorT1w")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArthritis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAtlantBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAtlantErosions")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAtlantJointEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAtlantSynovialProliferation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAtlantSynovialitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBulging")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContrastEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContrastEnhancementOfTheDisc")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCraniocaudalesLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDensErosion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiameterMigrationSequester")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiscitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEntheitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpidural")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpiduralContrastEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpiduralInflammationOrAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsErosionOfAnteriorVertebraRomanusLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsErosions")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExpansionInZDimension")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFacetJointArthrosisLocalizationLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFacetJointArthrosisLocalizationRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForaminalStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypertrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncreasedSizeOfTheDisc")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraspinal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIrregularThickeningOfTheCorticalBone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsJointEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLigamentOssification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiggFlava")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiggInterspinosa")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiggSupraspinosa")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMarginalisContrastEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMarginalisSTIR")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMarginalisT1w")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMultisegmAnkylosing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNarrowing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNerveRootLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNerveRootRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteophyteFormation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParasyndesmophyte")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParavertebralInflammatoryResponse")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorContrastEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorLongitudinalLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorSTIR")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorT1w")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRuptureOfAnteriorLongitudinalLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRuptureOfDiscusIntervertebralis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRuptureOfPosteriorLongitudinalLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSTIRHypointense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSecondary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpondylitisAnterior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpondylitisMarginalis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpondylitisPosterior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStenosisLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStenosisRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSyndesmophyterose")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovialCyst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovialCystLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovialCystRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovialitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT1wHyperintensity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2SignalReductionOfTheIntervertebralDisc")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wHyperintensityOfTheDisc")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVertebralBodySquaring")
                        .HasColumnType("boolean");

                    b.Property<int?>("LargestDiameterEpidural")
                        .HasColumnType("integer");

                    b.Property<int?>("LargestDiameterIntraspinal")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MarginalisImageFileId")
                        .HasColumnType("uuid");

                    b.Property<string>("MarginalisPictureNumber")
                        .HasColumnType("text");

                    b.Property<string>("MarginalisSerialNumber")
                        .HasColumnType("text");

                    b.Property<int?>("MaxDiameter")
                        .HasColumnType("integer");

                    b.Property<byte>("ModicClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("NerveRootAffectionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathologyType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("PeriostitisImageFileId")
                        .HasColumnType("uuid");

                    b.Property<string>("PeriostitisPictureNumber")
                        .HasColumnType("text");

                    b.Property<string>("PeriostitisSerialNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("PosteriorImageFileId")
                        .HasColumnType("uuid");

                    b.Property<string>("PosteriorPictureNumber")
                        .HasColumnType("text");

                    b.Property<string>("PosteriorSerialNumber")
                        .HasColumnType("text");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpinalCanalStenosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpineAxialLocation")
                        .HasColumnType("smallint");

                    b.Property<decimal>("SpineLocation")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("SpondylitisNumberType")
                        .HasColumnType("smallint");

                    b.Property<byte>("StenosisType")
                        .HasColumnType("smallint");

                    b.Property<int?>("WidthOfTheSpinalCanalInMm")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnteriorImageFileId");

                    b.HasIndex("DiscPageId");

                    b.HasIndex("DiscitisImageFileId");

                    b.HasIndex("MarginalisImageFileId");

                    b.HasIndex("PeriostitisImageFileId");

                    b.HasIndex("PosteriorImageFileId");

                    b.ToTable("DiscFindings");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.DiscPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("DiscPages");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.Intervention", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnamnesisPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("DetailInterventionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("InterventionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<decimal>("SpineLocation")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesisPageId");

                    b.ToTable("Interventions");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.LocalizationPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("ScanAreaType")
                        .HasColumnType("smallint");

                    b.Property<decimal>("SpineLocation")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("LocalizationPages");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.SacroiliacJointFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis02")
                        .HasColumnType("smallint");

                    b.Property<byte>("EntheitisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("IDescribeDifferentialDiagnosis01")
                        .HasColumnType("smallint");

                    b.Property<byte>("IKnowDifferentialDiagnosis01")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnkylosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneBridges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrow")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCmEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnthesitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsErosions")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatDeposition")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsJointEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsJointSpaceWidening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteophytes")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSPARCCScore")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSecondary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSurfaceNarrowing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVacuumPhenomenon")
                        .HasColumnType("boolean");

                    b.Property<byte>("JointSurfaceSubType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaximumExpansion")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PelvisLocation")
                        .HasColumnType("smallint");

                    b.Property<int?>("SPARCCScore")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SacroiliacJointPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SclerosisType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("Score1Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Score2Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Score3Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Score4Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Score5Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Score6Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SacroiliacJointPageId");

                    b.HasIndex("Score1Id");

                    b.HasIndex("Score2Id");

                    b.HasIndex("Score3Id");

                    b.HasIndex("Score4Id");

                    b.HasIndex("Score5Id");

                    b.HasIndex("Score6Id");

                    b.ToTable("SacroiliacJointFindings");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.SacroiliacJointFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("EntheitisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("IKnowDifferentialDiagnosis01")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnkylosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneBridges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrow")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCmEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnthesitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsErosions")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatDeposition")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsJointEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsJointSpaceWidening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteophytes")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSurfaceNarrowing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVacuumPhenomenon")
                        .HasColumnType("boolean");

                    b.Property<byte>("JointSurfaceSubType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("SclerosisType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("SacroiliacJointFindingPresets");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.SacroiliacJointPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SacroiliacJointPages");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.Score", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsManifestationLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsManifestationRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSTIRLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSTIRRight")
                        .HasColumnType("boolean");

                    b.Property<byte>("ScoreLocation")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.Sequence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Is3D")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParallelImaging")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPostContrast")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSaturatedFat")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OrientationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SequenceType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("WeightingType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("Sequences");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.SoftTissuesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AneurysmMaximumDiameter")
                        .HasColumnType("integer");

                    b.Property<byte>("ArteriopathyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("BonyAvulsionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CMEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CharacterizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationMunichConsensusType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis2")
                        .HasColumnType("smallint");

                    b.Property<int?>("ExpansionInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HematomaCharacterizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAortocaval")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApophysitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBones")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervical")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervicalLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervicalRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCommunicationWithIntraduralSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiameterOfRupture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsErectorSpinaeMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExtensionOsseousNeuralForamen")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFascialRupture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFattyDegeneration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHematoma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHourglassShape")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypointensAfterFatSaturation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIliocostalisMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInterfascial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntermuscular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntramuscularly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIsointenseToCerebrospinalFluid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLevatorScapulaeMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLongissimusCapitisMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLongissimusMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMirrorFormation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMultifidusMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscleAtrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscleHernia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscleHypertrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscleLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNerveRoot")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsseousAvulsion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParaaortal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParailiacal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParailiacalLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParailiacalRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPreSacral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPreSacralLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPreSacralRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPsoasMajorMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsQuadratusLumborumMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRetraction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScalloping")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSecondary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSemispinalisCapitisMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSemispinalisColliMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpindleShaped")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpleniusCapitisMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSurroundingInflammatoryReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTargetSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickeningOfTheNerve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrapeziusMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUreterLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUreterRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWavyAppearanceOfTheFibers")
                        .HasColumnType("boolean");

                    b.Property<byte>("LocalizationWithinTheMuscleType")
                        .HasColumnType("smallint");

                    b.Property<int?>("LymphadenopathyInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxCraniocaudalDiameter")
                        .HasColumnType("integer");

                    b.Property<byte>("MuscleAtrophyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("NeurofibromatosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathologyType")
                        .HasColumnType("smallint");

                    b.Property<int?>("RetractionInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("SignalT1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT2w")
                        .HasColumnType("smallint");

                    b.Property<int?>("SizeDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SoftTissuesPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SpineAxialLocation")
                        .HasColumnType("smallint");

                    b.Property<decimal>("SpineLocation1")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("SpineLocation2")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("SpineLocationBones")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("SpineLocationDisks1")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("SpineLocationDisks2")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("SpineLocationDisks3")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("VesselsSide")
                        .HasColumnType("smallint");

                    b.Property<byte>("VesselsUretersType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("SoftTissuesPageId");

                    b.ToTable("SoftTissuesFindings");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.SoftTissuesFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HematomaCharacterizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCommunicationWithIntraduralSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHourglassShape")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypointensAfterFatSaturation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIsointenseToCerebrospinalFluid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMirrorFormation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpindleShaped")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSurroundingInflammatoryReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTargetSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickeningOfTheNerve")
                        .HasColumnType("boolean");

                    b.Property<byte>("NeurofibromatosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT2w")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("SoftTissuesFindingPresets");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.SoftTissuesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SoftTissuesPages");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.SpinalCanalFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AberrantCourseType")
                        .HasColumnType("smallint");

                    b.Property<byte>("AdditionalExtensionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CharacterizationOpenType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CharacterizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationDysraphyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationSubcutaneousMassType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DetailsClosedDysraphismType")
                        .HasColumnType("smallint");

                    b.Property<int?>("Diameter")
                        .HasColumnType("integer");

                    b.Property<byte>("DifferentialDiagnosesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis01")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis02")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis03")
                        .HasColumnType("smallint");

                    b.Property<int?>("ExpansionInCcDimension")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpansionProtrusionCcDimension")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAberrantCourse")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnterior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnteriorRadix")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArachnoidDiverticula")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCaudaEquina")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCaudalPositionOfTheMedullaryCone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCentralCavityFormation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCharacterizationIIIHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsClottedNerveRoots")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompression")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCystSyrinx")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeformationOfTheDuralSac")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDisplacement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmptyDuralSac")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpidural")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpiduralReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExtendedNeuralForamen")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatIsointens")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFlowVoids")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypointenseAfterFatSaturation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraAndExtradural")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntramedullaryFocal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeptomeningealSpread")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiquorisointense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMedullaryCone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMyelopathy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNoContrastEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNumerousVessels")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerineuralCyst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosterior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorRadix")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRootDisplacement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSTIROrTIRMHyperintense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScaloppingOrThinnedPedicle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSecondary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeptationInTheSubarachnoidSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSerpiginousVascularStructures")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubarachnoid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSwelling")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT1wFatSaturationHypointense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT1wHeterogeneousSignalIntensity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT1wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wHypointenseRim")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickenedFilumTerminale")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsuringOrRemodellingSpinalCanal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWideningEpiduralFatTissueMoreThan7Mm")
                        .HasColumnType("boolean");

                    b.Property<byte>("LocalizationInTheSpinalCanalType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationInTheSpinalCordType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LongitudinalExpansionInMyelon")
                        .HasColumnType("smallint");

                    b.Property<byte>("MalformationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PialType")
                        .HasColumnType("smallint");

                    b.Property<byte>("QuantityTransverseType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SizeAxial")
                        .HasColumnType("integer");

                    b.Property<int?>("SizeCraniocaudal")
                        .HasColumnType("integer");

                    b.Property<byte>("SpinalCanalDifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpinalCanalLocation")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("SpinalCanalPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SpinalCanalStenosisDetailType")
                        .HasColumnType("smallint");

                    b.Property<decimal>("SpineLocation")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("SpineLocationBones")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("SpineLocationDisks")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("SpineLocationNonTarget")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("T1wSignal")
                        .HasColumnType("smallint");

                    b.Property<byte>("T2wSignal")
                        .HasColumnType("smallint");

                    b.Property<int?>("WidthOfTheSpinalCanal")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SpinalCanalPageId");

                    b.ToTable("SpinalCanalFindings");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.SpinalCanalFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AberrantCourseType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAberrantCourse")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnteriorRadix")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCentralCavityFormation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsClottedNerveRoots")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompression")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCystSyrinx")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeformationOfTheDuralSac")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDisplacement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmptyDuralSac")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpidural")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpiduralReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExtendedNeuralForamen")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatIsointens")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFlowVoids")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypointenseAfterFatSaturation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraAndExtradural")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntramedullaryFocal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeptomeningealSpread")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiquorisointense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNumerousVessels")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSTIROrTIRMHyperintense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScaloppingOrThinnedPedicle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeptationInTheSubarachnoidSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSerpiginousVascularStructures")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubarachnoid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSwelling")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT1wHeterogeneousSignalIntensity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wHypointenseRim")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsuringOrRemodellingSpinalCanal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWideningEpiduralFatTissueMoreThan7Mm")
                        .HasColumnType("boolean");

                    b.Property<byte>("LocalizationInTheSpinalCordType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PialType")
                        .HasColumnType("smallint");

                    b.Property<byte>("QuantityTransverseType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpinalCanalDifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpinalCanalLocation")
                        .HasColumnType("smallint");

                    b.Property<byte>("T1wSignal")
                        .HasColumnType("smallint");

                    b.Property<byte>("T2wSignal")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("SpinalCanalFindingPresets");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.SpinalCanalPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SpinalCanalPages");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.SummaryPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ConsultationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("InterventionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBiopsy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFacetJointInfiltrationLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFacetJointInfiltrationRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInterventional")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPETCT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRegistrationVia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSIJInfiltrationLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSIJInfiltrationRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSPECTCT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScintigraphy")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SummaryPages");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.TechnologyPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BarcodeCMCharge")
                        .HasColumnType("text");

                    b.Property<byte>("CMReinforcedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastMediumType")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("ContrastQuantity")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCMSideEffect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCortisoneIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH1BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH2BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetalArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMotion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotFurtherSpecified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsO2Administration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOther")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPulsationOrBreathing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneousEpinephrine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSusceptibilityArtifacts")
                        .HasColumnType("boolean");

                    b.Property<byte>("MagneticFieldStrengthType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SequencesType")
                        .HasColumnType("smallint");

                    b.Property<string>("SetName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("TechnologyPages");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Technology.Domain.Models.CMSideEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMSideEffectType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DurationAdverseReactionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCompletelyDeclining")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeriousAdverseEvent")
                        .HasColumnType("boolean");

                    b.Property<int?>("MinAfterCMinjection")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("CMSideEffects");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("Pages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("ReportResults")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.HasOne("RadioReport.SpineMRT.Domain.Models.LocalizationPage", null)
                        .WithOne("PatientInformation")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", null)
                        .WithOne("Session")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", "ReportSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.AnamnesisPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.BonesFinding", b =>
                {
                    b.HasOne("RadioReport.SpineMRT.Domain.Models.BonesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("BonesPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.BonesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.ConfigurationFinding", b =>
                {
                    b.HasOne("RadioReport.SpineMRT.Domain.Models.ConfigurationPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("ConfigurationPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.ConfigurationPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.DiscFinding", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "AnteriorImageFile")
                        .WithMany()
                        .HasForeignKey("AnteriorImageFileId");

                    b.HasOne("RadioReport.SpineMRT.Domain.Models.DiscPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("DiscPageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "DiscitisImageFile")
                        .WithMany()
                        .HasForeignKey("DiscitisImageFileId");

                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "MarginalisImageFile")
                        .WithMany()
                        .HasForeignKey("MarginalisImageFileId");

                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "PeriostitisImageFile")
                        .WithMany()
                        .HasForeignKey("PeriostitisImageFileId");

                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "PosteriorImageFile")
                        .WithMany()
                        .HasForeignKey("PosteriorImageFileId");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.DiscPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.Intervention", b =>
                {
                    b.HasOne("RadioReport.SpineMRT.Domain.Models.AnamnesisPage", null)
                        .WithMany("Interventions")
                        .HasForeignKey("AnamnesisPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.LocalizationPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.SacroiliacJointFinding", b =>
                {
                    b.HasOne("RadioReport.SpineMRT.Domain.Models.SacroiliacJointPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("SacroiliacJointPageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RadioReport.SpineMRT.Domain.Models.Score", "Score1")
                        .WithMany()
                        .HasForeignKey("Score1Id");

                    b.HasOne("RadioReport.SpineMRT.Domain.Models.Score", "Score2")
                        .WithMany()
                        .HasForeignKey("Score2Id");

                    b.HasOne("RadioReport.SpineMRT.Domain.Models.Score", "Score3")
                        .WithMany()
                        .HasForeignKey("Score3Id");

                    b.HasOne("RadioReport.SpineMRT.Domain.Models.Score", "Score4")
                        .WithMany()
                        .HasForeignKey("Score4Id");

                    b.HasOne("RadioReport.SpineMRT.Domain.Models.Score", "Score5")
                        .WithMany()
                        .HasForeignKey("Score5Id");

                    b.HasOne("RadioReport.SpineMRT.Domain.Models.Score", "Score6")
                        .WithMany()
                        .HasForeignKey("Score6Id");
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.SacroiliacJointPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.Sequence", b =>
                {
                    b.HasOne("RadioReport.SpineMRT.Domain.Models.TechnologyPage", null)
                        .WithMany("Sequences")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.SoftTissuesFinding", b =>
                {
                    b.HasOne("RadioReport.SpineMRT.Domain.Models.SoftTissuesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("SoftTissuesPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.SoftTissuesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.SpinalCanalFinding", b =>
                {
                    b.HasOne("RadioReport.SpineMRT.Domain.Models.SpinalCanalPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("SpinalCanalPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.SpinalCanalPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.SummaryPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Domain.Models.TechnologyPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.SpineMRT.Technology.Domain.Models.CMSideEffect", b =>
                {
                    b.HasOne("RadioReport.SpineMRT.Domain.Models.TechnologyPage", null)
                        .WithMany("CMSideEffects")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
