// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RadioReport.CardioMRT.Repo;

namespace RadioReport.CardioMRT.Repo.Migrations
{
    [DbContext(typeof(CardioMRTDbContext))]
    partial class CardioMRTDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.Anamnesis.IndicationFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnamnesisPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("IndicationFindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsECG")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEchocardiography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPET")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSPECT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<byte>("KnownType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("StatusType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesisPageId");

                    b.ToTable("IndicationFindings");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.Anamnesis.InterventionOrPreOpsFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnamnesisPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("AorticValveType")
                        .HasColumnType("smallint");

                    b.Property<byte>("InterventionOrPreOpsFindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAorticValve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMitralValve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPulmonaryArteryBandingPAB")
                        .HasColumnType("boolean");

                    b.Property<byte>("MitralValveType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesisPageId");

                    b.ToTable("InterventionOrPreOpsFindings");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.AnamnesisPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("EGFRInMlMin")
                        .HasColumnType("integer");

                    b.Property<byte?>("EscScore")
                        .HasColumnType("smallint");

                    b.Property<byte>("EscScoreType")
                        .HasColumnType("smallint");

                    b.Property<int?>("HDLCholesterolAmount")
                        .HasColumnType("integer");

                    b.Property<byte?>("HematocritInPercent")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArterialHypertension")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCurrentAntihypertensiveTherapy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiabetesMellitus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEscScore")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLaboratoryParameters")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRIPreExamination")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNicotineAbuse")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPositiveFamilyHistory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProcamScore")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRenalInsufficiency")
                        .HasColumnType("boolean");

                    b.Property<int?>("LDLCholesterolAmount")
                        .HasColumnType("integer");

                    b.Property<byte?>("MonthOfMRIPreExamination")
                        .HasColumnType("smallint");

                    b.Property<float?>("ProcamScore")
                        .HasColumnType("real");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<int?>("SystolicbloodpressureInMmHg")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalCholesterolAmount")
                        .HasColumnType("integer");

                    b.Property<int?>("TriglyceridesAmount")
                        .HasColumnType("integer");

                    b.Property<byte>("UnitType")
                        .HasColumnType("smallint");

                    b.Property<int?>("YearOfMRIPreExamination")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("AnamnesisPages");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.AreaOfExaminationPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpecificHeartMRT")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("AreaOfExaminationPages");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.CMSideEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMSideEffectType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DurationAdverseReactionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCompletelyDeclining")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeriousAdverseEvent")
                        .HasColumnType("boolean");

                    b.Property<int?>("MinAfterCMinjection")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("CMSideEffects");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.CongenitalHeartDisease", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AVConnectionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ArtialSeptalDefectType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("FlapsPageId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAortopulmonaryCollateral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAtrialSeptalDefect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAtrioventricularSeptalDefect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCardiomegaly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCoronaryArteryAnomalies")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDilatedPulmonaryArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypoplasticAtreticLVOT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfundibularPulmonaryStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLALVIncrease")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMembranous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMitralValveDysplasiaAtresia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOverridingAorta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPersistentDuctusArteriosus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPersistentForamenOvale")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPersistentLeftSuperiorVena")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrepulmonary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPulmonaryAtresia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPulmonaryValveStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRARVIncrease")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRIVALADOfTheRightCoronarySinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRVOTObstruction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightSidedAorticArch")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightVentricularHypertrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTranspositionOfTheGreatArteries")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTricuspidInsufficiency")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTricuspidalAtresia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVentricleSeptalDefect")
                        .HasColumnType("boolean");

                    b.Property<byte>("MainVentricleType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OneChamberHeartSingleType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SinusVenosusType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TranspositionOfTheGreatArteriesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("VentricleSeptalDefectType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FlapsPageId");

                    b.ToTable("CongenitalHeartDiseases");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.FindingsVentriclesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AnteroLateralInMm")
                        .HasColumnType("integer");

                    b.Property<float?>("CircumferentialInPercent")
                        .HasColumnType("real");

                    b.Property<int?>("Expansion2ndAxisInMm")
                        .HasColumnType("integer");

                    b.Property<float?>("Global3DStrainInPercent")
                        .HasColumnType("real");

                    b.Property<int?>("HeartRate")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<int?>("InferiorInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("InferoLateralInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("InterventricularSeptumThicknessInMm")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftHeartFailure")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightHeartFailure")
                        .HasColumnType("boolean");

                    b.Property<int?>("LAIn4ChamberViewInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("LVEDVAndBSAInMlM2")
                        .HasColumnType("integer");

                    b.Property<int?>("LVEDVInMl")
                        .HasColumnType("integer");

                    b.Property<int?>("LVEFInPercent")
                        .HasColumnType("integer");

                    b.Property<int?>("LVESVAndBSAInMlM2")
                        .HasColumnType("integer");

                    b.Property<int?>("LVESVInMl")
                        .HasColumnType("integer");

                    b.Property<int?>("LVEndDiastolicDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("LVOutputInLInMin")
                        .HasColumnType("integer");

                    b.Property<int?>("LVStrokeVolumeInMl")
                        .HasColumnType("integer");

                    b.Property<int?>("LateralInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("LeftEDTimeInMs")
                        .HasColumnType("integer");

                    b.Property<int?>("LeftESTimeInMs")
                        .HasColumnType("integer");

                    b.Property<int?>("LeftMyocardialMassAndBSAInGM2")
                        .HasColumnType("integer");

                    b.Property<int?>("LeftMyocardialMassInG")
                        .HasColumnType("integer");

                    b.Property<float?>("LongitudinalInPercent")
                        .HasColumnType("real");

                    b.Property<int?>("LvsvAndBSAInMlM2")
                        .HasColumnType("integer");

                    b.Property<int?>("MedioLateralInMm")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MyocardialStrainImageId")
                        .HasColumnType("uuid");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<int?>("RAIn4ChamberViewInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("RVEDVAndBSAInMlM2")
                        .HasColumnType("integer");

                    b.Property<int?>("RVEDVInMl")
                        .HasColumnType("integer");

                    b.Property<int?>("RVEFInPercent")
                        .HasColumnType("integer");

                    b.Property<int?>("RVESVAndBSAInMlM2")
                        .HasColumnType("integer");

                    b.Property<int?>("RVESVInMl")
                        .HasColumnType("integer");

                    b.Property<int?>("RVEndDiastolicDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("RVOutputInLInMin")
                        .HasColumnType("integer");

                    b.Property<int?>("RVStrokeVolumeInMl")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<int?>("RightEDTimeInMs")
                        .HasColumnType("integer");

                    b.Property<int?>("RightESTimeInMs")
                        .HasColumnType("integer");

                    b.Property<int?>("RightMyocardialMassAndBSAInGM2")
                        .HasColumnType("integer");

                    b.Property<int?>("RightMyocardialMassInG")
                        .HasColumnType("integer");

                    b.Property<int?>("RvsvAndBSAInMlM2")
                        .HasColumnType("integer");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImageFileId");

                    b.HasIndex("MyocardialStrainImageId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("FindingsVentriclesPages");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.FlapsPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AortaAscendensMeasuresId")
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAortaAscendens")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLVOTObstruction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMitralValve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPulmonaryArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRVOTObstruction")
                        .HasColumnType("boolean");

                    b.Property<byte>("LVOTObstructionType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("MitralValveMeasuresId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PulmonaryArteryMeasuresId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AortaAscendensMeasuresId");

                    b.HasIndex("MitralValveMeasuresId");

                    b.HasIndex("PulmonaryArteryMeasuresId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("FlapsPages");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.HeartValve", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ClassificationPhenotype")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("FlapsPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("InsufficiencyType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInsufficiency")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsQuantification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSAMPhenomenon")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVariant")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<int?>("QuantificationInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("RegurgitationVolumeTypeInMl")
                        .HasColumnType("smallint");

                    b.Property<byte>("RegurgitationVolumeTypeInPercent")
                        .HasColumnType("smallint");

                    b.Property<byte>("StenosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("VariantType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FlapsPageId");

                    b.ToTable("HeartValves");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.KineticDisorderLocalizer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AkinesiaSections")
                        .HasColumnType("integer");

                    b.Property<int>("DyskinesiaSections")
                        .HasColumnType("integer");

                    b.Property<int>("HypokinesiaSections")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("KineticDisorderLocalizer");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.LGESegmentalLocalizer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("LGELocalizerType")
                        .HasColumnType("smallint");

                    b.Property<int>("MesocardialSections")
                        .HasColumnType("integer");

                    b.Property<int>("PointShapedSections")
                        .HasColumnType("integer");

                    b.Property<int>("SubendocardialSections")
                        .HasColumnType("integer");

                    b.Property<int>("SubepicardialSections")
                        .HasColumnType("integer");

                    b.Property<int>("TrasmuralSections")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("LGESegmentalLocalizer");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.LeftVentriclePage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("DistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FunctionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HypointensMyokType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAneurysm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApicalBallooning")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFunction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsKineticDisorder")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLGE")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMidVentricularWallMovementDisorder")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerfusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT1Gd")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2Asterisk")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("KineticDisorderLocalizerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LGEImageFileId")
                        .HasColumnType("uuid");

                    b.Property<string>("LGEPictureNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("LGESegmentalLocalizerId")
                        .HasColumnType("uuid");

                    b.Property<string>("LGESerialNumber")
                        .HasColumnType("text");

                    b.Property<byte>("LGEType")
                        .HasColumnType("smallint");

                    b.Property<int>("MyocardialEdemaLocalizer")
                        .HasColumnType("integer");

                    b.Property<byte>("MyocardialEdemaType")
                        .HasColumnType("smallint");

                    b.Property<byte>("NonSegmentalType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("PerfusionDefectLocalizerId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PerfusionType")
                        .HasColumnType("smallint");

                    b.Property<int>("ReducedMyocardialSignalT1wT2wLocalizer")
                        .HasColumnType("integer");

                    b.Property<int?>("ReferenceValueOfMyocardiumInMs")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("T1GdImageFileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("T1GdLocalizerId")
                        .HasColumnType("uuid");

                    b.Property<string>("T1GdPictureNumber")
                        .HasColumnType("text");

                    b.Property<string>("T1GdSerialNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("T1ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("T1LocalizerId")
                        .HasColumnType("uuid");

                    b.Property<string>("T1PictureNumber")
                        .HasColumnType("text");

                    b.Property<string>("T1SerialNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("T2ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("T2LocalizerId")
                        .HasColumnType("uuid");

                    b.Property<string>("T2PictureNumber")
                        .HasColumnType("text");

                    b.Property<string>("T2SerialNumber")
                        .HasColumnType("text");

                    b.Property<int?>("ValueMyocardiumInMs")
                        .HasColumnType("integer");

                    b.Property<int>("WallThickeningLocalizer")
                        .HasColumnType("integer");

                    b.Property<byte>("WallThickeningType")
                        .HasColumnType("smallint");

                    b.Property<int>("WallThinningLocalizer")
                        .HasColumnType("integer");

                    b.Property<byte>("WallThinningType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("KineticDisorderLocalizerId");

                    b.HasIndex("LGEImageFileId");

                    b.HasIndex("LGESegmentalLocalizerId");

                    b.HasIndex("PerfusionDefectLocalizerId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.HasIndex("T1GdImageFileId");

                    b.HasIndex("T1GdLocalizerId");

                    b.HasIndex("T1ImageFileId");

                    b.HasIndex("T1LocalizerId");

                    b.HasIndex("T2ImageFileId");

                    b.HasIndex("T2LocalizerId");

                    b.ToTable("LeftVentriclePages");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.Measures", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FlowCurveImageId")
                        .HasColumnType("uuid");

                    b.Property<int?>("MaxFlowInMlSec")
                        .HasColumnType("integer");

                    b.Property<int?>("MinFlowInMlSec")
                        .HasColumnType("integer");

                    b.Property<int?>("NegativeFlowInMl")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PCMeasurementImageId")
                        .HasColumnType("uuid");

                    b.Property<int?>("PositiveFlowInMl")
                        .HasColumnType("integer");

                    b.Property<int?>("RegurgitantFractionInPercent")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FlowCurveImageId");

                    b.HasIndex("PCMeasurementImageId");

                    b.ToTable("Measures");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.PerfusionDefectLocalizer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("InPeaceAndUnderStressSections")
                        .HasColumnType("integer");

                    b.Property<int>("InPeaceSections")
                        .HasColumnType("integer");

                    b.Property<int>("UnderStressSections")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PerfusionDefectLocalizer");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.PericardiumVesselsFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AortaMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("AtelePulmNoduleDiffDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("AtypicalType")
                        .HasColumnType("smallint");

                    b.Property<byte>("BenignType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CMEnhancQuantiType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ConsolidationDiffDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("CoronaryAnomalyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DetailsOriginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis01")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis02")
                        .HasColumnType("smallint");

                    b.Property<byte>("DiffuseLiverLesionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DistalLAD")
                        .HasColumnType("smallint");

                    b.Property<byte>("DistalRCX")
                        .HasColumnType("smallint");

                    b.Property<byte>("DistalType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DistributionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("EnlargedAbdLymphNodesMaxDiameterSADInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("EnlargedAbdLymphNodesType")
                        .HasColumnType("smallint");

                    b.Property<int?>("EnlargedLymphNodeShortAxisDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("EnlargedLymphNodesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ExtensionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FocalClavicleType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FocalLesionOfKidneyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FocalLiverLesionsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GradingMaxType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogenityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("InferiorVariantsType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAnteriorMediastinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAorticArch")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAorticRoot")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAscendingAorta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAxilary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAxilaryLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAxilaryRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCentral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCerviSupraParast")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervicalLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervicalRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCholecystolithiasis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDescendingAorta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffuseLiverLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnlargedAbdLymphNodes")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnlargedLymphNodes")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExtension")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFocalLesionOfKidney")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFocalLesionOfKidneyBenignCyst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFocalLesionOfKidneyLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFocalLesionOfKidneyRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFocalLiverLesions")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGrease")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHiatalHernia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHilaryLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHilaryLobarSegmental")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHilaryRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHydronephrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHydronephrosisLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHydronephrosisRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInternalChangesCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLAD")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLMA")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftSegmental")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLesionsMoreOneOfFocalLesionOfKidney")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLesionsMoreOneOfFocalLiver")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizationLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizationRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLowerMediastinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMassAdrenalGland")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMassAdrenalGlandLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMassAdrenalGlandRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMediastinal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMediastinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMiddleMediastinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecroses")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNode")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPericardialEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPericarditisCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPericarditisConstrictiva")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPericardium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPleura")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorMediastinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRCA")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRCX")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRetrosternalParts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightSegmental")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSplenomegaly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStruma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThrombus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpperMediastinum")
                        .HasColumnType("boolean");

                    b.Property<byte>("LocalizationLeftType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationRightType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LungLocalizer")
                        .HasColumnType("smallint");

                    b.Property<byte>("LungPathologyType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MassMaximumDiameterAxialInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaximumDiameterAxialInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaximumDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("MediastinalVesselsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("NoHomogenityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OssLesionBenignType")
                        .HasColumnType("smallint");

                    b.Property<byte>("OssLesionLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PartialAnomalousType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PeculiarityType")
                        .HasColumnType("smallint");

                    b.Property<int?>("PericardialEffusionMaxWidth")
                        .HasColumnType("integer");

                    b.Property<byte>("PericardiumVesselsDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PericardiumVesselsMarginType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("PericardiumVesselsPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PulmonaryVariantsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("RCALeftOrLMARightCoronalSinus")
                        .HasColumnType("smallint");

                    b.Property<byte>("RibsLocalizationDetails")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT2w")
                        .HasColumnType("smallint");

                    b.Property<byte>("StenosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SuperiorVariantsType")
                        .HasColumnType("smallint");

                    b.Property<int?>("UnknownMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("UnknownType")
                        .HasColumnType("smallint");

                    b.Property<byte>("UpperAbdomenSide")
                        .HasColumnType("smallint");

                    b.Property<byte>("VenaCavaType")
                        .HasColumnType("smallint");

                    b.Property<byte>("VertebralBodyLocalizationDetails")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("PericardiumVesselsPageId");

                    b.ToTable("PericardiumVesselsFindings");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.PericardiumVesselsPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("PericardiumVesselsPages");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.RelaxingTimeLocalizer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float?>("ECV")
                        .HasColumnType("real");

                    b.Property<bool>("IsLVTotal")
                        .HasColumnType("boolean");

                    b.Property<int>("Localizer")
                        .HasColumnType("integer");

                    b.Property<int>("MeasureType")
                        .HasColumnType("integer");

                    b.Property<byte>("QualitativeType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ReferenceValueMyocardiumInMs")
                        .HasColumnType("integer");

                    b.Property<int>("SeverityType")
                        .HasColumnType("integer");

                    b.Property<int?>("ValueBloodInMs")
                        .HasColumnType("integer");

                    b.Property<int?>("ValueMyocardiumInMs")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("RelaxingTimeLocalizer");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.RightVentriclePage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FunctionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatSignalInMyocardium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMicroAneurysm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMyocardialEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOverOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWallThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWallThinning")
                        .HasColumnType("boolean");

                    b.Property<byte>("LGEType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MyocardialEdemaType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("WallThickeningType")
                        .HasColumnType("smallint");

                    b.Property<byte>("WallThinningType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("RightVentriclePages");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.Sequence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ExaminationTechniqueType")
                        .HasColumnType("smallint");

                    b.Property<bool>("Is3D")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsECGTriggering")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParallelImaging")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPostContrast")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSaturatedFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubtraction")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OrientationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SequenceType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("WeightingType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("Sequences");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.SpatialRequirementFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ContrastEnhancementIntensityPerfusionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementPerfusionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQualityPerfusionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DiameterMaxAxialInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("DifferentialDiagnosis01")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis2")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis3")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GdEnhancementEGEType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GdEnhancementIntensityEGEType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GdEnhancementIntensityLGEType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GdEnhancementLGEType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GdEnhancementQualityEGEType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GdEnhancementQualityLGEType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBleeding")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHaemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHyperIntensitySTIR")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationThroughDifferentTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLesionSame")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPericardialEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPleuralEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperimposedThrombus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsValveAssociated")
                        .HasColumnType("boolean");

                    b.Property<byte>("MainTumorLocalizer")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MobilityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("NonTargetLesionLocalizer")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<byte>("SignalT1wCharacteristics")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT2wCharacteristics")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("SpatialRequirementPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ImageFileId");

                    b.HasIndex("SpatialRequirementPageId");

                    b.ToTable("SpatialRequirementFindings");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.SpatialRequirementFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ContrastEnhancementIntensityPerfusionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementPerfusionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQualityPerfusionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis01")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GdEnhancementEGEType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GdEnhancementLGEType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GdEnhancementQualityEGEType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsBleeding")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHyperIntensitySTIR")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsValveAssociated")
                        .HasColumnType("boolean");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT1wCharacteristics")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT2wCharacteristics")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("SpatialRequirementFindingPresets");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.SpatialRequirementPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SpatialRequirementPages");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.SummaryPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("DifferentialDiagnosis01")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis02")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosisTo01")
                        .HasColumnType("smallint");

                    b.Property<byte>("FollowUpTime")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTAbdomen")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTAngiographyOfThePulmonaryArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTAngiographyThoracicAorta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTThorax")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCardailePETCT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContrastEnhanced")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContrastEnhancedAbdomen")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContrastEnhancedThorax")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCoronaryCTAngiography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDifferentialDiagnosis02")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDifferentialDiagnosisTo01")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEchocardiography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEvaluationARVCAccordingToTaskForceCriteria")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFollowupCardioMRT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRAbdomen")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRAngiographyThoracicAorta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMyocardialScintigraphyMyocardialSPEC")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStressCardiacMRI")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUnderStress")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SummaryPages");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.TechnologyPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BarcodeCMCharge")
                        .HasColumnType("text");

                    b.Property<byte>("CMReinforcedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastMediumType")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("ContrastQuantity")
                        .HasColumnType("numeric");

                    b.Property<int?>("DobutamineInfusionDose")
                        .HasColumnType("integer");

                    b.Property<byte>("FractionationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ImageQualityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCMSideEffect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCortisoneIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDarkRimArtifact")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH1BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH2BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetalArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMotion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotFurtherSpecified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsO2Administration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOther")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneousEpinephrine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSusceptibilityArtifacts")
                        .HasColumnType("boolean");

                    b.Property<byte>("MagneticFieldStrengthType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PharmacologicalStressType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SequencesType")
                        .HasColumnType("smallint");

                    b.Property<string>("SetName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("TechnologyPages");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PageNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("WasModified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("PageInfos");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessionNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Evaluation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExaminationType")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("FindingsDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FreeField")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("LicenseFractionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LicensingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("PatientAge")
                        .HasColumnType("smallint");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PresetCode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StudyInstanceUID")
                        .HasColumnType("text");

                    b.Property<byte>("TotalPageCount")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Approved")
                        .HasColumnType("text");

                    b.Property<string>("Discussion")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsICD10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferenceImage")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReportSummary")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportResults");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ReportSession");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ObjectName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ImageFiles");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<byte?>("Age")
                        .HasColumnType("smallint");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PatientInformation");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.FindingLocalizer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mapping")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FindingLocalizers");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("BuildVersion")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Paragraphs")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportTypeName", "VersionName")
                        .IsUnique();

                    b.ToTable("ReportSchemas");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ReportSchemaId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportSchemaId")
                        .IsUnique();

                    b.ToTable("ReportSchemaSessions");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.Anamnesis.IndicationFinding", b =>
                {
                    b.HasOne("RadioReport.CardioMRT.Domain.Models.AnamnesisPage", null)
                        .WithMany("IndicationFindings")
                        .HasForeignKey("AnamnesisPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.Anamnesis.InterventionOrPreOpsFinding", b =>
                {
                    b.HasOne("RadioReport.CardioMRT.Domain.Models.AnamnesisPage", null)
                        .WithMany("InterventionOrPreOpsFindings")
                        .HasForeignKey("AnamnesisPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.AnamnesisPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.AreaOfExaminationPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.CMSideEffect", b =>
                {
                    b.HasOne("RadioReport.CardioMRT.Domain.Models.TechnologyPage", null)
                        .WithMany("CMSideEffects")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.CongenitalHeartDisease", b =>
                {
                    b.HasOne("RadioReport.CardioMRT.Domain.Models.FlapsPage", null)
                        .WithMany("CongenitalHeartDiseases")
                        .HasForeignKey("FlapsPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.FindingsVentriclesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "UploadedImageFile")
                        .WithMany()
                        .HasForeignKey("ImageFileId");

                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "MyocardialStrainImage")
                        .WithMany()
                        .HasForeignKey("MyocardialStrainImageId");

                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.FlapsPage", b =>
                {
                    b.HasOne("RadioReport.CardioMRT.Domain.Models.Measures", "AortaAscendensMeasures")
                        .WithMany()
                        .HasForeignKey("AortaAscendensMeasuresId");

                    b.HasOne("RadioReport.CardioMRT.Domain.Models.Measures", "MitralValveMeasures")
                        .WithMany()
                        .HasForeignKey("MitralValveMeasuresId");

                    b.HasOne("RadioReport.CardioMRT.Domain.Models.Measures", "PulmonaryArteryMeasures")
                        .WithMany()
                        .HasForeignKey("PulmonaryArteryMeasuresId");

                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.HeartValve", b =>
                {
                    b.HasOne("RadioReport.CardioMRT.Domain.Models.FlapsPage", null)
                        .WithMany("HeartValves")
                        .HasForeignKey("FlapsPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.LeftVentriclePage", b =>
                {
                    b.HasOne("RadioReport.CardioMRT.Domain.Models.KineticDisorderLocalizer", "KineticDisorderLocalizer")
                        .WithMany()
                        .HasForeignKey("KineticDisorderLocalizerId");

                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "LGEImageFile")
                        .WithMany()
                        .HasForeignKey("LGEImageFileId");

                    b.HasOne("RadioReport.CardioMRT.Domain.Models.LGESegmentalLocalizer", "LGESegmentalLocalizer")
                        .WithMany()
                        .HasForeignKey("LGESegmentalLocalizerId");

                    b.HasOne("RadioReport.CardioMRT.Domain.Models.PerfusionDefectLocalizer", "PerfusionDefectLocalizer")
                        .WithMany()
                        .HasForeignKey("PerfusionDefectLocalizerId");

                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "T1GdImageFile")
                        .WithMany()
                        .HasForeignKey("T1GdImageFileId");

                    b.HasOne("RadioReport.CardioMRT.Domain.Models.RelaxingTimeLocalizer", "T1GdLocalizer")
                        .WithMany()
                        .HasForeignKey("T1GdLocalizerId");

                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "T1ImageFile")
                        .WithMany()
                        .HasForeignKey("T1ImageFileId");

                    b.HasOne("RadioReport.CardioMRT.Domain.Models.RelaxingTimeLocalizer", "T1Localizer")
                        .WithMany()
                        .HasForeignKey("T1LocalizerId");

                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "T2ImageFile")
                        .WithMany()
                        .HasForeignKey("T2ImageFileId");

                    b.HasOne("RadioReport.CardioMRT.Domain.Models.RelaxingTimeLocalizer", "T2Localizer")
                        .WithMany()
                        .HasForeignKey("T2LocalizerId");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.Measures", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "FlowCurveImage")
                        .WithMany()
                        .HasForeignKey("FlowCurveImageId");

                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "PCMeasurementImage")
                        .WithMany()
                        .HasForeignKey("PCMeasurementImageId");
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.PericardiumVesselsFinding", b =>
                {
                    b.HasOne("RadioReport.CardioMRT.Domain.Models.PericardiumVesselsPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("PericardiumVesselsPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.PericardiumVesselsPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.RightVentriclePage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.Sequence", b =>
                {
                    b.HasOne("RadioReport.CardioMRT.Domain.Models.TechnologyPage", null)
                        .WithMany("Sequences")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.SpatialRequirementFinding", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "UploadedImageFile")
                        .WithMany()
                        .HasForeignKey("ImageFileId");

                    b.HasOne("RadioReport.CardioMRT.Domain.Models.SpatialRequirementPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("SpatialRequirementPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.SpatialRequirementPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.SummaryPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.CardioMRT.Domain.Models.TechnologyPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("Pages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("ReportResults")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.HasOne("RadioReport.CardioMRT.Domain.Models.AreaOfExaminationPage", null)
                        .WithOne("PatientInformation")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", null)
                        .WithOne("Session")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", "ReportSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
