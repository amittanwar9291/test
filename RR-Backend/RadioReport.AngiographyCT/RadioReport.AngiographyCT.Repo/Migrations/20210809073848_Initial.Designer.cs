// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RadioReport.AngiographyCT.Repo;

namespace RadioReport.AngiographyCT.Repo.Migrations
{
    [DbContext(typeof(AngiographyCTDbContext))]
    [Migration("20210809073848_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.AbdomenFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AbdomenPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("AnatomicVariantsOrPathologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ArisesFromCeliacTrunkType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CharacterizationType")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("DegreeOfStenosisAccordingToNASCETInPercentage")
                        .HasColumnType("numeric");

                    b.Property<byte>("DetailsType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DiameterNormalPoststenoticSegmentInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("DiameterStenosisInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("DirectOriginFromTheAbdominalAortaType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FurtherVariantsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HepatomesentericTrunkType")
                        .HasColumnType("smallint");

                    b.Property<byte>("IncompleteHepatomesentericTrunkType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActiveBleeding")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnatomicVariants")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAneurysmaticChanges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAscendingColon")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAscites")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBifurcatedPreAndRetroarticLeftRenalVein")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCaudal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCecum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsClampingDamageWithAfferentArteryStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsClipArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCollateralFlowViaPancreaticoduodenalArcades")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCollaterals")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCorticalHemorrhages")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCranial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDecreasedPerfusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDecreasedPerfusionOfTheLiverPeriphery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDescendingColon")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDissection")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDuodenum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEccentricPartialThrombosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreeGas")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemodynamicallyRelevant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhagic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHepatomesentericTrunk")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIleum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInferiorMesenteryArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInvolvementOfTheVisceralArteries")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIschemicBowelWall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsJejunum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftColonicFlexure")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftHepaticArteryArisesFromLeftGastricArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLimitedContrastOfTheRenalParenchyma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMarginalCalcifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMultifocalChanges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMultipleRenalVeins")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsObstructionHepatovenousOutflow")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOrthotopicRenalVascularizarion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPearlLikeChanges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPersistentDottedHyperContrastEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPortalVeinThrombosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPortoportalCollaterals")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPortosystemicCollateralPathways")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrestenoticDilatation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProminentPeriportalCollaterals")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsQualityCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsQualitySoftPlaque")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRenalVeinThrombosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsResidualContrast")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRetroaortalCourseLeftRenalVein")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightColonicFlexure")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRiolanAnastomosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShortLengthStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSigmoidColon")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSignsOfPortalHypertension")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSplenicArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStenosisOrOcclusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubtleChanges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperiorMesenteryArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTandemStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThrombolization")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTransplantRenalArteryKinking")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTransplantRenalArteryStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTransplantRenalArteryStenosisAanular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTransplantRenalArteryTorsion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTransverseColon")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVenousInfarction")
                        .HasColumnType("boolean");

                    b.Property<int?>("LengthInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("LevelOfTheObstructionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxPortalVeinDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("MesentericVesselsDifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MesentericVesselsLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MinVesselDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OrganSizeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PearlLikeChangesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PortalVeinThrombosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("RenalArteryLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SeverityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("StatusType")
                        .HasColumnType("smallint");

                    b.Property<byte>("StenosisSeverityType")
                        .HasColumnType("smallint");

                    b.Property<int?>("StentLengthInMm")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AbdomenPageId");

                    b.ToTable("AbdomenFindings");
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.AbdomenPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("AbdomenPages");
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.Acquisition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AcquisitionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("BreathingProtocolType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsArterial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArterialEarly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArterialLate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsECGGating")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNative")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPulmonaryArterialPhase")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVenous")
                        .HasColumnType("boolean");

                    b.Property<float?>("LateDelayInMin")
                        .HasColumnType("real");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<int?>("NumberOfLines")
                        .HasColumnType("integer");

                    b.Property<byte>("PatientPositioningType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ReferenceValueInMAs")
                        .HasColumnType("integer");

                    b.Property<float?>("SliceThicknessInMm")
                        .HasColumnType("real");

                    b.Property<byte>("TechniqueType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.Property<int?>("TubeCurrent1MAs")
                        .HasColumnType("integer");

                    b.Property<int?>("TubeCurrent2MAs")
                        .HasColumnType("integer");

                    b.Property<byte>("TubeCurrentModulationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("TubeVoltage1KV")
                        .HasColumnType("integer");

                    b.Property<int?>("TubeVoltage2KV")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("Acquisitions");
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.AnamnesisPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("CTAngiographyMonth")
                        .HasColumnType("integer");

                    b.Property<int?>("CTAngiographyYear")
                        .HasColumnType("integer");

                    b.Property<int?>("DigitalSubtractionAngiographyMonth")
                        .HasColumnType("integer");

                    b.Property<int?>("DigitalSubtractionAngiographyYear")
                        .HasColumnType("integer");

                    b.Property<int?>("DopplerUltrasoundMonth")
                        .HasColumnType("integer");

                    b.Property<int?>("DopplerUltrasoundYear")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTAngiography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDigitalSubtractionAngiography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMR")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRAngiography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUS")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUSDopplerUltrasound")
                        .HasColumnType("boolean");

                    b.Property<int?>("MRAngiographyMonth")
                        .HasColumnType("integer");

                    b.Property<int?>("MRAngiographyYear")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("AnamnesisPages");
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.AortaFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AcuteAortalSyndromeAasType")
                        .HasColumnType("integer");

                    b.Property<byte>("AnomaliesType")
                        .HasColumnType("smallint");

                    b.Property<int>("AortaLocations1")
                        .HasColumnType("integer");

                    b.Property<int>("AortaLocations2")
                        .HasColumnType("integer");

                    b.Property<Guid?>("AortaPageId")
                        .HasColumnType("uuid");

                    b.Property<int?>("AortitisDiameterNormalPoststenoticSegmentInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("AortitisDiameterStenosisInMm")
                        .HasColumnType("integer");

                    b.Property<int>("AortitisDifferentialDiagnosisType")
                        .HasColumnType("integer");

                    b.Property<int?>("AortitisLengthInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("AortitisMaxAxialDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("AortitisMaxWidthInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("AortitisNASCETInPercent")
                        .HasColumnType("integer");

                    b.Property<int?>("AortitisVascularLengthInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("AortitisWallThicknessInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("BeginningType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CharacterizationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("CraniocaudalLengthInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("CraniodualLengthInMm")
                        .HasColumnType("integer");

                    b.Property<int>("DebakeyType")
                        .HasColumnType("integer");

                    b.Property<int?>("DegreeOfStenosisNASCETInPercent")
                        .HasColumnType("integer");

                    b.Property<byte>("DensityType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DepthInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("DetailsAorticArchKinkingPseudocoarctationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DetailsCongenitalVascularRingsType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DiameterNormalPoststenoticSegmentInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("DilatationDifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DistanceCoronaryOstiaValvePlaneInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("EndoleakClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FollowUpType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAProximal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAcuteExtravascularHematoma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAortitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBDistal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBrachiocephalicTrunk")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCmExtravasation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCoeliacTrunk")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConcentric")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContrastEnhancementOfTheArterialWall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEccentric")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEccentricPartialThrombus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEctasiaAnnulusAortaeAndAscendingAorta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreeFloating")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemodynamicallyRelevant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypoplasticAorticArch")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInferiorMesentericArteryIma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntramuralAorticHematoma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIrregularContour")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftCommonCarotidArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftCoronaryArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftRenalArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftSubclavianArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLongIntermittent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLumbarArteries")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLusoriaKommerellDiverticulum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMushroomShaped")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMycoticAneurysm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriaorticEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriaortitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPericardialEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPleuralEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPorcelainAorta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPoststenoticDilatation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsResidualStenosisAfterSurgery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightCommonCarotidArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightCoronaryArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightRenalArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightSubclavianArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRupture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShortLengthStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStenosisOcclusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubclavianArteryKommerellDiverticulum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperiorMesentericArterySma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThrombosisFalseLumen")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThrombus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUlcer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVascularDilatation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWallAdherent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWallCalcifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWallThickening")
                        .HasColumnType("boolean");

                    b.Property<int?>("LengthInMm")
                        .HasColumnType("integer");

                    b.Property<int>("LocalizationOfTheMeasurementType")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxAxialDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxDiameterAortaInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxDiameterPreviousExaminationInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<int>("PericardialEffusionType")
                        .HasColumnType("integer");

                    b.Property<int>("PleuralEffusionType")
                        .HasColumnType("integer");

                    b.Property<int?>("ProximalAneurysmaticNeckDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("ProximalNeckLengthInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("QuantificationAortitisType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SecondPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("SeverityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SizeInAxialPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<int>("StanfordType")
                        .HasColumnType("integer");

                    b.Property<int>("SvenssonType")
                        .HasColumnType("integer");

                    b.Property<byte>("TypeType")
                        .HasColumnType("smallint");

                    b.Property<int?>("WallThicknessInMm")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AortaPageId");

                    b.ToTable("AortaFindings");
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.AortaPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNoMoreAorticPathologies")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("AortaPages");
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.CMSideEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMSideEffectType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DurationAdverseReactionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCompletelyDeclining")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeriousAdverseEvent")
                        .HasColumnType("boolean");

                    b.Property<int?>("MinAfterCMinjection")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("CMSideEffects");
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.CoronaryArteriesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AgatstonScore")
                        .HasColumnType("integer");

                    b.Property<byte>("CADRADSScoreType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CoronaryAnomalyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CoronaryArterialDominanceType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("CoronaryArteriesPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("CourseRcxType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CourseRivaType")
                        .HasColumnType("smallint");

                    b.Property<int?>("EffusionMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GradingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAnastomoticStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAtrialSeptalDefect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBicuspidAorticValve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBlandWhiteGarlandSyndrome")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCoronaryFistula")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGImplants")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypodensePlaques")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIndexLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLca")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLcx")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAtrium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftCoronaryArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftEnlargementAtrium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftEnlargementVentricle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftMyocardialHypertrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftVentricularDiverticulum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLimited")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMass")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNNonDiagnostic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNapkinRingSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPatentForamenOvale")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPericarditisConstrictiva")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPneumopericardium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPositiveRemodeling")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRca")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRcx")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightCoronaryArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightEnlargementAtrium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightEnlargementVentricle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightMyocardialHypertrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightSuperDominant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightVentricularDiverticulum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRiva")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSStents")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegment1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegment10D2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegment11")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegment12Om1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegment13")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegment14Om2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegment15LPda")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegment16RPlb")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegment17RamusIntermedius")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegment18LPlb")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegment2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegment3")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegment4RPda")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegment5")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegment6")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegment7")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegment8")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegment9D1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeptumVentricularDiverticulum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpottyCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThrombus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVVulnerablePlaques")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVenousContrastReflux")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVentricularSeptalAneurysm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVentricularSeptalDefect")
                        .HasColumnType("boolean");

                    b.Property<byte>("LcaFromRightCoronarySinusType")
                        .HasColumnType("smallint");

                    b.Property<int?>("LeftVentricularDiverticulumMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MassMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("NoStenosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OtherDrainageType")
                        .HasColumnType("smallint");

                    b.Property<byte>("RcaFromLeftCoronarySinusType")
                        .HasColumnType("smallint");

                    b.Property<byte>("RightToLeftShuntType")
                        .HasColumnType("smallint");

                    b.Property<int?>("RightVentricularDiverticulumMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("SeptumVentricularDiverticulumMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("StenosisType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CoronaryArteriesPageId");

                    b.ToTable("CoronaryArteriesFindings");
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.CoronaryArteriesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("CoronaryArteriesPages");
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.IndicationFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnamnesisPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("AnginaPectorisType")
                        .HasColumnType("smallint");

                    b.Property<int?>("CigarettePacksPerDayXSmokerYears")
                        .HasColumnType("integer");

                    b.Property<byte>("IndicationFindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAbdomen")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAbdominalAorta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnginaPectoris")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAorticBifurcation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArterialHypertension")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBicuspidAorticValve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervical")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervicalLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervicalRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCirrhosisOfTheLiver")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCocaineAbuse")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCollagenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiabetesMellitus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsECG")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEchocardiography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHyperlipidemia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfrarenal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntracranial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAnteriorTibialArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftArcusPlantaris")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftCommonFemoralArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftCommonIliacArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftDorsalisPedisArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftExternalIliacArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftFemoralArteryBifurcation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftFibularArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftInternalIliacArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftPoplitealArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftPosteriorTibialArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftProfundaFemorisArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftRenalArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftSuperficialFemoralArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftTruncusTibiofibularis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLowerLimb")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLowerLimbLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLowerLimbRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMyocardialScintigraphySPECT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPET")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAnteriorTibialArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightArcusPlantaris")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightCommonFemoralArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightCommonIliacArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightDorsalisPedisArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightExternalIliacArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightFemoralArteryBifurcation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightFibularArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightInternalIliacArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightPoplitealArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightPosteriorTibialArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightProfundaFemorisArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightRenalArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightSuperficialFemoralArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightTruncusTibiofibularis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSmoking")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStressTestingPerformed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuprarenal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspectedVascularStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspiciousFor")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpperLimb")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpperLimbLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpperLimbRight")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<int?>("OnsetOfSymptomsMonth")
                        .HasColumnType("integer");

                    b.Property<int?>("OnsetOfSymptomsYear")
                        .HasColumnType("integer");

                    b.Property<int?>("PretestProbabilityCADInPercent")
                        .HasColumnType("integer");

                    b.Property<byte>("PreviousDiseaseType")
                        .HasColumnType("smallint");

                    b.Property<byte>("StadiumAccordingToFontaineType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesisPageId");

                    b.ToTable("IndicationFindings");
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.LocalizationPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<byte>("Localization")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("LocalizationPages");
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.PelvisLegArteriesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AfterTherapyLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("AfterTherapyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("AnastomoticAneurysmType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ArterioscleroticPAVKPathologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ArterioscleroticPAVKSeverityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("BypassType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ChronicLesionsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationAccordingToTASCIIType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CourseType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DegreeOfStenosisAccordingToNASCET")
                        .HasColumnType("integer");

                    b.Property<int?>("DiameterDiseaseFreePoststenoticSegment")
                        .HasColumnType("integer");

                    b.Property<int?>("DiameterStenosis")
                        .HasColumnType("integer");

                    b.Property<byte>("DissectionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DistalBypassPortType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DistalRefillingLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("EmbolismLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("EntrapmentSyndromeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FemoropoplitealExtentType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FemoropoplitealLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FollowUpType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActiveBleedingFreshHematoma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnastomoticAneurysm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArterialWallEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalciumPlaque")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCollateralsFromAdjacentVessels")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConcentricFilumTerminaleSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCorkscrewCollaterals")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCrossover")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDetectionOfCystsWithinTheVesselWall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDissection")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDistalRefillingInfrarenal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDistalRefillingSuprarenal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDistalVascularOcclusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEccentric")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdematousChangesOfTheVascularWallPerivascular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEntrapmentSyndromeTypeV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEspeciallyPeriprostheticInfection")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemodynamicallyRelevant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHighOriginAnteriorTibialArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHighOriginPeronealArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHighOriginPosteriorTibialArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfrarenal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInsufficientCollateralization")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntermittent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMicroaneurysm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMultiplePTA")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMultipleStent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsP1Segment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsP2Segment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsP3Segment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPartiallyThrombosed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeripheralEmbolisms")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeripheralOcclusionsStenoses")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriprostheticFluidCollection")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPersistentIschiadicArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPostoperativeScarringTissueChanges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProfundaFemoralArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegmentalOcclusions")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeveralShortStretchStenoses")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShortLengthStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftPlaque")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuddenChangeInDiameter")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperficialFemoralArteryDistalSegment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuprarenal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTortuousCourseOfTheSuperficialFemoralArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTypeADorsalisPedisArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTypeBDorsalisPedisArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTypeCDorsalisPedisArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTypeDLackOfDorsalisPedisArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWallThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWandverkalkungen")
                        .HasColumnType("boolean");

                    b.Property<int?>("Length")
                        .HasColumnType("integer");

                    b.Property<byte>("LengthType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxDiameter")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxDiameterEmbolus")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxDiameterInPreviousExamination")
                        .HasColumnType("integer");

                    b.Property<byte>("NoStenosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("NonArterioscleroticPAVKPathologyType")
                        .HasColumnType("smallint");

                    b.Property<bool>("Normal")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathologyStenosisType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("PelvisLegArteriesPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PeriprostheticFluidCollectionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SegmentType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TypeADetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TypeBDetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TypeCDetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TypeDDetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("VascularDilatationCharacterizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("VascularDilatationLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("VascularDilatationShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("VascularDilatationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("VesselDiameterProximalOfTheDilatation")
                        .HasColumnType("integer");

                    b.Property<byte>("WithoutContrastEnhancementType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("PelvisLegArteriesPageId");

                    b.ToTable("PelvisLegArteriesFindings");
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.PelvisLegArteriesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNoMorePathologies")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("PelvisLegArteriesPages");
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.PriorInterventionsFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AfterTransplantationType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("AnamnesisPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("AorticValveType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAbdominalEVAR")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAorticValve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAspiration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCABG")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCoiling")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCoronary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmbolizationParticle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsKidneySideLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsKidneySideRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiquidEmbolicAgents")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLowerLimb")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMechanical")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMitralValve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPartialLungResectionSideLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPartialLungResectionSideRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPatentForamenOvale")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPlug")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerosantAgent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThoracicTEVAR")
                        .HasColumnType("boolean");

                    b.Property<byte>("LowerLimbOriginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LowerLimbTargetVesselType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MitralValveType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OriginCruralSideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PriorInterventionsFindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TargetVesselCruralSideType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesisPageId");

                    b.ToTable("PriorInterventionsFindings");
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.Reconstruction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AcquisitionId")
                        .HasColumnType("uuid");

                    b.Property<int?>("DoseLengthProductMGycm")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTAngiography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLungs")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMIP")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMPR")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMinIP")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissues")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVRT")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("ReconstructionType")
                        .HasColumnType("smallint");

                    b.Property<float?>("SliceThicknessST1Mm")
                        .HasColumnType("real");

                    b.Property<float?>("SliceThicknessST2Mm")
                        .HasColumnType("real");

                    b.Property<float?>("SliceThicknessST3Mm")
                        .HasColumnType("real");

                    b.Property<float?>("SliceThicknessST4Mm")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AcquisitionId");

                    b.ToTable("Reconstructions");
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.SoftTissueFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AbdominalLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("AbdominalType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CompartmentType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DiameterCentralPulmonaryArtery")
                        .HasColumnType("integer");

                    b.Property<byte>("DignityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ExtremitiesFractureLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ExtremitiesMassLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ExtremitiesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("InferiorVenaCavaType")
                        .HasColumnType("smallint");

                    b.Property<byte>("IntracranialType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAbdominal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAscitesHemoperitoneum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAscitesSignificant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAxillary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAxillaryLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAxillaryRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalvariaBone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervical")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervicalLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervicalRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCircular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleteAtelectasis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConfluent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEDH")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFacialSkull")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGasFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIliac")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIliacLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIliacRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsImpairedVentilation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncreasedInNumber")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInferiorVenaCava")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInflammation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInguinal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInguinalLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInguinalRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntracranial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMedian")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMediastinal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMediastinalShiftToTheOppositeSide")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMidlineShift")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNormVariantVesselsPulmonaryVeins")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOrbita")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParenchymalHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerihilar")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPreservedFattyHilum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPulmonaryArteryEmbolismCentral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPulmonaryArteryEmbolismCentralLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPulmonaryArteryEmbolismCentralRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPulmonaryArteryEmbolismSegmentalLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPulmonaryArteryEmbolismSegmentalRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRetroperitoneal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRidingThrombus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSAH")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSDH")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStatusPost")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperiorVenaCava")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThoracic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThoracicMediastinalLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThoracicMediastinalRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThoracicPerihilarLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThoracicPerihilarRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWithRetrosternalParts")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaxDiameter")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxDiameterSAD")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxWidth")
                        .HasColumnType("integer");

                    b.Property<byte>("MorphologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("NeckSoftTissueMassLocalization")
                        .HasColumnType("smallint");

                    b.Property<byte>("NeckSoftTissuePathologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("NormVariantVesselsVariantsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OrbitaType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PartialAnomalousPulmonaryVenousConnectionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("PericardialCalcificationsDetails")
                        .HasColumnType("boolean");

                    b.Property<int>("RibLocations")
                        .HasColumnType("integer");

                    b.Property<int?>("SecondPlane")
                        .HasColumnType("integer");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("SoftTissuePageId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("SpineLocations")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("SuperiorVenaCavaType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SupraaorticHeadPathologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SupraaorticLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ThirdPlane")
                        .HasColumnType("integer");

                    b.Property<byte>("ThoracicDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ThoracicLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ThoracicType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("SoftTissuePageId");

                    b.ToTable("SoftTissueFindings");
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.SoftTissuePage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SoftTissuePages");
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.SummaryPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ComparisonToPriorExamsType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFollowUp")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFurtherExamination")
                        .HasColumnType("boolean");

                    b.Property<byte>("ModalityTypeFollowUpType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ModalityTypeFurtherExaminationType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("TimeIntervalType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SummaryPages");
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.SupraaorticVesselsFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AffectedBranchType")
                        .HasColumnType("smallint");

                    b.Property<int>("AffectedSegmentsOrVesselsLocation")
                        .HasColumnType("integer");

                    b.Property<int?>("DegreeOfStenosisCalculatedInNASCET")
                        .HasColumnType("integer");

                    b.Property<int?>("DiameterDiseaseFreePoststenoticSegment")
                        .HasColumnType("integer");

                    b.Property<int?>("DiameterStenosis")
                        .HasColumnType("integer");

                    b.Property<byte>("DifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("InternalCarotidArterySegmentsLocation")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsBranchesOfTheExternalCarotidArteryToTheOphthalmicArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCaliberIrregularities")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCavernousSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCerebralEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCirculusArteriosusWillisii")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConfluenceOfSinuses")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContralateralInternalCarotidArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContralateralVertebralArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContrastEnhancementOfTheArterialWall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGreatCerebralVein")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemodynamicallyRelevant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInferiorPetrosalSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInferiorSagittalSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInternalJugularVein")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftA1Aplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftA1Hypoplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftA1SplittingOrDuplication")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAVAplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAVHypoplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAcomAAplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAcomAHypoplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAcomASplittingOrDuplication")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAcomPAplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAcomPHypoplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftCavernousSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftInferiorPetrosalSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftInternalJugularVein")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftP1Aplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftP1HypoplasiaOrFTPConfiguration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftP1SplittingOrDuplication")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftPICAEndingAV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftSigmoidSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftSuperiorPetrosalSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftTransverseSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftTripleACA")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeptomeningealCollaterals")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocoregionalObliterationFattyTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOphtalmicArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPanarteritisNodosa")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorCommunicansArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightA1Aplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightA1Hypoplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightA1SplittingOrDuplication")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAVAplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAVHypoplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAcomAAplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAcomAHypoplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAcomASplittingOrDuplication")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAcomPAplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAcomPHypoplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightCavernousSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightInferiorPetrosalSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightInternalJugularVein")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightP1Aplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightP1HypoplasiaOrFTPConfiguration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightP1SplittingOrDuplication")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightPICAEndingAV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightSigmoidSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightSuperiorPetrosalSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightTransverseSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightTripleACA")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegmentV1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegmentV2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegmentV3")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegmentV4")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShortStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSigmoidSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftPlaque")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStraightSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubarachnoidHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperiorPetrosalSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperiorSagittalSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTransverseSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWallHematoma")
                        .HasColumnType("boolean");

                    b.Property<int?>("Length")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxDiameter")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SeverityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SubarachnoidHemorrhageType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("SupraaorticVesselsPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SupraaorticVesselsPageId");

                    b.ToTable("SupraaorticVesselsFindings");
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.SupraaorticVesselsPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SupraaorticVesselsPages");
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.TechnologyPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BarcodeCMCharge")
                        .HasColumnType("text");

                    b.Property<byte>("CMReinforcedType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ContrastVolumeInMl")
                        .HasColumnType("integer");

                    b.Property<byte>("ImageQualityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("IodineConcentrationType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBetaBlocker")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCMSideEffect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCortisoneIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH1BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH2BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetalArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMotion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNitroglycerin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotFurtherSpecified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsO2Administration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOther")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPulsationArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRespiratoryArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneousEpinephrine")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SequencesType")
                        .HasColumnType("smallint");

                    b.Property<string>("SetName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("TechnologyPages");
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.UpperArteriesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ArteriovenousMalformationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CharacterizationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DegreeOfStenosisAccordingToNASCET")
                        .HasColumnType("integer");

                    b.Property<byte>("DetailsVascularMalformationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DiameterDiseaseFreePoststenoticSegment")
                        .HasColumnType("integer");

                    b.Property<int?>("DiameterStenosis")
                        .HasColumnType("integer");

                    b.Property<byte>("DifferentialDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis2")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HemodialysisShuntType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ImpressionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAffectionOfDownstreamVessels")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAneurysm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBrachialArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBrachiocephalicTrunk")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCaliberVariations")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCollateralization")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCommonCarotidArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCorkscrewCollaterals")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDistalAspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemodynamicallyRelevant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfection")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAxillarArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftBrachialArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftDeepPalmarArch")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftDistalAspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftMidAspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftPalmarDigitalArteries")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftProximalAspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftRadialArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftSubclavianArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftSuperficialPalmarArch")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftUlnarArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMicroaneurysms")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMidAspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOcclusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPreStenoticDilatation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProximalAspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAxillarArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightBrachialArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightDeepPalmarArch")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightDistalAspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightMidAspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightPalmarDigitalArteries")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightProximalAspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightRadialArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightSubclavianArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightSuperficialPalmarArch")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightUlnarArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegmentalOcclusions")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeveralShortStenoses")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShortStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubclavianStealSyndrome")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOfAneurysm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOfInfection")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOfOcclusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOfStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspiciousOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wHyperintensityOfArterialWallOrEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThrombusSurroundedByContrastAgent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWallHematoma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWallThickening")
                        .HasColumnType("boolean");

                    b.Property<byte>("LeftNumberOfAffectedArteriesType")
                        .HasColumnType("smallint");

                    b.Property<int?>("Length")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxDiameter")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxDiameterPrevExam")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("RightNumberOfAffectedArteriesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SeverityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("UpperArteriesPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UpperArteriesPageId");

                    b.ToTable("UpperArteriesFindings");
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.UpperArteriesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("UpperArteriesPages");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PageNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("WasModified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("PageInfos");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessionNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Evaluation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExaminationType")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("FindingsDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FreeField")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("LicenseFractionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LicensingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("PatientAge")
                        .HasColumnType("smallint");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PresetCode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StudyInstanceUID")
                        .HasColumnType("text");

                    b.Property<byte>("TotalPageCount")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Approved")
                        .HasColumnType("text");

                    b.Property<string>("Discussion")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsICD10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferenceImage")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReportSummary")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportResults");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ReportSession");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<byte?>("Age")
                        .HasColumnType("smallint");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PatientInformation");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.FindingLocalizer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mapping")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FindingLocalizers");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("BuildVersion")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Paragraphs")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportTypeName", "VersionName")
                        .IsUnique();

                    b.ToTable("ReportSchemas");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ReportSchemaId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportSchemaId")
                        .IsUnique();

                    b.ToTable("ReportSchemaSessions");
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.AbdomenFinding", b =>
                {
                    b.HasOne("RadioReport.AngiographyCT.Domain.Models.AbdomenPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("AbdomenPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.AbdomenPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.Acquisition", b =>
                {
                    b.HasOne("RadioReport.AngiographyCT.Domain.Models.TechnologyPage", null)
                        .WithMany("Acquisitions")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.AnamnesisPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.AortaFinding", b =>
                {
                    b.HasOne("RadioReport.AngiographyCT.Domain.Models.AortaPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("AortaPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.AortaPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.CMSideEffect", b =>
                {
                    b.HasOne("RadioReport.AngiographyCT.Domain.Models.TechnologyPage", null)
                        .WithMany("CMSideEffects")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.CoronaryArteriesFinding", b =>
                {
                    b.HasOne("RadioReport.AngiographyCT.Domain.Models.CoronaryArteriesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("CoronaryArteriesPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.CoronaryArteriesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.IndicationFinding", b =>
                {
                    b.HasOne("RadioReport.AngiographyCT.Domain.Models.AnamnesisPage", null)
                        .WithMany("IndicationFindings")
                        .HasForeignKey("AnamnesisPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.LocalizationPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.PelvisLegArteriesFinding", b =>
                {
                    b.HasOne("RadioReport.AngiographyCT.Domain.Models.PelvisLegArteriesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("PelvisLegArteriesPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.PelvisLegArteriesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.PriorInterventionsFinding", b =>
                {
                    b.HasOne("RadioReport.AngiographyCT.Domain.Models.AnamnesisPage", null)
                        .WithMany("PriorInterventionsFindings")
                        .HasForeignKey("AnamnesisPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.Reconstruction", b =>
                {
                    b.HasOne("RadioReport.AngiographyCT.Domain.Models.Acquisition", null)
                        .WithMany("Reconstructions")
                        .HasForeignKey("AcquisitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.SoftTissueFinding", b =>
                {
                    b.HasOne("RadioReport.AngiographyCT.Domain.Models.SoftTissuePage", null)
                        .WithMany("Findings")
                        .HasForeignKey("SoftTissuePageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.SoftTissuePage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.SummaryPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.SupraaorticVesselsFinding", b =>
                {
                    b.HasOne("RadioReport.AngiographyCT.Domain.Models.SupraaorticVesselsPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("SupraaorticVesselsPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.SupraaorticVesselsPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.TechnologyPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.UpperArteriesFinding", b =>
                {
                    b.HasOne("RadioReport.AngiographyCT.Domain.Models.UpperArteriesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("UpperArteriesPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AngiographyCT.Domain.Models.UpperArteriesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("Pages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("ReportResults")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.HasOne("RadioReport.AngiographyCT.Domain.Models.LocalizationPage", null)
                        .WithOne("PatientInformation")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", null)
                        .WithOne("Session")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", "ReportSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
