// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RadioReport.HipMRT.Repo;

namespace RadioReport.HipMRT.Repo.Migrations
{
    [DbContext(typeof(HipMRTDbContext))]
    partial class HipMRTDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PageNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("WasModified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("PageInfos");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessionNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Evaluation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExaminationType")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("FindingsDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FreeField")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("LicenseFractionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LicensingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("PatientAge")
                        .HasColumnType("smallint");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PresetCode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StudyInstanceUID")
                        .HasColumnType("text");

                    b.Property<byte>("TotalPageCount")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Approved")
                        .HasColumnType("text");

                    b.Property<string>("Discussion")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsICD10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferenceImage")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReportSummary")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportResults");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ReportSession");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("ObjectName")
                        .HasColumnType("text");

                    b.Property<byte[]>("Stream")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("ImageFile");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<byte?>("Age")
                        .HasColumnType("smallint");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PatientInformation");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.FindingLocalizer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mapping")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FindingLocalizers");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("BuildVersion")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Paragraphs")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportTypeName", "VersionName")
                        .IsUnique();

                    b.ToTable("ReportSchemas");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ReportSchemaId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportSchemaId")
                        .IsUnique();

                    b.ToTable("ReportSchemaSessions");
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.AnamnesisFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnamnesisPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsFemur")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFemurLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFemurRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPelvis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPelvisLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPelvisRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSacrum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSiteLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSiteRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicion")
                        .HasColumnType("boolean");

                    b.Property<int?>("MonthOfTrauma")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<int?>("YearOfTrauma")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesisPageId");

                    b.ToTable("AnamnesisFindings");
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.AnamnesisPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CartilageTransplantationType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilageTransplantation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilageTransplantationSideLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilageTransplantationSideRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEndoprosthesis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEndoprosthesisLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEndoprosthesisRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLabralSurgery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLabralSurgeryLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLabralSurgeryRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRI")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOffsetCorrection")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOffsetCorrectionLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOffsetCorrectionRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsXRay")
                        .HasColumnType("boolean");

                    b.Property<int?>("MonthOfCT")
                        .HasColumnType("integer");

                    b.Property<int?>("MonthOfMRI")
                        .HasColumnType("integer");

                    b.Property<int?>("MonthOfXRay")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<int?>("YearOfCT")
                        .HasColumnType("integer");

                    b.Property<int?>("YearOfMRI")
                        .HasColumnType("integer");

                    b.Property<int?>("YearOfXRay")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("AnamnesisPages");
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.Bones.BonesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ARCOClassificationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("AbscessSecondSizeInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("AbscessSizeInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("AbscessThirdSizeInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("AcetabulumType")
                        .HasColumnType("smallint");

                    b.Property<byte>("AlignmentType")
                        .HasColumnType("smallint");

                    b.Property<byte>("AvescularDifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("BoneMarrowDifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("BonesPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("CartilageDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<int?>("CoronalMeasurementInDegrees")
                        .HasColumnType("integer");

                    b.Property<byte>("CorticalBoneType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CoxarthrosisDifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DegreeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis2")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis3")
                        .HasColumnType("smallint");

                    b.Property<byte>("DistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ExpansionCoronalType")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ExpansionInMm")
                        .HasColumnType("smallint");

                    b.Property<int?>("ExpansionSecondSizeInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpansionSizeInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpansionThirdSizeInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("ExpansionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture31A1Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture31A2Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture31A3Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture31AType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture31B1Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture31B2Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture31BType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture31C1Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture31C2Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture31CType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture32AType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture32BType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture32CType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture32Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture61A1Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture61A2Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture61AType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture61B1Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture61B2Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture61B3Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture61BType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture61C1Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture61C2Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture61C3Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture61CType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture62A1Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture62A2Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture62A3Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture62AType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture62B1Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture62B2Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture62B3Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture62BType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Fracture62CType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureAO31BClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureAO31CClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureAO61ClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureAO62ClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureSpecificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FurtherImageFeaturesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GeneralType")
                        .HasColumnType("smallint");

                    b.Property<int>("HipSpecificLocalizations")
                        .HasColumnType("integer");

                    b.Property<byte>("HistologyKnownType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAbscessLesionSame")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAcetabulum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdjacentBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnterosuperior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArticularCorticalImpressionFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArticularEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneApposition")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilageCap")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCentral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChondropathy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCloaca")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCoxarthrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCrushedPhysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDestruction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiaphysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffuse")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDislocated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDislocatedFemoralHead")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDoubleLineSignT2w")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDysplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnlargedEpiphysealPlate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpiphysealBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpiphysiolysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpiphysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExpansile")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFemur")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFlattened")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGanglion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGeographic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologyKnown")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInThePrimarilyAffected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationOfAdjacentBone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraarticularLoosebody")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraosseousAbscessBrodieAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIrregularEpiphysealPlate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsJointSpaceNarrowing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftEnthesiopathy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftJointIrregularity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftMuscleEdemaOfAdductor")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftPubicBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftSecondaryCleftSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLinearSignalAlterationParallel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLobulated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLowSignalPerichondriumOver")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetaphysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMirroringArticularSurface")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNoContrastEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOrientationFacingAwayFrom")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoblastic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteochondralFragment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoidMatrix")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteophytes")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOverOneLesionSameEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParalabralCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPathologicalFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPathologicalFractureSuspected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPedunculated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPenumbraSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerifocalContrastEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerifocalSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealReactionsunBurst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealRupture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealSpurCodmanSpur")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeripheralContrastEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsQuantityOverOne")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightBoneMarrowEdemaOsPubis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightEnthesiopathy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightJointIrregularity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightMuscleEdemaOfAdductor")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightSecondaryCleftSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRound")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerotic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScleroticMargin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSecondary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeptated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSequester")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSessile")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSinusTractFistula")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpongiosaLesionSame")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralCleftWithFluid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralCystsgeodes")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralLowSignalIntensity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubperiostealAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSymphysisDisruption")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovialCyst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT1wHypointenseLinePerpendicular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT1wLowSignalArea")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickenedSynoviaWithEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThinningscalopping")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTransientBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<byte>("LocalExpansionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MainDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MassOrOsteolysisCorticalBoneType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxGanglionDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxLoosebodyDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxSynovialCystDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxThicknessInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OsteomyelitisDifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PartType")
                        .HasColumnType("smallint");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<byte>("PositioningType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PronouncedHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SacralFractureType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SagittalMeasurementInDegrees")
                        .HasColumnType("integer");

                    b.Property<int?>("SequesterSecondSizeInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("SequesterSizeInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("SequesterThirdSizeInMm")
                        .HasColumnType("integer");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<byte>("ShearFractureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("StageType")
                        .HasColumnType("smallint");

                    b.Property<byte>("StimulatedBoneMarrowType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SubperiostealSizeInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("T1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("T2w")
                        .HasColumnType("smallint");

                    b.Property<byte>("TrochantericAvulsionTearType")
                        .HasColumnType("smallint");

                    b.Property<byte>("VallotonKellgrenMRadaptedType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BonesPageId");

                    b.HasIndex("ImageFileId")
                        .IsUnique();

                    b.ToTable("BonesFindings");
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.Bones.BonesFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ContrastEnhancementDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilageCap")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCentral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiaphysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffuse")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpiphysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExpansile")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGeographic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLobulated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLowSignalPerichondriumOver")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetaphysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOrientationFacingAwayFrom")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoblastic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoidMatrix")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPedunculated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealReactionsunBurst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealSpurCodmanSpur")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRound")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerotic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScleroticMargin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeptated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSessile")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<byte>("MainDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MassOrOsteolysisCorticalBoneType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PronouncedHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("T1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("T2w")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("BonesFindingPresets");
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.Bones.BonesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("BonesPages");
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.CMSideEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMSideEffectType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DurationAdverseReactionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCompletelyDeclining")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeriousAdverseEvent")
                        .HasColumnType("boolean");

                    b.Property<int?>("MinAfterCMinjection")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("CMSideEffects");
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.CapsuleAndLigaments.CapsuleAndLigamentsFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CapsuleAndLigamentsPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("CharacterizationIIHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis2")
                        .HasColumnType("smallint");

                    b.Property<byte>("DistinctionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("Extension2ndPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("Extension3rdPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("ExtensionSizeInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GrowthPatternsType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAbove1Lesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAbove1LesionSameEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAbove1LesionSamePathology")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArticularEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBloomingArtifact")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBonyErosionsSynovialInsertion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHaemarthrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHyperplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftSide")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLooseBody")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriarticularCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerifocalSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPronouncedContrastEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightSide")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSusceptibilityArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovialProliferations")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovialnodulus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wSignalElevation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickening")
                        .HasColumnType("boolean");

                    b.Property<byte>("LocalizationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("LooseBodyMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PronouncedHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SynoviaDifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("T1wSignal")
                        .HasColumnType("smallint");

                    b.Property<byte>("T2wSignal")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CapsuleAndLigamentsPageId");

                    b.ToTable("CapsuleAndLigamentsFindings");
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.CapsuleAndLigaments.CapsuleAndLigamentsFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsArticularEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBloomingArtifact")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBonyErosionsSynovialInsertion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHaemarthrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriarticularCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerifocalSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSusceptibilityArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovialProliferations")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovialnodulus")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SynoviaDifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("T1wSignal")
                        .HasColumnType("smallint");

                    b.Property<byte>("T2wSignal")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("CapsuleAndLigamentsFindingPresets");
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.CapsuleAndLigaments.CapsuleAndLigamentsPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("CapsuleAndLigamentsPages");
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.CartilageAndLabrumFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CartilageAndLabrumPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("CartilageLocalizer")
                        .HasColumnType("smallint");

                    b.Property<byte>("DegenerationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("EtiologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<int?>("InclinationInDegrees")
                        .HasColumnType("integer");

                    b.Property<int?>("IntraArticularLooseBodyMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAcetabularOvercoverage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAcetabulum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowEdemaAtHeadNeckTransition")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilageLesionAnteriorSuperior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilageLesionPosteriorInferior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChondrocalcinosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChondrolabralSeparation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDecreasedOffset")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDegeneration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDysplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFemoralHead")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFemur")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidIsointense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFurtherImageFeatures")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHerniationPitAnterolateralFemoralNeck")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraArticularLooseBody")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParalabralCyst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeripheralSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTear")
                        .HasColumnType("boolean");

                    b.Property<int?>("LengthMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxSizeInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("MorphologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OuterbridgeClassificationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("QuantitativeAnalysisAlphaAngleInDegrees")
                        .HasColumnType("integer");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TraumaticType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CartilageAndLabrumPageId");

                    b.ToTable("CartilageAndLabrumFindings");
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.CartilageAndLabrumPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("CartilageAndLabrumPages");
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.Localization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBasins")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBasinsDorsal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBasinsLateral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBasinsVentral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThigh")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThighDorsal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThighMedia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThighVentral")
                        .HasColumnType("boolean");

                    b.Property<int?>("ThighMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Localizations");
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.LocalizationPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("HipLocalization")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("LocalizationPages");
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.MusclesAndTendonsFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("BonyAvulsionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("BursitisLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("BursitisMarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CharacterizationHaematomaType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationMCStatement")
                        .HasColumnType("smallint");

                    b.Property<byte>("EdemaLikeSignalIntensityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("IntramuscularLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApophysitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneBruise")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBonyAvulsion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdemaLikeSignalIntensity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFascialTear")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFattyDegeneration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGanglion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHaematoma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntermuscular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntracorticalEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntramuscular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMaximumDiameterOfRuptureAboveOrEqual5Mm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMaximumDiameterOfRuptureBelow5Mm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscleHerniation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscularAtrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPDwSignalIncrease")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerifocalSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReducedIschiofemoralDistance")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRetraction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRupturedBursa")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSecondaryOsteomyelitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepticBursitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWavyCourseOfTheFibers")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaxDiameterBursaInMm")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MusclesAndTendonsPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("MuscularAtrophyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MusculatureLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathologyType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ReducedIschiofemoralMinimumDistanceInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("RetractionInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("RetractionMeasurementInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("RuptureLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("T1wSignalCharacteristics")
                        .HasColumnType("smallint");

                    b.Property<byte>("T2wSignalCharacteristics")
                        .HasColumnType("smallint");

                    b.Property<byte>("TendonsLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TendonsMorphologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TendonsPathologyType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("MusclesAndTendonsPageId");

                    b.ToTable("MusclesAndTendonsFindings");
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.MusclesAndTendonsPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("MusclesAndTendonsPages");
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.Sequence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Is3D")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParallelImaging")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPostContrast")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSaturatedFat")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OrientationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SequenceType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("WeightingType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("Sequences");
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.SoftTissueFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CharacterizationHaematomaType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<int?>("CraniocaudalExtensionInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis2")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis3")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HistologyKnownType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("IliacalDifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<int?>("IliacalMaxShortAxisDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("InguinalDifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<int?>("InguinalMaxShortAxisDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAlongTheTendonSheath")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneErosion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBones")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCutisThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeepLegVeins")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDorsal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmpyema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFascia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhagic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologyKnown")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIliacVeins")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIliacal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInguinal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMedial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLesionSameEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNerves")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPelvis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSedimentation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSignalVoids")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSkin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperficialLegVeins")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThigh")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVentral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVessel")
                        .HasColumnType("boolean");

                    b.Property<byte>("LocalizationThighType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxAxialDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("QuantityType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SecondPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SizeInMm")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SoftTissuePageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("T1wSignal")
                        .HasColumnType("smallint");

                    b.Property<byte>("T2wSignal")
                        .HasColumnType("smallint");

                    b.Property<int?>("ThirdPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("VesselsLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("VesselsPathologyType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("SoftTissuePageId");

                    b.ToTable("SoftTissueFindings");
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.SoftTissueFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsBoneErosion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFat")
                        .HasColumnType("boolean");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("T1wSignal")
                        .HasColumnType("smallint");

                    b.Property<byte>("T2wSignal")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("SoftTissueFindingPresets");
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.SoftTissuePage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SoftTissuePages");
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.SummaryPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("DateMonthType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingsDynamicsType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAngiography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBiopsy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFollowUp")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRIAngiography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRIKnee")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRIPelvis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsXRay")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("TClassificationType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SummaryPages");
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.TechnologyPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BarcodeCMCharge")
                        .HasColumnType("text");

                    b.Property<byte>("CMReinforcedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastMediumType")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("ContrastQuantity")
                        .HasColumnType("numeric");

                    b.Property<int?>("DilutionAmount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCMSideEffect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCortisoneIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH1BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH2BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIndirectArthrography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraarticular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntravenous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMagicAngleArtifact")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetalArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMotion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotFurtherSpecified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsO2Administration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOther")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneousEpinephrine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSusceptibilityArtifacts")
                        .HasColumnType("boolean");

                    b.Property<byte>("MagneticFieldStrengthType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SequencesType")
                        .HasColumnType("smallint");

                    b.Property<string>("SetName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("TechnologyPages");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("Pages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("ReportResults")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.HasOne("RadioReport.HipMRT.Domain.Models.LocalizationPage", null)
                        .WithOne("PatientInformation")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", null)
                        .WithOne("Session")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", "ReportSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.AnamnesisFinding", b =>
                {
                    b.HasOne("RadioReport.HipMRT.Domain.Models.AnamnesisPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("AnamnesisPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.AnamnesisPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.Bones.BonesFinding", b =>
                {
                    b.HasOne("RadioReport.HipMRT.Domain.Models.Bones.BonesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("BonesPageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "UploadedImageFile")
                        .WithOne()
                        .HasForeignKey("RadioReport.HipMRT.Domain.Models.Bones.BonesFinding", "ImageFileId");
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.Bones.BonesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.CMSideEffect", b =>
                {
                    b.HasOne("RadioReport.HipMRT.Domain.Models.TechnologyPage", null)
                        .WithMany("CMSideEffects")
                        .HasForeignKey("TechnologyPageId");
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.CapsuleAndLigaments.CapsuleAndLigamentsFinding", b =>
                {
                    b.HasOne("RadioReport.HipMRT.Domain.Models.CapsuleAndLigaments.CapsuleAndLigamentsPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("CapsuleAndLigamentsPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.CapsuleAndLigaments.CapsuleAndLigamentsPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.CartilageAndLabrumFinding", b =>
                {
                    b.HasOne("RadioReport.HipMRT.Domain.Models.CartilageAndLabrumPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("CartilageAndLabrumPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.CartilageAndLabrumPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.LocalizationPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.MusclesAndTendonsFinding", b =>
                {
                    b.HasOne("RadioReport.HipMRT.Domain.Models.MusclesAndTendonsPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("MusclesAndTendonsPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.MusclesAndTendonsPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.Sequence", b =>
                {
                    b.HasOne("RadioReport.HipMRT.Domain.Models.TechnologyPage", null)
                        .WithMany("Sequences")
                        .HasForeignKey("TechnologyPageId");
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.SoftTissueFinding", b =>
                {
                    b.HasOne("RadioReport.HipMRT.Domain.Models.SoftTissuePage", null)
                        .WithMany("Findings")
                        .HasForeignKey("SoftTissuePageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.SoftTissuePage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.SummaryPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HipMRT.Domain.Models.TechnologyPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
