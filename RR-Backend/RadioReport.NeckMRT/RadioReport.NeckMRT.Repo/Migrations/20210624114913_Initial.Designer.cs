// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RadioReport.NeckMRT.Repo;

namespace RadioReport.NeckMRT.Repo.Migrations
{
    [DbContext(typeof(NeckMRTDbContext))]
    [Migration("20210624114913_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PageNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("WasModified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("PageInfos");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessionNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Evaluation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExaminationType")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("FindingsDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FreeField")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("LicenseFractionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LicensingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("PatientAge")
                        .HasColumnType("smallint");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PresetCode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StudyInstanceUID")
                        .HasColumnType("text");

                    b.Property<byte>("TotalPageCount")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Approved")
                        .HasColumnType("text");

                    b.Property<string>("Discussion")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsICD10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferenceImage")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReportSummary")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportResults");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ReportSession");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ObjectName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ImageFiles");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<byte?>("Age")
                        .HasColumnType("smallint");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PatientInformation");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.FindingLocalizer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mapping")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FindingLocalizers");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("BuildVersion")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Paragraphs")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportTypeName", "VersionName")
                        .IsUnique();

                    b.ToTable("ReportSchemas");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ReportSchemaId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportSchemaId")
                        .IsUnique();

                    b.ToTable("ReportSchemaSessions");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.BonesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AxialDeviationType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("BonesPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("CharacterizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CorticalBoneType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ExtensionCraniocaudalInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("ExtensionReferenceSpinalCanalType")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ExtensionSagittalInMm")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HistologyKnownType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArytenoidCartilage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBroadbased")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCentral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsClivus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCondylarProcess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCondylarProcessLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCondylarProcessRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContrastEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCoronoideusProcess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCricoidCartilage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffuseDistribution")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEndplateEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsErosionsOfTheEndplates")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExpansive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFacialSkeleton")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHighGradeCSF")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologyKnown")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncreasedSizeOfDisc")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncreasedT2Signal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInferiorNasalConcha")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationOfAdjacentbone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationSoftTissues")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntervertebralDiscProthesis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMandible")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMandibleAlveolarProcess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMandibleLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMandibleRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsManubriumSterni")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMaxilla")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMaxillaAlveolarProcess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMaxillaLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMaxillaPalatineProcess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMaxillaRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMiddleNasalConcha")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMigrationCaudal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMigrationCranial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMultiple")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMyelonCompression")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNarrowingOfTheIntervertebral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNasalSeptum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsEthmoidale")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsHyoideum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsIncisivum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsOccipitale")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsPalatinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsSphenoidale")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsTemporale")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoblastic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteomyelitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteophyteFormation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteosynthesis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOverOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOverOneLesionOfSameEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParavertebralinflammatoryReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeripheralContrastEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorCranialFossa")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRamusMandibulae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerosisEdge")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerotic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeptatedChambered")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSkullBase")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpondylodesis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperiorNasalConcha")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wHyperintensityOfDisc")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendinitisCalcareaLongus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendinitisLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendinitisRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThyroidCartilage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVertebra")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVertebraEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVertebroplasty")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVomer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWithinThePrimaryAffectedBone")
                        .HasColumnType("boolean");

                    b.Property<byte>("LocalSpreadType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MainHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MainSpatialNeoplasmDifferentialDiagnosisType1")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte?>("MaxDiameterInMm")
                        .HasColumnType("smallint");

                    b.Property<byte>("ModicClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MyelonDifferentialDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("MyelonDifferentialDiagnosis2")
                        .HasColumnType("smallint");

                    b.Property<byte>("MyelonPathologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OsteomyelitisDifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<decimal>("OsteosynthesisSpineLocations")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("PathologyType")
                        .HasColumnType("smallint");

                    b.Property<decimal>("ProthesisSpineLocations")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte?>("SagittalWidthOfCanalInMm")
                        .HasColumnType("smallint");

                    b.Property<byte?>("SecondPlaneInMm")
                        .HasColumnType("smallint");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte?>("SizeInMm")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpatialNeoplasmDifferentialDiagnosisType1")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpatialNeoplasmDifferentialDiagnosisType2")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpatialNeoplasmDifferentialDiagnosisType3")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpinalCanalLocations")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpineAxialLocations")
                        .HasColumnType("smallint");

                    b.Property<decimal>("SpineLocations")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("SpondylodesisSpineLocations")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("SpondylodesisTraumaLocations")
                        .HasColumnType("smallint");

                    b.Property<byte>("SubHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("T1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("T2w")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ThirdPlaneInMm")
                        .HasColumnType("smallint");

                    b.Property<decimal>("VertebroplastySpineLocations")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("BonesPageId");

                    b.ToTable("BonesFindings");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.BonesFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ContrastEnhancementDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CorticalBoneType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCentral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffuseDistribution")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExpansive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationOfAdjacentbone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationSoftTissues")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoblastic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOverOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerosisEdge")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerotic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeptatedChambered")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<byte>("MainHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MainSpatialNeoplasmDifferentialDiagnosisType1")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MyelonPathologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SubHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("T1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("T2w")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("BonesFindingPresets");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.BonesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("areFindings")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("BonesPages");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.CMSideEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMSideEffectType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DurationAdverseReactionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCompletelyDeclining")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeriousAdverseEvent")
                        .HasColumnType("boolean");

                    b.Property<int?>("MinAfterCMinjection")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ParentNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ScopeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("CMSideEffect");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.ExaminationPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRINeck")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ExaminationPages");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.Indication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AbscessType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ArterialPathologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GoiterType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("IndicationPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("IndicationType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypopharynx")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLarynx")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiquids")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNasopharynx")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOropharynx")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParotidSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSolidFood")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStatusPostAspiration")
                        .HasColumnType("boolean");

                    b.Property<byte>("MetabolismType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MonthOfPostoperativeImaging")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ParentNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ScopeId")
                        .HasColumnType("uuid");

                    b.Property<byte>("TumorEntityType")
                        .HasColumnType("smallint");

                    b.Property<int>("YearOfPostoperativeImaging")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IndicationPageId");

                    b.ToTable("Indication");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.IndicationPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRI")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSonography")
                        .HasColumnType("boolean");

                    b.Property<byte>("MonthOfCT")
                        .HasColumnType("smallint");

                    b.Property<byte>("MonthOfMRI")
                        .HasColumnType("smallint");

                    b.Property<byte>("MonthOfSonography")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<int>("YearOfCT")
                        .HasColumnType("integer");

                    b.Property<int>("YearOfMRI")
                        .HasColumnType("integer");

                    b.Property<int>("YearOfSonography")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("IndicationPages");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.LarynxFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CmDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CmHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CmQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CricothyroidClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CystsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis2")
                        .HasColumnType("smallint");

                    b.Property<byte>("EntityType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ExtensionInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureOrientationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HistologyKnownType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAirFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAirwayObstruction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnteriorCommissure")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAryepiglotticFold")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAryepiglotticFolds")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArytaenoidCartilageLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArytaenoidCartilageRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilagoArytaenoideaLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilagoArytaenoideaRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCricothyroidalJointLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCricothyroidalJointRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffusionRestriction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDislocatedFractureFragments")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDislocation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDisplacing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDissectionCarotidArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDissectionCarotidArteryLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDissectionCarotidArteryRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdematousSwellingOfTheEpiglottis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEndophytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpiglotticDisruption")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpiglottis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExophytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExtensionToSpacesOfSuprahyoidNeck")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGlottis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhageSignsOfResidualHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologyKnown")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInvasive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIpsilateralVocalFoldAdduction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIpsilateralVocalFoldAdductionLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIpsilateralVocalFoldAdductionRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLuxationSubluxation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLymphadenitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMacroscopicFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMicroscopicFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThan1LesionSameEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMucosalContrastEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMucosalTearsOfTheAryepiglotticFolds")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsObliterationOfThePerifocalFattyTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPalatinTonsilEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPhlegmon")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorCommissure")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPronouncedSubcutaneousEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRetractionOfRupture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRuptureAtLevelOfPetiole")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSinusOfMorgagni")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueSwelling")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneousEmphysema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubglotticSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSupraglotticLaryngealEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSupraglotticSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThyroarytenoidMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThyroidCartilage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTongueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsToothBone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVestibularFold")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVocalCord")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LarynxPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("LocalizationAxialType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LuxationLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<int?>("SecondPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<int?>("SizeInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("SoftTissueLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("T1wSignal")
                        .HasColumnType("smallint");

                    b.Property<byte>("T2wSignal")
                        .HasColumnType("smallint");

                    b.Property<int?>("ThirdPlaneInMm")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ImageFileId")
                        .IsUnique();

                    b.HasIndex("LarynxPageId");

                    b.ToTable("LarynxFindings");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.LarynxFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CmHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CmQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsGlottis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInvasive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSinusOfMorgagni")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSupraglotticSpace")
                        .HasColumnType("boolean");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("T1wSignal")
                        .HasColumnType("smallint");

                    b.Property<byte>("T2wSignal")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("LarynxFindingPresets");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.LarynxPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("LarynxPages");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.LymphNodesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CharacterizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsConglomerateMass")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLevelIIIMidInternal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLevelIIaUpperInternal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLevelIIbUpperInternal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLevelIVLowerInternal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLevelIaSubmental")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLevelIbSubmandibular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLevelVIAnteriorCompartment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLevelVIIUppermediastinalLN")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLevelVaSuperiorPosteriorcervical")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLevelVbInferiorPosterior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LymphNodesPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxShortAxisDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ImageFileId")
                        .IsUnique();

                    b.HasIndex("LymphNodesPageId");

                    b.ToTable("LymphNodesFindings");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.LymphNodesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("LymphNodesPages");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.PharynxFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AnatomicVariantType")
                        .HasColumnType("smallint");

                    b.Property<byte>("AsymmetryType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CleftLipAndPalateType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CmEnhancementDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CmEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CystType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis2")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GradingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAffectionOfParapharyngealFatStrips")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAffectionSpinalCanal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAirwayObstruction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnteriorCervicalSpaceAcs")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBuccalSpaceBs")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCarotidSpaceCs")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChoanalAtresiaLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChoanalAtresiaRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCleftLipAndPalateLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCleftLipAndPalateRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCyst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysticChange")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffusionRestriction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDisplacing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdemaOfTheLeftLongusColliMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdemaOfTheRightLongusColliMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdematousSwelling")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEndophytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpiduralExtension")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpiglottisUpperMargin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExophytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFasciaSpacesLingualTonsils")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFasciaSpacesValleculae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFocalSignalVoids")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGasFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhageHemosiderin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHyperplasiaLeftTonsilPalatina")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHyperplasiaRightTonsillaPalatina")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHyperplasiaTonsillaPharyngea")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypopharynx")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypopharynxPosteriorWall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsImbibitionOfPerifocalFatTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInferior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInferiorLingualTonsils")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInferiorSoftPalate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInferiorValleculae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInvasive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralPharyngealWall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLymphadenitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMacroscopic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMacroscopicFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMasticatorSpaceMs")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMediastinitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMicroscopic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMicroscopicFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThan1LesionSameEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNasopharynx")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNasopharynxLateralWall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNasopharynxPosteriorWall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOralMucosalSpaceOms")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOropharynx")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOropharynxLateralWall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOropharynxPosteriorWall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolysisCorpusMandibulae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolysisMandible")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolysisMaxilla")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolysisRamusMandibulae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteomyelitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteomyelitisCorpusMandibulae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteomyelitisMandible")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteomyelitisMaxilla")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteomyelitisRamusMandibulae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParapharyngealSpacePps")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParotidSpacePs")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerivertebralSpacePvsParaspinal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerivertebralSpacePvsPrevertebral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPharyngealMucosalSpacePms")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPharyngealRecess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPharyngealTonsil")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPiriformSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPostcricoidRegion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorCervicalSpacePcs")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProvenHistology")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPseudoaneurysmLeftIca")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPseudoaneurysmRightIca")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRetropharyngealSpaceRpsAndDangerSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRoof")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRootOfTheTongueRot")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEmphysema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStenosisLeftIca")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStenosisRightIca")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSublingualSpaceSls")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubmandibularSpaceSms")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThrombosisLeftInternalJugularVein")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThrombosisRightInternalJugularVein")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTissueBridging")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTongueBase")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTonsilLodge")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsToothBoneFormation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTopographicalRelationToRecurrentLaryngealNerve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTorusTubarius")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTransspatialGrowth")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVisceralSpaceVs")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsZenkerSDiverticulum")
                        .HasColumnType("boolean");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MassHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OrientationAxialType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("PharynxPageId")
                        .HasColumnType("uuid");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<byte>("ProvenHistologyType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SecondPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT1wType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT2wType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SizeInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("ThirdPlaneInMm")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ImageFileId")
                        .IsUnique();

                    b.HasIndex("PharynxPageId");

                    b.ToTable("PharynxFindings");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.PharynxFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CmEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsDisplacing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypopharynx")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInvasive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNasopharynx")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOropharynx")
                        .HasColumnType("boolean");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MassHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT1wType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT2wType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("PharynxFindingPresets");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.PharynxPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("PharynxPages");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.PreviousTherapy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IndicationPageId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNeckDissectionLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNeckDissectionRight")
                        .HasColumnType("boolean");

                    b.Property<byte>("MonthOfPreviousTherapy")
                        .HasColumnType("smallint");

                    b.Property<byte>("NeckDissectionTypeLeft")
                        .HasColumnType("smallint");

                    b.Property<byte>("NeckDissectionTypeRight")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ParentNumber")
                        .HasColumnType("smallint");

                    b.Property<byte>("PreviousTherapyType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ScopeId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ThryoidectomyType")
                        .HasColumnType("smallint");

                    b.Property<int>("YearOfPreviousTherapy")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IndicationPageId");

                    b.ToTable("PreviousTherapy");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.Sequence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Is3D")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBreathHoldingTechnique")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChemicalShiftImaging")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParallelImaging")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPostContrast")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPostContrastPerfusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPostContrastSubtraction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSaturatedFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSedation")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OrientationType")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ParentNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ScopeId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SequenceType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("WeightingType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("Sequence");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.SoftTissuesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AirwayObstructionMinDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("AnterolateralType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CharacterizationCystType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CharacterizationIDifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CystType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis2")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HistologyProvenType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAbove1LesionSameEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActiveBleeding")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdjacentToTheRecurrentLaryngealNerve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAffectionSpinalCanal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAirFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAirwayObstruction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnteriorCervicalSpaceACS")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApexLinguae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBuccalRegion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBuccalSpaceBS")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCarotidSpaceCS")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCorpusLinguae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCutaneousFistula")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCyst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCystSubordinate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeepOrIntrinsicMusclesLateralTract")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeepOrIntrinsicMusclesMedialTract")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffusionRestriction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDigastricMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDisplacing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDisseminated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdemaLongusColliMuscleLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdemaOfTheLongusColliMuscleRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEndophytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpiduralExtension")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExophytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFloorOfMouthMuscles")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGenioglossusMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGeniohyoidMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhageOrHemosiderin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologyProven")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHyoglossusMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInternalJugularVeinThrombosisLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInternalJugularVeinThrombosisRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntrinsicMusclesOfTheTongue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInvasive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLNCStreakyContrastEnhancementPerifocal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLNCStreakySignalEnhancementFatSaturatedT2wSequence")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLNCThickeningOfTheCystWall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLaryngealMuscles")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLevatorScapulaeMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLongusCapitisMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLongusColliMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLowerLip")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLymphadenitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMNCStreakyContrastEnhancementPerifocal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMNCStreakySignalEnhancementFatSaturatedT2wSequence")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMNCThickeningOfTheCystWall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMacroscopicFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMastatorSpaceMS")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMedianToThePosteriorWallOfTheNasopharynx")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMediastinitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMentalRegion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMicroscopicFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMylohyoidMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNeckMuscles")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsObliterationOfPerifocalFatTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOralMucosalSpaceOMS")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOralRegion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolysisCorpusMandibulae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolysisMandible")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolysisMaxilla")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolysisRamusMandibulae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteomyelitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteomyelitisCorpusMandibulae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteomyelitisMandible")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteomyelitisMaxilla")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteomyelitisRamusMandibulae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParapharyngealSpacePPS")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParaspinalMuscles")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParotidSpacePS")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerivertebralSpacePVSParaspinal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerivertebralSpacePVSPrevertebral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPharyngealMucosalSpacePMS")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPharyngealMuscles")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorCervicalSpacePCS")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPseudoaneurysmICALeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPseudoaneurysmICARight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRadixLinguae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRegioParotideomasseterica")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRetropharyngealSpaceRPSAndDangerSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScalenusAnteriorMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScalenusMediusMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScalenusPosteriorMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEmphysema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStenosisICALeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStenosisICARight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSternocleidomastoideusMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSublingualSpaceSLS")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubmandibularSpaceSMS")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubmental")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuppurativeThyroiditis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTCStreakyContrastEnhancementPerifocal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTCStreakySignalEnhancementFatSaturatedT2wSequence")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTCThickeningOfTheCystWall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTongueBaseTonsil")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsToothOrBone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrachealDisplacement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTransspatialSpread")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrapeziusMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpperLip")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUvulaeMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsValleculae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVisceralSpaceVS")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVocalMuscle")
                        .HasColumnType("boolean");

                    b.Property<byte>("LNCDifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("LateralNeckCystType")
                        .HasColumnType("smallint");

                    b.Property<decimal>("LocalizationReferenceVertebra")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("LocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OrientationAxialType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PeriauricularType")
                        .HasColumnType("smallint");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<int?>("SecondPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<byte>("ShapeDifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT2w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignificantHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SizeInMm")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SoftTissuesPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("TCDifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<int?>("ThirdPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("TrachealDisplacementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("VascularNerveSheathType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ImageFileId");

                    b.HasIndex("SoftTissuesPageId");

                    b.ToTable("SoftTissuesFindings");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.SoftTissuesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SoftTissuesPages");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.SummaryPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("BiopsyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DynamicsOfFindingsType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBiopsy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneScintigraphy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBrainMri")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCct")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContrastEnhancedMriNeck")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCtAngiographyExtracranial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCtAngiographyIntracranial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCtNeck")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCtPetrousBone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCtThorax")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDentalCtDvt")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEvaluationInInterdisciplinaryTumorBoard")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMrAngiographyExtracranial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMrAngiographyIntracranial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMriCervicalSpine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOrbitaMri")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParanasalSinusCt")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPetCt")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpectCt")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemporomandibularJointsMri")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTofMrAngiography")
                        .HasColumnType("boolean");

                    b.Property<byte>("MRIFollowUpType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SummaryPages");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.TNMClassification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ClassificationType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT0")
                        .HasColumnType("boolean");

                    b.Property<byte>("MStageType")
                        .HasColumnType("smallint");

                    b.Property<byte>("NStageHPVMinusType")
                        .HasColumnType("smallint");

                    b.Property<byte>("NStageHPVPlusType")
                        .HasColumnType("smallint");

                    b.Property<byte>("NStageType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ParentNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ScopeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SummaryPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("TStageType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("SummaryPageId");

                    b.ToTable("TNMClassification");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.TechnologyPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BarcodeCMCharge")
                        .HasColumnType("text");

                    b.Property<byte>("CMReinforcedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastMediumType")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("ContrastQuantity")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCMSideEffect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCortisoneIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH1BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH2BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntravenous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetalArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMotion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotFurtherSpecified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsO2Administration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOther")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneousEpinephrine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSusceptibilityArtifacts")
                        .HasColumnType("boolean");

                    b.Property<byte>("MagneticFieldStrengthType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SequencesType")
                        .HasColumnType("smallint");

                    b.Property<string>("SetName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("TechnologyPages");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.ThyroidFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AbnormalitiesNormVariantsThyroidType")
                        .HasColumnType("smallint");

                    b.Property<int?>("AbscessInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("AutomaticCalculationInMl")
                        .HasColumnType("integer");

                    b.Property<byte>("CmHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ComplicationsType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ConcrementInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("ContrastEnhancementDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<int?>("Coronal")
                        .HasColumnType("integer");

                    b.Property<byte>("DifferentialDiagnosisType1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosisType2")
                        .HasColumnType("smallint");

                    b.Property<int?>("DilatedDuctusInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpansionInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GrowthType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnteriorCranialFossa")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAtrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBones")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCarotidSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConcrement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCutis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCyst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffusionRestriction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDilatedDuctus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDisplacement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDuctalCompression")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDuctalStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDystrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdematousSwelling")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEsophagus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExtensionIntoCervicalFascialSpaces")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFattyDegeneration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFibrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraglandularLymphNode")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIsthmus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLarynx")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftLobe")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMandible")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMastricatorSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMaxilla")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMiddleCranialFossa")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLesionOfTheSameEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMultinodular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMultiple")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMusclesOfMastication")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMyositis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecroses")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrotic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNoThyroidTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNodusSolitary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParapharyngealSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParotidSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerineuralInvasion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPhlegmon")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPostCervicalSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrevertebralFascia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRecurrentLaryngealNerve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightLobe")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSignalVoids")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSolitary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSublingualSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubmandibularSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrachea")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrachealCompression")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTranscapsular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTransspatialSpread")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpperMediastinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVascularCompressionLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVascularCompressionRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVascularNerveSheathLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVascularNerveSheathRight")
                        .HasColumnType("boolean");

                    b.Property<byte>("LocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MeasurementInMl")
                        .HasColumnType("integer");

                    b.Property<byte>("MeasurementType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MinInnerDiameterAxialInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<byte>("RelationToThyroidGlandType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SagittalInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("SecondPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SizeInMm")
                        .HasColumnType("integer");

                    b.Property<float?>("SizeLeftLobeInMm")
                        .HasColumnType("real");

                    b.Property<float?>("SizeLeftLobeSecondPlaneInMm")
                        .HasColumnType("real");

                    b.Property<float?>("SizeLeftLobeThirdPlaneInMm")
                        .HasColumnType("real");

                    b.Property<float?>("SizeRightLobeInMm")
                        .HasColumnType("real");

                    b.Property<float?>("SizeRightLobeSecondPlaneInMm")
                        .HasColumnType("real");

                    b.Property<float?>("SizeRightLobeThirdPlaneInMm")
                        .HasColumnType("real");

                    b.Property<byte>("T1wSignalType")
                        .HasColumnType("smallint");

                    b.Property<byte>("T2wSignalType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TherapyType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ThirdPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ThyroidPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("ThyroidectomySideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ThyroidectomyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TotalVolumeType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ImageFileId")
                        .IsUnique();

                    b.HasIndex("ThyroidPageId");

                    b.ToTable("ThyroidFindings");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.ThyroidPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ThyroidPages");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.VesselsFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AffectedBranchType")
                        .HasColumnType("smallint");

                    b.Property<int?>("AneurysmExtentInMm")
                        .HasColumnType("integer");

                    b.Property<int>("ArteriesSegmentType")
                        .HasColumnType("integer");

                    b.Property<byte>("ArteriovenousMalformationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ArteryLocalisationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CerebralVeinsPathologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CharacterizationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DegreeOfStenosisInPercent")
                        .HasColumnType("integer");

                    b.Property<byte>("DetailsVascularMalformationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DiameterDiseaseFreePoststenoticSegmentInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("DiameterStenosisInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("DifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DissectionExtentInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("ExtentType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsBranchesOfTheExternalCarotidArteryToTheOphthalmicArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCavernousSinusLeftPart")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCavernousSinusRightPart")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCerebralEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCircleOfWillis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCollateralization")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConfluensOfSinuses")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContralateralAci")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContrastEnhancementOfTheVesselWall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDistalSegment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemodynamicallyRelevant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInferiorSagittalSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntermediateSegment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIrregularVesselCaliber")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftPetrosalSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftSigmoidSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftTransverseSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeptomeningealTranscortical")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLongDistance")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPanarteritisNodosa")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorCommunicansArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPreStenoticDilatation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProximalSegment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightPetrosalSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightSigmoidSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightTransverseSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShortLength")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStraightSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubarachnoidHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubclavianStealSyndrome")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperiorSagittalSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2WHyperintensityOfTheVesselWallEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThrombusSurroundedByContrastAgent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsV1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsV2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsV3")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsV4")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVMagnaCerebri")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsViaContralateralVertebralArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsViaOphtalmicArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWallHematomaHyperintenseInUnenhancedT1W")
                        .HasColumnType("boolean");

                    b.Property<int?>("LengthInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<int?>("StenosisOcclusionExtentInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("SubarachnoidHemorrhageType")
                        .HasColumnType("smallint");

                    b.Property<byte>("VeinsCharacterizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("VeinsPathologyType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("VesselsPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VesselsPageId");

                    b.ToTable("VesselsFindings");
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.VesselsPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("VesselsPages");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("Pages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("ReportResults")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.HasOne("RadioReport.NeckMRT.Domain.Models.ExaminationPage", null)
                        .WithOne("PatientInformation")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", null)
                        .WithOne("Session")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", "ReportSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.BonesFinding", b =>
                {
                    b.HasOne("RadioReport.NeckMRT.Domain.Models.BonesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("BonesPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.BonesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.CMSideEffect", b =>
                {
                    b.HasOne("RadioReport.NeckMRT.Domain.Models.TechnologyPage", null)
                        .WithMany("CMSideEffects")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.ExaminationPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.Indication", b =>
                {
                    b.HasOne("RadioReport.NeckMRT.Domain.Models.IndicationPage", null)
                        .WithMany("Indications")
                        .HasForeignKey("IndicationPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.IndicationPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.LarynxFinding", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "UploadedImageFile")
                        .WithOne()
                        .HasForeignKey("RadioReport.NeckMRT.Domain.Models.LarynxFinding", "ImageFileId");

                    b.HasOne("RadioReport.NeckMRT.Domain.Models.LarynxPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("LarynxPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.LarynxPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.LymphNodesFinding", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "UploadedImageFile")
                        .WithOne()
                        .HasForeignKey("RadioReport.NeckMRT.Domain.Models.LymphNodesFinding", "ImageFileId");

                    b.HasOne("RadioReport.NeckMRT.Domain.Models.LymphNodesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("LymphNodesPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.LymphNodesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.PharynxFinding", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "UploadedImageFile")
                        .WithOne()
                        .HasForeignKey("RadioReport.NeckMRT.Domain.Models.PharynxFinding", "ImageFileId");

                    b.HasOne("RadioReport.NeckMRT.Domain.Models.PharynxPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("PharynxPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.PharynxPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.PreviousTherapy", b =>
                {
                    b.HasOne("RadioReport.NeckMRT.Domain.Models.IndicationPage", null)
                        .WithMany("PreviousTherapies")
                        .HasForeignKey("IndicationPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.Sequence", b =>
                {
                    b.HasOne("RadioReport.NeckMRT.Domain.Models.TechnologyPage", null)
                        .WithMany("Sequences")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.SoftTissuesFinding", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "UploadedImageFile")
                        .WithMany()
                        .HasForeignKey("ImageFileId");

                    b.HasOne("RadioReport.NeckMRT.Domain.Models.SoftTissuesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("SoftTissuesPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.SoftTissuesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.SummaryPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.TNMClassification", b =>
                {
                    b.HasOne("RadioReport.NeckMRT.Domain.Models.SummaryPage", null)
                        .WithMany("TNMClassifications")
                        .HasForeignKey("SummaryPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.TechnologyPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.ThyroidFinding", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "UploadedImageFile")
                        .WithOne()
                        .HasForeignKey("RadioReport.NeckMRT.Domain.Models.ThyroidFinding", "ImageFileId");

                    b.HasOne("RadioReport.NeckMRT.Domain.Models.ThyroidPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("ThyroidPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.ThyroidPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.VesselsFinding", b =>
                {
                    b.HasOne("RadioReport.NeckMRT.Domain.Models.VesselsPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("VesselsPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.NeckMRT.Domain.Models.VesselsPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
