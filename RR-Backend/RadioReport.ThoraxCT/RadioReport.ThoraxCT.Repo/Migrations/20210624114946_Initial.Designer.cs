// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RadioReport.ThoraxCT.Repo;

namespace RadioReport.ThoraxCT.Repo.Migrations
{
    [DbContext(typeof(ThoraxCTDbContext))]
    [Migration("20210624114946_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PageNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("WasModified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("PageInfos");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessionNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Evaluation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExaminationType")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("FindingsDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FreeField")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("LicenseFractionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LicensingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("PatientAge")
                        .HasColumnType("smallint");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PresetCode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StudyInstanceUID")
                        .HasColumnType("text");

                    b.Property<byte>("TotalPageCount")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Approved")
                        .HasColumnType("text");

                    b.Property<string>("Discussion")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsICD10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferenceImage")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReportSummary")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportResults");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ReportSession");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ObjectName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ImageFiles");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<byte?>("Age")
                        .HasColumnType("smallint");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PatientInformation");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.FindingLocalizer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mapping")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FindingLocalizers");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("BuildVersion")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Paragraphs")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportTypeName", "VersionName")
                        .IsUnique();

                    b.ToTable("ReportSchemas");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ReportSchemaId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportSchemaId")
                        .IsUnique();

                    b.ToTable("ReportSchemaSessions");
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.Acquisition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AcquisitionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("BreathingProtocolType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsArterial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArterialEarly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArterialLate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsECGGating")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNative")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPulmonaryArterialPhase")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVenous")
                        .HasColumnType("boolean");

                    b.Property<float?>("LateDelayInMin")
                        .HasColumnType("real");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<int?>("NumberOfLines")
                        .HasColumnType("integer");

                    b.Property<byte>("PatientPositioningType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ReferenceValueInMAs")
                        .HasColumnType("integer");

                    b.Property<float?>("SliceThicknessInMm")
                        .HasColumnType("real");

                    b.Property<byte>("TechniqueType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.Property<int?>("TubeCurrent1MAs")
                        .HasColumnType("integer");

                    b.Property<int?>("TubeCurrent2MAs")
                        .HasColumnType("integer");

                    b.Property<byte>("TubeCurrentModulationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("TubeVoltage1KV")
                        .HasColumnType("integer");

                    b.Property<int?>("TubeVoltage2KV")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("Acquisitions");
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.AnamnesisFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnamnesisPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAfterPartialLungResectionLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAfterPartialLungResectionRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAorticValveTAVI")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCoronary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThoracicAortaTEVAR")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<int?>("PackYears")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesisPageId");

                    b.ToTable("AnamnesisFindings");
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.AnamnesisPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AgeOfTestInDays")
                        .HasColumnType("integer");

                    b.Property<byte?>("CTPreliminaryExaminationMonth")
                        .HasColumnType("smallint");

                    b.Property<int?>("CTPreliminaryExaminationYear")
                        .HasColumnType("integer");

                    b.Property<byte>("IndicationType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTPreliminaryExamination")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRIPreliminaryExamination")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspected")
                        .HasColumnType("boolean");

                    b.Property<byte?>("MRIPreliminaryExaminationMonth")
                        .HasColumnType("smallint");

                    b.Property<int?>("MRIPreliminaryExaminationYear")
                        .HasColumnType("integer");

                    b.Property<byte>("PCRTestForSARSCoV2Type")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("AnamnesisPages");
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.BonesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AdjacentSclerosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("AnteriorEndSegmentType")
                        .HasColumnType("smallint");

                    b.Property<byte>("BodySternumType")
                        .HasColumnType("smallint");

                    b.Property<byte>("BodyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("BonesDifferentialDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("BonesDifferentialDiagnosis2")
                        .HasColumnType("smallint");

                    b.Property<byte>("BonesDifferentialDiagnosis3")
                        .HasColumnType("smallint");

                    b.Property<byte>("BonesDifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("BonesPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("CalcificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClaviculaeFractureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CompressionInjuryType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CorticalBoneType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DensityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DiaphysealSegmentClaviculaeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureOfSpineType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GlenoidFossaType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAOClassification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAcute")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdjacentSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneApposition")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCodmanTriangle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCorpus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCystic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDestructionOfEndPlate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdgrenVainoSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEndplateHerniation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExpansion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatty")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFractureOlderRemodeled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGeographic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGroundGlassAspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationOfAdjacentSoftTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInvolvingOfThePosteriorWall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLamination")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiquidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsManubrium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOlderRemodeled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoblastic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoproliferativeReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPathologicalFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPedunculatedGrowingFromTheEpiphysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPermeativeGrowth")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPunctiformHyperintens")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRemodelling")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRockwood")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSchmorlNodes")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScleroticBorder")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpiculated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSunburst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTossy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVertebralHemangioma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsXiphoidProcess")
                        .HasColumnType("boolean");

                    b.Property<byte>("LateralEndSegmentClaviculaeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ManubriumType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MatrixType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MedialEndSegmentClaviculaeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("NotFurtherDefinedClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PeriostealReactionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PosteriorSegmentType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ProcessType")
                        .HasColumnType("smallint");

                    b.Property<byte>("RibFractureType")
                        .HasColumnType("smallint");

                    b.Property<long>("RibLocation")
                        .HasColumnType("bigint");

                    b.Property<byte>("RockwoodType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ScapulaFractureType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SecondPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("ShankType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SizeInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("SternumFractureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TensionBandInjuryType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ThirdPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("TossyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("VertebralBodyLocalization")
                        .HasColumnType("smallint");

                    b.Property<long>("VertebralColumnLocalization")
                        .HasColumnType("bigint");

                    b.Property<byte>("XiphoidType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BonesPageId");

                    b.ToTable("BonesFindings");
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.BonesFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AdjacentSclerosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("BonesDifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CalcificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CorticalBoneType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DensityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAdjacentSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneApposition")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCodmanTriangle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCystic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDestructionOfEndPlate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdgrenVainoSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExpansion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatty")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGeographic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGroundGlassAspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationOfAdjacentSoftTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiquidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoblastic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoproliferativeReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPedunculatedGrowingFromTheEpiphysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPunctiformHyperintens")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRemodelling")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScleroticBorder")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpiculated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSunburst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVertebralHemangioma")
                        .HasColumnType("boolean");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MatrixType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PeriostealReactionType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("BonesFindingPresets");
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.BonesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("BonesPages");
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.CMSideEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMSideEffectType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DurationAdverseReactionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCompletelyDeclining")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeriousAdverseEvent")
                        .HasColumnType("boolean");

                    b.Property<int?>("MinAfterCMinjection")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("CMSideEffects");
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.LungInterstitiumFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("BronchiectasisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CystType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CystWallType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DiameterLargestBullaInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("DistributionSecondaryPulmonaryLobuleType")
                        .HasColumnType("smallint");

                    b.Property<byte>("EmphysemaType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsArchitecturalDistortion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBronchialWallThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBronchiectasis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBronchiolectasis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConfluentEmphysema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConfluentGranulomasSarcoidGalaxy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConsolidation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCrazyPavingPattern")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCurvilinearOpacification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDarkBronchusSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGroundGlassNodules")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGroundGlassOpacity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInterlobularSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntralobularSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLinearPattern")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMacronodular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMicronodular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMicronodulesClusters")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMosaicPattern")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMucoidImpaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPleuralThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPositiveBronchopneumogram")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPseudoplaque")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReticularPattern")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReversedHaloSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSignetRingSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTractionBronchiectasis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTractionBronchiolectasis")
                        .HasColumnType("boolean");

                    b.Property<byte>("LocalizationLevel")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("LungInterstitiumPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("LungsFlapsLocation1")
                        .HasColumnType("smallint");

                    b.Property<byte>("LungsFlapsLocation2")
                        .HasColumnType("smallint");

                    b.Property<long>("LungsSegmentsLocation")
                        .HasColumnType("bigint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MosaicIntensityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MosaicPatternType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<byte>("QuantityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("RandomDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("RatioReticularChangesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ReducedParenchymaDensityPatternType")
                        .HasColumnType("smallint");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<byte>("StructureType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ImageFileId")
                        .IsUnique();

                    b.HasIndex("LungInterstitiumPageId");

                    b.ToTable("LungInterstitiumFindings");
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.LungInterstitiumFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("BronchiectasisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("DistributionSecondaryPulmonaryLobuleType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsBronchialWallThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBronchiectasis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBronchiolectasis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConsolidation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCrazyPavingPattern")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGroundGlassOpacity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInterlobularSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntralobularSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMicronodular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMucoidImpaction")
                        .HasColumnType("boolean");

                    b.Property<byte>("LocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("RandomDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("StructureType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("LungInterstitiumFindingPresets");
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.LungInterstitiumPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<byte>("AsymmetricalType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CauseType1")
                        .HasColumnType("smallint");

                    b.Property<byte>("CauseType2")
                        .HasColumnType("smallint");

                    b.Property<byte>("CauseType3")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationType1")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationType2")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationType3")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis2")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis3")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosisDetailsType1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosisDetailsType2")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosisDetailsType3")
                        .HasColumnType("smallint");

                    b.Property<byte>("DominantPatternType")
                        .HasColumnType("smallint");

                    b.Property<byte>("IIPHRCTPatternType1")
                        .HasColumnType("smallint");

                    b.Property<byte>("IIPHRCTPatternType2")
                        .HasColumnType("smallint");

                    b.Property<byte>("IIPHRCTPatternType3")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBronchiolitisObliterans")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspected")
                        .HasColumnType("boolean");

                    b.Property<byte>("LocalizationAxialType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationCraniocaudalType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LungsFlapsLocation")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SarcoidosisType1")
                        .HasColumnType("smallint");

                    b.Property<byte>("SarcoidosisType2")
                        .HasColumnType("smallint");

                    b.Property<byte>("SarcoidosisType3")
                        .HasColumnType("smallint");

                    b.Property<byte>("SideComparisonType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("LungInterstitiumPages");
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.LungParenchymaFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AccompanyingEffusionMaxWidthInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("AverageDensityInHU")
                        .HasColumnType("integer");

                    b.Property<byte>("CalcificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ConsolidationLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DensityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis01")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis02")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis03")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosisLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosisLungsFlapsLocation")
                        .HasColumnType("smallint");

                    b.Property<long>("DifferentialDiagnosisLungsSegmentsLocation")
                        .HasColumnType("bigint");

                    b.Property<int?>("DistanceToInterlobularSeptumInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GroundGlassOpacityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HistologyKnownType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAPulmonalis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAPulmonalisLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAPulmonalisRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsASubclavia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsASubclaviaLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsASubclaviaRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAbsentBronchopneumogram")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAccompanyingEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssociatedAtelectasis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBifurcation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBubblyConsolidation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCavitation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCentralNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsClavicule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConfluent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCoronaRadiataOrSpiculae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCrazyPavingPattern")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDarkBronchusSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDrecreased")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEccentricNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGeographicAppearance")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGroundGlassOpacity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHaloSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologyKnown")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInterlobularSeptalThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLuftsichelSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMainBronchus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMainBronchusLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMainBronchusRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLesionSamePathology")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMosaicPattern")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeribronchovascular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPericardium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPleura")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPleuralFinger")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPlexusBrachialis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPlexusBrachialisLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPlexusBrachialisRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPlexusCervicalis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPlexusCervicalisLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPlexusCervicalisRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPneumatocele")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPositiveBronchopneumogram")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReversedHaloSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRib")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRiglerNotchSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRoundedShape")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSternum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrachea")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVSubclavia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVSubclaviaLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVSubclaviaRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVertebralBody")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVvPulmonary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVvPulmonaryLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVvPulmonaryRight")
                        .HasColumnType("boolean");

                    b.Property<byte>("LocalizationAxialType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationDetailsType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("LungParenchymaPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("LungSectionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MainCharacteristicsDifferentialDiagnosis01")
                        .HasColumnType("smallint");

                    b.Property<byte>("MainCharacteristicsLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MainCharacteristicsLungsFlapsLocation")
                        .HasColumnType("smallint");

                    b.Property<long>("MainCharacteristicsLungsSegmentsLocation")
                        .HasColumnType("bigint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MeasuredValuesMaxDiameterAxialInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MeasuredValuesVolumeInMm3")
                        .HasColumnType("integer");

                    b.Property<byte>("MorphologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PeculiaritySegmentatelectasisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PerifissuralNodulusType")
                        .HasColumnType("smallint");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<byte>("PulmonaryInfarctionType")
                        .HasColumnType("smallint");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SubsolidType")
                        .HasColumnType("smallint");

                    b.Property<byte>("WellDefinedType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ImageFileId")
                        .IsUnique();

                    b.HasIndex("LungParenchymaPageId");

                    b.ToTable("LungParenchymaFindings");
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.LungParenchymaFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CalcificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ConsolidationLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DensityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GroundGlassOpacityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAccompanyingEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssociatedAtelectasis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCavitation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConfluent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCoronaRadiataOrSpiculae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCrazyPavingPattern")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDarkBronchusSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEccentricNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGeographicAppearance")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGroundGlassOpacity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHaloSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInterlobularSeptalThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLuftsichelSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeribronchovascular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPleuralFinger")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPositiveBronchopneumogram")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReversedHaloSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRoundedShape")
                        .HasColumnType("boolean");

                    b.Property<byte>("LocalizationAxialType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationDetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MainCharacteristicsDifferentialDiagnosis01")
                        .HasColumnType("smallint");

                    b.Property<byte>("MainCharacteristicsLungsFlapsLocation")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MorphologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("SubsolidType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("LungParenchymaFindingPresets");
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.LungParenchymaPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("LungParenchymaPages");
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.MediastinumFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AorticNodesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CalcificationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("CaudalExtensionInMmDiagnosis01")
                        .HasColumnType("integer");

                    b.Property<int?>("CaudalExtensionInMmDiagnosis02")
                        .HasColumnType("integer");

                    b.Property<int?>("CaudalExtensionInMmDiagnosis03")
                        .HasColumnType("integer");

                    b.Property<byte>("ChronicThromboembolicType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CurvatureOfInterventricularSeptumType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DensityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DetailsPulmonaryHypertensionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis01")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis02")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis03")
                        .HasColumnType("smallint");

                    b.Property<byte>("DirectionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("EffusionWidthMaxInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("EnlargedLymphNodesCalcificationMaxDiameterSADInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("EnlargedLymphNodesMaxDiameterSADInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("EsuphagusType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ExtentSecondPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("ExtentSizeInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("ExtentThirdPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GrowthPatternsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HeightInRelationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HilarLobarNodesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("InferiorMediastinalNodesType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAnteriorMediastinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAortaAscendens")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAortaDescendens")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAorticArch")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAorticRoot")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBones")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCollateralFlow")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContinuous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCoronarySclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCrumbsBiscuitSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFibrousSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntravascularLigamentsAndNets")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLAD")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLCX")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLMA")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAtriumEnlargement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftEnlargementOfTheVentricle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftMyocardialThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLingula")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiquidFatMirror")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocoregionalOsteolysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLowerLobeLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLowerLobeRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLowerMediastinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMass")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMiddleLobe")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMiddleMediastinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMosaicPerfusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecroses")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPericarditisConstrictiva")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPericardium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPleura")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPneumopericardium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPoloMintSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorMediastinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPoststenoticDilatation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPouchDefect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPreservedFattyHilum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPressureErosionRib")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRCA")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferenceLesionAccToRECIST")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRemodeling")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAtriumEnlargement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightEnlargementOfTheVentricle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightMyocardialThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScaloppingDilutedPedicle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStrictures")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuddenChangeOfDiameter")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThrombus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsToothBoneSystem")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTracheomalaciaCollapseInExpiration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpperLobeLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpperLobeRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpperMediastinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpsideDownStomach")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVascularDilatation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVasosclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVenousContrastAgentReflux")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWidenedNeuroforamen")
                        .HasColumnType("boolean");

                    b.Property<byte>("LimitationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationWithinVesselType")
                        .HasColumnType("smallint");

                    b.Property<long>("LungsLocation")
                        .HasColumnType("bigint");

                    b.Property<byte>("LymphNodeStationsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LymphNodesLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LymphNodesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MainCharacteristicsDifferentialDiagnosis01")
                        .HasColumnType("smallint");

                    b.Property<byte>("MassDetailsDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MassDetailsMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MassDiameterMaxInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaximumCraniocaudalExtensionInMm")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MediastinumPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("MediastinumType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MinDiameterAxial")
                        .HasColumnType("integer");

                    b.Property<int?>("MinDiameterCraniocaudal")
                        .HasColumnType("integer");

                    b.Property<byte>("NoCMEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("ParatrachealNodesType")
                        .HasColumnType("smallint");

                    b.Property<float?>("QuantitativePAAADiameterQuotient")
                        .HasColumnType("real");

                    b.Property<float?>("QuantitativeRVLVDiameterQuotient")
                        .HasColumnType("real");

                    b.Property<float?>("QuantitativeRVLVVolumeQuotient")
                        .HasColumnType("real");

                    b.Property<int?>("QuantitativeWideCentralPulmonaryArteryInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("RightHeartStrainType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SizeDiameterMaxInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("SpaceClaimMaxWallThicknessInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("TopMediastinalNodesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TracheaShiftType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TracheaType")
                        .HasColumnType("smallint");

                    b.Property<byte>("VascularExtentType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("MediastinumPageId");

                    b.ToTable("MediastinumFindings");
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.MediastinumFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CalcificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DensityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GrowthPatternsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAnteriorMediastinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFibrousSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiquidFatMirror")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLowerMediastinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMiddleMediastinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecroses")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorMediastinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsToothBoneSystem")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpperMediastinum")
                        .HasColumnType("boolean");

                    b.Property<byte>("LimitationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MainCharacteristicsDifferentialDiagnosis01")
                        .HasColumnType("smallint");

                    b.Property<byte>("NoCMEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("MediastinumFindingPresets");
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.MediastinumPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("MediastinumPages");
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.Reconstruction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AcquisitionId")
                        .HasColumnType("uuid");

                    b.Property<int?>("DoseLengthProductMGycm")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTAngiography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLungs")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMIP")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMPR")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMinIP")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissues")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVRT")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("ReconstructionType")
                        .HasColumnType("smallint");

                    b.Property<float?>("SliceThicknessST1Mm")
                        .HasColumnType("real");

                    b.Property<float?>("SliceThicknessST2Mm")
                        .HasColumnType("real");

                    b.Property<float?>("SliceThicknessST3Mm")
                        .HasColumnType("real");

                    b.Property<float?>("SliceThicknessST4Mm")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AcquisitionId");

                    b.ToTable("Reconstructions");
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.SoftPartsFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AbdomenClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("AbdomenLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("AverageDensityInHU")
                        .HasColumnType("integer");

                    b.Property<byte>("BlurredSiteType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CMEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CalcificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ChestWallAngleType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DensityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DiameterSADInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis01")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis02")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis03")
                        .HasColumnType("smallint");

                    b.Property<byte>("DiffuseLesionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DisplacementOfFatTissueType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DistributionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ExpansionMaxWidthInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("ExtensionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<int?>("FocalLiverLesionMaxDiameterAxialInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("FocalPancreaticLesionMaxDiameterAxialInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GradingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GrowthPatternsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HeterogeneousType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAblatioLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAblatioRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAccumulationDuctusWirsungianus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnterior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAtelectasis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBlurred")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBones")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBreastAugmentationLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBreastAugmentationRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCMEnrichingCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCholecystolithiasis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCircumferentialSoftTissueAugmentation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCircumferentialSoftTissueAugmentationLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCircumferentialSoftTissueAugmentationRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCloakPleuralEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCoagulum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCutisThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysticChanges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffuseLiverLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffusePancreaticLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnlargedAbdominalLymphNodes")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExtrapleuralFatSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFattyAtrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFissural")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFocalLiverLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFocalPancreaticLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGasInclusions")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationChestWall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationOfExtrapleuralFatTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsKidney")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsKidneyFocalLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftLevel1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftLevel2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftLevel3")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocoregionalOsteolysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLungs")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLymphNodeLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLymphNodeRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMassAdrenalGland")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMassAdrenalGlandLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMassAdrenalGlandRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMediastinal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMediastinalshift")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMediastinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecroses")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNodularConfiguration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsObtusedAngulationOfCostophrenicAngle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPathological")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPathologicalConglomerate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPathologicalHiatusHernia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPathologicalMultiple")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPericardium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPleura")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosterior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPressureErosionRib")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightLevel1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightLevel2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightLevel3")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSedimentation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSplenomegaly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSplitPleuraSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStove")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickened")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUrinaryRetention")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUrinaryRetentionLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUrinaryRetentionRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWallThickeningOfTheGallBladder")
                        .HasColumnType("boolean");

                    b.Property<int?>("KidneyFocalLesionMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("LeftMarginalShortAxisDiameter")
                        .HasColumnType("integer");

                    b.Property<byte>("LimitationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationAxialType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationCraniocaudalType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LossOfVolumeSiteType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LymphNodesAxillaryType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MassAdrenalGlandClassificationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MassAdrenalGlandMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("MediastinalshiftType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PleuralMassType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PleuralThickeningLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PneumothoraxType")
                        .HasColumnType("smallint");

                    b.Property<byte>("QualityType")
                        .HasColumnType("smallint");

                    b.Property<int?>("RightMarginalShortAxisDiameter")
                        .HasColumnType("integer");

                    b.Property<int?>("SecondPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("SiteMaxWidthInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("SiteType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SizeMaxWidthInMm")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SoftPartsPageId")
                        .HasColumnType("uuid");

                    b.Property<int>("SpineLocation")
                        .HasColumnType("integer");

                    b.Property<int>("StoveBreastLocation")
                        .HasColumnType("integer");

                    b.Property<int?>("StoveMaxDiameterAxialInMm")
                        .HasColumnType("integer");

                    b.Property<int>("ThickenedCutisBreastLocation")
                        .HasColumnType("integer");

                    b.Property<int?>("ThirdPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("VolumeType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("SoftPartsPageId");

                    b.ToTable("SoftPartsFindings");
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.SoftPartsFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CalcificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DensityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("DisplacementOfFatTissueType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GrowthPatternsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HeterogeneousType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysticChanges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExtrapleuralFatSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationChestWall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationOfExtrapleuralFatTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepta")
                        .HasColumnType("boolean");

                    b.Property<byte>("LocalizationAxialType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("SoftPartsFindingPresets");
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.SoftPartsPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SoftPartsPages");
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.StudyAreaPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("StudyAreaPages");
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.SummaryPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("BiopsyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("COVID19CTGroupsType")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("CancerProbability")
                        .HasColumnType("numeric");

                    b.Property<byte>("CtFollowUpType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DynamicFindingsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("EvaluationInterdisciplinaryBoardType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneScan")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCOVID19CTGroups")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTAbdomen")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTAngiography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTFollowUp")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTNeck")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTPA")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCardiacDiagnostics")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsComplementaryExamination")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDynamicFindings")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEvaluationOfInterdisciplinaryBoard")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLungRADS")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRIAbdomen")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRIChest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRINeck")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRIThoracicSpine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMammographyAndBreastUltrasound")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPETCT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProcedure")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRecommendedBiopsy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRiskCalculator")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSPECT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTNStaging")
                        .HasColumnType("boolean");

                    b.Property<byte>("NStagingLevelType")
                        .HasColumnType("smallint");

                    b.Property<int?>("NumberOfRoundHearths")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("ScenarioType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TNStagingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TStagingLevelType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SummaryPages");
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.TechnologyPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BarcodeCMCharge")
                        .HasColumnType("text");

                    b.Property<byte>("CMReinforcedType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ContrastVolumeInMl")
                        .HasColumnType("integer");

                    b.Property<byte>("IodineConcentrationType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCMSideEffect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCortisoneIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH1BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH2BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetalArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMotion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotFurtherSpecified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsO2Administration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOther")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPulsationArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRespiratoryArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneousEpinephrine")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SequencesType")
                        .HasColumnType("smallint");

                    b.Property<string>("SetName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("TechnologyPages");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("Pages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("ReportResults")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.HasOne("RadioReport.ThoraxCT.Domain.Models.StudyAreaPage", null)
                        .WithOne("PatientInformation")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", null)
                        .WithOne("Session")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", "ReportSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.Acquisition", b =>
                {
                    b.HasOne("RadioReport.ThoraxCT.Domain.Models.TechnologyPage", null)
                        .WithMany("Acquisitions")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.AnamnesisFinding", b =>
                {
                    b.HasOne("RadioReport.ThoraxCT.Domain.Models.AnamnesisPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("AnamnesisPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.AnamnesisPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.BonesFinding", b =>
                {
                    b.HasOne("RadioReport.ThoraxCT.Domain.Models.BonesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("BonesPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.BonesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.CMSideEffect", b =>
                {
                    b.HasOne("RadioReport.ThoraxCT.Domain.Models.TechnologyPage", null)
                        .WithMany("CMSideEffects")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.LungInterstitiumFinding", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "UploadedImageFile")
                        .WithOne()
                        .HasForeignKey("RadioReport.ThoraxCT.Domain.Models.LungInterstitiumFinding", "ImageFileId");

                    b.HasOne("RadioReport.ThoraxCT.Domain.Models.LungInterstitiumPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("LungInterstitiumPageId");
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.LungInterstitiumPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.LungParenchymaFinding", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "UploadedImageFile")
                        .WithOne()
                        .HasForeignKey("RadioReport.ThoraxCT.Domain.Models.LungParenchymaFinding", "ImageFileId");

                    b.HasOne("RadioReport.ThoraxCT.Domain.Models.LungParenchymaPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("LungParenchymaPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.LungParenchymaPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.MediastinumFinding", b =>
                {
                    b.HasOne("RadioReport.ThoraxCT.Domain.Models.MediastinumPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("MediastinumPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.MediastinumPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.Reconstruction", b =>
                {
                    b.HasOne("RadioReport.ThoraxCT.Domain.Models.Acquisition", null)
                        .WithMany("Reconstructions")
                        .HasForeignKey("AcquisitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.SoftPartsFinding", b =>
                {
                    b.HasOne("RadioReport.ThoraxCT.Domain.Models.SoftPartsPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("SoftPartsPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.SoftPartsPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.StudyAreaPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.SummaryPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ThoraxCT.Domain.Models.TechnologyPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
