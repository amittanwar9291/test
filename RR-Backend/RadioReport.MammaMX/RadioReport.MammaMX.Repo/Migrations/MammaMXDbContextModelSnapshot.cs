// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RadioReport.MammaMX.Repo;

namespace RadioReport.MammaMX.Repo.Migrations
{
    [DbContext(typeof(MammaMXDbContext))]
    partial class MammaMXDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PageNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("WasModified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("PageInfos");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessionNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Evaluation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExaminationType")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("FindingsDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FreeField")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("LicenseFractionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LicensingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("PatientAge")
                        .HasColumnType("smallint");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PresetCode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StudyInstanceUID")
                        .HasColumnType("text");

                    b.Property<byte>("TotalPageCount")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Approved")
                        .HasColumnType("text");

                    b.Property<string>("Discussion")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsICD10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferenceImage")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReportSummary")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportResults");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ReportSession");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ObjectName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ImageFiles");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<byte?>("Age")
                        .HasColumnType("smallint");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PatientInformation");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.FindingLocalizer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mapping")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FindingLocalizers");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("BuildVersion")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Paragraphs")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportTypeName", "VersionName")
                        .IsUnique();

                    b.ToTable("ReportSchemas");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ReportSchemaId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportSchemaId")
                        .IsUnique();

                    b.ToTable("ReportSchemaSessions");
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.FindingRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsNoCorrelation")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MammographyFindingId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("SummaryPageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UltrasoundFindingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MammographyFindingId")
                        .IsUnique();

                    b.HasIndex("SummaryPageId");

                    b.HasIndex("UltrasoundFindingId")
                        .IsUnique();

                    b.ToTable("FindingRelations");
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.LymphNodeDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ClassificationType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCapsularInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDisturbedInternalArchitecture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHilarObliteration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncreasedVascularization")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIrregularCorticalWidth")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLesion")
                        .HasColumnType("boolean");

                    b.Property<int?>("LongitudinalDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("ShortAxisDiameterInMm")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("LymphNodeDetails");
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.LymphNodesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRight")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LeftLymphNodeDetailsId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LymphNodesPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("RightLymphNodeDetailsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LeftLymphNodeDetailsId")
                        .IsUnique();

                    b.HasIndex("LymphNodesPageId");

                    b.HasIndex("RightLymphNodeDetailsId")
                        .IsUnique();

                    b.ToTable("LymphNodesFindings");
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.LymphNodesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("LymphNodesPages");
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.MammographyFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ArchitectureDistorsionDiagnosis1Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("ArchitectureDistorsionDiagnosis2Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("AsymmetricDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("AsymmetryType")
                        .HasColumnType("smallint");

                    b.Property<int>("BreastLocation")
                        .HasColumnType("integer");

                    b.Property<byte>("CalcificationDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CalcificationFormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CalcificationInTheLesionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DensityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DepthType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte?>("DistanceToNippleInMm")
                        .HasColumnType("smallint");

                    b.Property<byte>("DistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HistologicallySecuredType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsArchitecturalDistorsion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAsymmetry")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAsymmetryWithoutEvidenceOfSuspiciousMasses")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAxillaryLymphadenopathy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcificationInTheLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConcaveEdges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologicallyConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMixedWithFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNippleRetraction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNoCentralHyperdensity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOnlyVisibleInOne")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOverOneLesionOfTheSameEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSkinRetraction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSkinThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSurroundingBrighteningHemair")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrabecularThickening")
                        .HasColumnType("boolean");

                    b.Property<byte?>("LargestDiameterInMm")
                        .HasColumnType("smallint");

                    b.Property<byte?>("LayerRectangularInMm")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("MammographyFindingPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MassDifferentialDiagnosis1Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("MassDifferentialDiagnosis2Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("MassDifferentialDiagnosis3Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("MassKnownDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte?>("MaxExpansionInMm")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("SkinLesionDiagnosis1Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("SkinLesionDiagnosis2Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("SolitaryMammaryDiagnosis1Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("SolitaryMammaryDiagnosis2Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("MammographyFindingPageId");

                    b.ToTable("MammographyFindings");
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.MammographyFindingPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("MammographyFindingPages");
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.MammographyFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("DensityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MassKnownDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("MammographyFindingPresets");
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.MammographyParenchymaAnatomyPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<byte>("LeftParenchymaDensityBreastCompositionType")
                        .HasColumnType("smallint");

                    b.Property<int>("PectoralisMuscleLocalization")
                        .HasColumnType("integer");

                    b.Property<byte>("PectoralisMuscleType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("RightParenchymaDensityBreastCompositionType")
                        .HasColumnType("smallint");

                    b.Property<int>("SubcutaneousAdiposeTissueLocalization")
                        .HasColumnType("integer");

                    b.Property<byte>("SubcutaneousFattyTissueType")
                        .HasColumnType("smallint");

                    b.Property<int>("VolumeLocalization")
                        .HasColumnType("integer");

                    b.Property<byte>("VolumeType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("MammographyParenchymaAnatomyPages");
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.MedicalHistoryPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ArePreviousTherapies")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Calendar")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<byte>("MenstruationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("OwnFamilyAnamnesisPresent")
                        .HasColumnType("smallint");

                    b.Property<int?>("PregnanciesQuantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("MedicalHistoryPages");
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.OwnFamilyAnamnesisFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte?>("BreastCarcinomaAge")
                        .HasColumnType("smallint");

                    b.Property<byte>("BreastCarcinomaType")
                        .HasColumnType("smallint");

                    b.Property<int>("BreastLocation")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsBreastCarcinoma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOvarianCancer")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MedicalHistoryPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("MenopauseType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte?>("OvarianCancerAge")
                        .HasColumnType("smallint");

                    b.Property<byte?>("OwnAnamnesisMonth")
                        .HasColumnType("smallint");

                    b.Property<int?>("OwnAnamnesisYear")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MedicalHistoryPageId");

                    b.ToTable("OwnFamilyAnamnesisFindings");
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.PatientIndicationFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ChestPainType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAntibiosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProgressiveFinding")
                        .HasColumnType("boolean");

                    b.Property<int>("NippleDischargeLocalization")
                        .HasColumnType("integer");

                    b.Property<byte>("NippleDischargeSinceWhen")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("PatientIndicationPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientIndicationPageId");

                    b.ToTable("PatientIndicationFindings");
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.PatientIndicationPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<byte>("MXMammaType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MammasonographyDetails")
                        .HasColumnType("smallint");

                    b.Property<byte>("MammographyDetails")
                        .HasColumnType("smallint");

                    b.Property<byte>("MammographyMRTDetails")
                        .HasColumnType("smallint");

                    b.Property<byte?>("MonthOfLastMX")
                        .HasColumnType("smallint");

                    b.Property<byte?>("MonthOfLastMammography")
                        .HasColumnType("smallint");

                    b.Property<byte?>("MonthOfLastMammosonography")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WasMammasonography")
                        .HasColumnType("boolean");

                    b.Property<bool>("WasMammography")
                        .HasColumnType("boolean");

                    b.Property<int?>("YearOfLastMX")
                        .HasColumnType("integer");

                    b.Property<int?>("YearOfLastMammography")
                        .HasColumnType("integer");

                    b.Property<int?>("YearOfLastMammosonography")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("PatientIndicationPages");
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.PreviousTherapiesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BreastLocation")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LeftReconstructionLocalization")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("MedicalHistoryPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("RightReconstructionLocalization")
                        .HasColumnType("smallint");

                    b.Property<byte?>("TheraphyMonth")
                        .HasColumnType("smallint");

                    b.Property<int?>("TheraphyYear")
                        .HasColumnType("integer");

                    b.Property<byte>("TimeStatusType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("MedicalHistoryPageId");

                    b.ToTable("PreviousTherapiesFindings");
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.SummaryPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("BiopsyLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("BiopsyModalityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CourseOfDiseaseType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRI")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMammography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStereotactic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUltrasound")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVacuumPunchBiopsy")
                        .HasColumnType("boolean");

                    b.Property<byte?>("LeftBiRads")
                        .HasColumnType("smallint");

                    b.Property<byte>("LeftBiRadsLevel4Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("LeftBiRadsMulticentricType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LeftBiRadsMultifocalType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MRIDate")
                        .HasColumnType("smallint");

                    b.Property<byte>("MammographyDate")
                        .HasColumnType("smallint");

                    b.Property<byte>("MammographyStrategy")
                        .HasColumnType("smallint");

                    b.Property<byte>("ProcedureFindingType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte?>("RightBiRads")
                        .HasColumnType("smallint");

                    b.Property<byte>("RightBiRadsLevel4Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("RightBiRadsMulticentricType")
                        .HasColumnType("smallint");

                    b.Property<byte>("RightBiRadsMultifocalType")
                        .HasColumnType("smallint");

                    b.Property<byte>("UltrasoundDate")
                        .HasColumnType("smallint");

                    b.Property<byte>("UltrasoundStrategy")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SummaryPages");
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.TechnologyFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float?>("ContrastVolumeInMl")
                        .HasColumnType("real");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsContrastAgentForGalactography")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("TechnologyFindings");
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.TechnologyPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BreastLocationCC")
                        .HasColumnType("integer");

                    b.Property<int>("BreastLocationMLO")
                        .HasColumnType("integer");

                    b.Property<int>("BreastLocationSonography")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArtifact")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsColorCodedDopplerUltrasound")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsElastography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMammography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOther")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParenchymaNotCompletelyVisible")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProjectionError")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPunchBiopsyLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPunchBiopsyRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUltrasound")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUltrasoundGuidedBreastBiopsy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVeryDenseParenchyma")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("TechnologyPages");
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.UltrasoundFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CalcificationsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DeformabilityCompressionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis2")
                        .HasColumnType("smallint");

                    b.Property<int?>("DistanceToNippleInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("EchoContentType")
                        .HasColumnType("smallint");

                    b.Property<byte>("EchoPatternType")
                        .HasColumnType("smallint");

                    b.Property<byte>("EnvironmentalReactionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ExitEchodorsalSoundPatternsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HistologicallySecuredType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAngularMargins")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologicallyConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIndistinct")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMicrolobulated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPartiallyWithinTheSkin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpiculated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspectedOfDifferentialDiagnosis1")
                        .HasColumnType("boolean");

                    b.Property<int>("Location")
                        .HasColumnType("integer");

                    b.Property<byte>("MarginEchodelimitationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MovabilityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OrientationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SizeOfSecondLayerInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("SizeOfThirdLayerInMm")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UltrasoundFindingPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("VascularDrawingLesionType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("UltrasoundFindingPageId");

                    b.ToTable("UltrasoundFindings");
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.UltrasoundFindingPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("UltrasoundFindingPages");
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.UltrasoundFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("EchoContentType")
                        .HasColumnType("smallint");

                    b.Property<byte>("EnvironmentalReactionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ExitEchodorsalSoundPatternsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsPartiallyWithinTheSkin")
                        .HasColumnType("boolean");

                    b.Property<byte>("MarginEchodelimitationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("VascularDrawingLesionType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("UltrasoundFindingPresets");
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.UltrasoundMammaryGlandsPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CutisLocation")
                        .HasColumnType("integer");

                    b.Property<byte>("CutisRetractionPresence")
                        .HasColumnType("smallint");

                    b.Property<byte>("CutisType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftNipple")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightNipple")
                        .HasColumnType("boolean");

                    b.Property<int>("MPectoralisLocation")
                        .HasColumnType("integer");

                    b.Property<byte>("MPectoralisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ParenchymaDensityType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<int>("RetractionLocation")
                        .HasColumnType("integer");

                    b.Property<int>("SubcutaneousFatTissueLocation")
                        .HasColumnType("integer");

                    b.Property<byte>("SubcutaneousFatTissueType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("UltrasoundMammaryGlandsPages");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("Pages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("ReportResults")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.HasOne("RadioReport.MammaMX.Domain.Models.PatientIndicationPage", null)
                        .WithOne("PatientInformation")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", null)
                        .WithOne("Session")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", "ReportSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.FindingRelation", b =>
                {
                    b.HasOne("RadioReport.MammaMX.Domain.Models.MammographyFinding", "MammographyFinding")
                        .WithOne()
                        .HasForeignKey("RadioReport.MammaMX.Domain.Models.FindingRelation", "MammographyFindingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RadioReport.MammaMX.Domain.Models.SummaryPage", null)
                        .WithMany("FindingRelations")
                        .HasForeignKey("SummaryPageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RadioReport.MammaMX.Domain.Models.UltrasoundFinding", "UltrasoundFinding")
                        .WithOne()
                        .HasForeignKey("RadioReport.MammaMX.Domain.Models.FindingRelation", "UltrasoundFindingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.LymphNodesFinding", b =>
                {
                    b.HasOne("RadioReport.MammaMX.Domain.Models.LymphNodeDetails", "LeftLymphNodeDetails")
                        .WithOne()
                        .HasForeignKey("RadioReport.MammaMX.Domain.Models.LymphNodesFinding", "LeftLymphNodeDetailsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RadioReport.MammaMX.Domain.Models.LymphNodesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("LymphNodesPageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RadioReport.MammaMX.Domain.Models.LymphNodeDetails", "RightLymphNodeDetails")
                        .WithOne()
                        .HasForeignKey("RadioReport.MammaMX.Domain.Models.LymphNodesFinding", "RightLymphNodeDetailsId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.LymphNodesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.MammographyFinding", b =>
                {
                    b.HasOne("RadioReport.MammaMX.Domain.Models.MammographyFindingPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("MammographyFindingPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.MammographyFindingPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.MammographyParenchymaAnatomyPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.MedicalHistoryPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.OwnFamilyAnamnesisFinding", b =>
                {
                    b.HasOne("RadioReport.MammaMX.Domain.Models.MedicalHistoryPage", null)
                        .WithMany("OwnFamilyAnamnesisFindings")
                        .HasForeignKey("MedicalHistoryPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.PatientIndicationFinding", b =>
                {
                    b.HasOne("RadioReport.MammaMX.Domain.Models.PatientIndicationPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("PatientIndicationPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.PatientIndicationPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.PreviousTherapiesFinding", b =>
                {
                    b.HasOne("RadioReport.MammaMX.Domain.Models.MedicalHistoryPage", null)
                        .WithMany("PreviousTherapiesFindings")
                        .HasForeignKey("MedicalHistoryPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.SummaryPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.TechnologyFinding", b =>
                {
                    b.HasOne("RadioReport.MammaMX.Domain.Models.TechnologyPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.TechnologyPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.UltrasoundFinding", b =>
                {
                    b.HasOne("RadioReport.MammaMX.Domain.Models.UltrasoundFindingPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("UltrasoundFindingPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.UltrasoundFindingPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.MammaMX.Domain.Models.UltrasoundMammaryGlandsPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
