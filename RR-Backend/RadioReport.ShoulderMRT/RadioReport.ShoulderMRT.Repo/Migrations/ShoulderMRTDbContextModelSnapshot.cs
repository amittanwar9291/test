// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RadioReport.ShoulderMRT.Repo;

namespace RadioReport.ShoulderMRT.Repo.Migrations
{
    [DbContext(typeof(ShoulderMRTDbContext))]
    partial class ShoulderMRTDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PageNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("WasModified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("PageInfos");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessionNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Evaluation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExaminationType")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("FindingsDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FreeField")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("LicenseFractionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LicensingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("PatientAge")
                        .HasColumnType("smallint");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PresetCode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StudyInstanceUID")
                        .HasColumnType("text");

                    b.Property<byte>("TotalPageCount")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Approved")
                        .HasColumnType("text");

                    b.Property<string>("Discussion")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsICD10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferenceImage")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReportSummary")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportResults");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ReportSession");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ObjectName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ImageFiles");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<byte?>("Age")
                        .HasColumnType("smallint");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PatientInformation");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.FindingLocalizer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mapping")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FindingLocalizers");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("BuildVersion")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Paragraphs")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportTypeName", "VersionName")
                        .IsUnique();

                    b.ToTable("ReportSchemas");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ReportSchemaId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportSchemaId")
                        .IsUnique();

                    b.ToTable("ReportSchemaSessions");
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.AnamnesisPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AreOverheadSports")
                        .HasColumnType("boolean");

                    b.Property<byte>("Details")
                        .HasColumnType("smallint");

                    b.Property<byte>("Endoprosthesis")
                        .HasColumnType("smallint");

                    b.Property<byte>("Frequency")
                        .HasColumnType("smallint");

                    b.Property<byte>("Instability")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAcromioplasty")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBalloonSpacer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBicepsCaputLongum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEndoprosthesis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGlenoid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsImpingement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfraspinatus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInstability")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLabralReconstruction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizationClavicle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizationHumeralHead")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizationScapula")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLuxation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteosynthesisClavicle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteosynthesisHumeralHead")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteosynthesisScapula")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOther")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPowerSports")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProfessionalOverheadWork")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubscapularis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSupraspinatus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTeresMinor")
                        .HasColumnType("boolean");

                    b.Property<byte>("MonthOfFracture")
                        .HasColumnType("smallint");

                    b.Property<byte>("MonthOfLuxation")
                        .HasColumnType("smallint");

                    b.Property<byte>("MonthOfMRIPreliminaryExamination")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Therapy")
                        .HasColumnType("smallint");

                    b.Property<int>("YearOfFracture")
                        .HasColumnType("integer");

                    b.Property<int>("YearOfLuxation")
                        .HasColumnType("integer");

                    b.Property<int>("YearOfMRIPreliminaryExamination")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("AnamnesisPages");
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.BonesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AOClassificationAO12Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("AOClassificationFractureType")
                        .HasColumnType("smallint");

                    b.Property<byte?>("AnteroSuperiorDegrees")
                        .HasColumnType("smallint");

                    b.Property<int?>("AxialMaxInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("BoneType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("BonesPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("CMEnhancementDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CMenhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CortexType")
                        .HasColumnType("smallint");

                    b.Property<int?>("CraniocaudalInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("DegenerationExpansiveness")
                        .HasColumnType("integer");

                    b.Property<byte>("DegenerationIntensityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DegenerationJointSurfacesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DegenerationOutbridgeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis01")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis02")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis03")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FirstLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureClaviculaAoClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureClaviculaEvaluationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureHumerusAoEvaluationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureHumerusAoRatingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureHumerusClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureHumerusNeerDetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureHumerusNeerRatingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureNotSpecifiedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureScapulaAoClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureScapulaEvaluationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureSpecificType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte?>("HumerusDiameter")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAcromialEnd")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAkromion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnotherLesionSameEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBroadBased")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilageCap")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCentrally")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsClavicularBody")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDegenerationArthropathy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDegenerationChondrocalcinosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDegenerationChondropathy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDegenerationCyst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDegenerationEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDegenerationOsteophytes")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDegenerationSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffuselyDistributed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnvironmentalReactionSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExpansive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExtremitasClaviculae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFractureHumerusFragmentsHumeraHead")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFractureHumerusFragmentsHumerumShaft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFractureHumerusFragmentsMajusTubercle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFractureHumerusFragmentsTuberculumMinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGeographicConfiguration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGlenoidFossa")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGreaterTubercle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHillSachsLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHumeralHead")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHumerusIntactCortex")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHumerusSubchondral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsImpressionAnteroSuperior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsImpressionPosteroSuperior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationOfAdjacentBones")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationOfSoftTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfraspinatousFossa")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLabrumHyperintensity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralClavicle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLesserTubercle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLobulated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMarginWithLowSignalPerichondriumAboveCartilageCap")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOrientationFromTheEpiphysisTowardsTheDiaphysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoblastic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoidMatrix")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPathologicalFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerilesionalSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealReactionSunburst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealSpurCodmanSpur")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorLabrumHypertrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProcessusCoracoideus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProximalerHumerus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReverseHillSachsLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRound")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRoundedPosteriorGlenoidRim")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScapula")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScapularSpine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerotic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScleroticMargin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeptal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeptated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeverityOfGlenohumeralOsteoarthritis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStagingPathologicalFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStalked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSupraspinatousFossa")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSurroundingInflammatoryReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wHyperIntense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickenedAndEdematizedSynovialis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWithinThePrimarilyAffected")
                        .HasColumnType("boolean");

                    b.Property<byte>("LimitationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalPropagationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("NoCMEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<int?>("PlaneAxialInMm")
                        .HasColumnType("integer");

                    b.Property<byte?>("PosteroSuperiorDegrees")
                        .HasColumnType("smallint");

                    b.Property<byte>("PosttraumaticHillSachsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SecondLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<byte>("SignalT1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT2w")
                        .HasColumnType("smallint");

                    b.Property<byte>("TumorDifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BonesPageId");

                    b.HasIndex("ImageFileId")
                        .IsUnique();

                    b.ToTable("BonesFindings");
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.BonesFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMEnhancementDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CMenhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CortexType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBroadBased")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilageCap")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCentrally")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffuselyDistributed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnvironmentalReactionSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExpansive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGeographicConfiguration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationOfSoftTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLobulated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMarginWithLowSignalPerichondriumAboveCartilageCap")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOrientationFromTheEpiphysisTowardsTheDiaphysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoblastic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoidMatrix")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealReactionSunburst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealSpurCodmanSpur")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRound")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerotic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScleroticMargin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeptated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStalked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wHyperIntense")
                        .HasColumnType("boolean");

                    b.Property<byte>("LimitationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("NoCMEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("SecondLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT2w")
                        .HasColumnType("smallint");

                    b.Property<byte>("TumorDifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("BonesFindingPresets");
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.BonesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("BonesPages");
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.CMSideEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMSideEffectType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DurationAdverseReactionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCompletelyDeclining")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeriousAdverseEvent")
                        .HasColumnType("boolean");

                    b.Property<int?>("MinAfterCMinjection")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("CMSideEffects");
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.JointAndBursaeFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ArticularEffusionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<byte>("InsertionPosteriorType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsBursitisSubacromial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursitisSubdeltoide")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursitisSubscapular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdemaAroundRotatorInterval")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncreasedCAEnhancementByRotator")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncreasedCAEnhancementOfTheCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInsertionAnteriorJointCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsObliterationOfTheTriangular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPericapsularEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProliferations")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcoracoid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickeningJointCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickeningLigCoracohumeraleMoreThan3")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("JointAndBursaePageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathologyType")
                        .HasColumnType("smallint");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImageFileId")
                        .IsUnique();

                    b.HasIndex("JointAndBursaePageId");

                    b.ToTable("JointAndBursaeFindings");
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.JointAndBursaePage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("JointAndBursaePages");
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.LabrumAndRibbonsFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("CystDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Diagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("Diagnosis2")
                        .HasColumnType("smallint");

                    b.Property<int?>("DiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("DislocationDetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DislocationFromSulcusType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ExtensionLabrumPathologyDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBonyAvulsion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBufordComplex")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCystDegeneration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDislocationIntoJointSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDuplicateMGH")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExtensionToLongBicepsTendon")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIGHL")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIGHLBack")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIGHLPrevious")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncreasedSignalOnT2wOrPdAndT1w")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraArticularEntrapment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLabrumCyst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLigCoracohumerale")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLigCoracohumeraleLateral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLigCoracohumeraleMedia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLigGlenohumerale")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLigGlenohumeraleInferior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLigGlenohumeraleMedium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLigGlenohumeraleSuperior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLongitudinalSplitting")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMGHL")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMissingOrHypoPlasticMGHL")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRetractedTendonStumpBicepsAnchor")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRuptureLigCoracoacromiale")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRuptureLigCoracoclaviculare")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRuptureLigHumeriTransversum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRuptureLigSemicirculareHumeri")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSGHL")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendinitisLiquidInTendonSheath")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendinitisT2wSignalIncrease")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendinitisThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendinitisThinningOut")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickeningLigCoracoacromiale")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickeningLigCoracoclaviculare")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickeningLigCoracohumerale")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickeningLigHumeriTransversum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickeningLigSemicirculareHumeri")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickeningMoreThan5Degeneration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThinningOutDegeneration")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LabrumAndRibbonsPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("LabrumLocation")
                        .HasColumnType("smallint");

                    b.Property<byte>("LabrumMorphologyResultType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LongBicepsTendonType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<byte>("PulleyLesionBiceps")
                        .HasColumnType("smallint");

                    b.Property<int?>("RetractionInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("RuptureLigGlenoIGHLLocalization")
                        .HasColumnType("smallint");

                    b.Property<byte>("RupturePulleyLesionAfterHabermayer")
                        .HasColumnType("smallint");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImageFileId")
                        .IsUnique();

                    b.HasIndex("LabrumAndRibbonsPageId");

                    b.ToTable("LabrumAndRibbonsFindings");
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.LabrumAndRibbonsFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("DetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ExtensionLabrumPathologyDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsDislocationIntoJointSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExtensionToLongBicepsTendon")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLigGlenohumerale")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLigGlenohumeraleInferior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLigGlenohumeraleMedium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLongitudinalSplitting")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMGHL")
                        .HasColumnType("boolean");

                    b.Property<byte>("LabrumMorphologyResultType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("LabrumAndRibbonsFindingPresets");
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.LabrumAndRibbonsPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("LabrumAndRibbonsPages");
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.LocalizationPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<byte>("Localization")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("LocalizationPages");
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.MusculatureFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AgeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationMunichConsensusType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsApophysitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCrossDiameterRuptureBelow5Mm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCrossDiameterRuptureOver5Mm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFascialTear")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFattyDegeneration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInterfacial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntermuscular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntramuscular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscleHerniation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscularAtrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscularHypotrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsseousAvulsion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWavyCourseFibres")
                        .HasColumnType("boolean");

                    b.Property<byte>("MuscularAtrophyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<int?>("RetractionInMm")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SoftPartsFindingId")
                        .HasColumnType("uuid");

                    b.Property<byte>("T1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("T2w")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("SoftPartsFindingId");

                    b.ToTable("MusculatureFindings");
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.RotatorFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ACJointClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("AfflicationType")
                        .HasColumnType("smallint");

                    b.Property<bool>("AreHumeralHeadCysts")
                        .HasColumnType("boolean");

                    b.Property<byte>("AtrophyClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("BursaSideType")
                        .HasColumnType("smallint");

                    b.Property<bool>("CalcificationOrTendinitisCalcarea")
                        .HasColumnType("boolean");

                    b.Property<byte>("ClassificationAccGoutallierType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationAccZanettiType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationBayneClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationSnyderClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CrossType")
                        .HasColumnType("smallint");

                    b.Property<int?>("CystsAtTheHeadOfTheHumerusLargestAxialDiameter")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpansivenessDepthInMM")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpansivenessLengthInMM")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<byte>("InsertionOrFootprintType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAccordingToBayneAndBateman")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAccordingToGoutallier")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApophysitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArticularEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAtrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsularHypertrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCorticalBoneErosion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCorticalThinning")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolysisOrLateralClavicles")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteophytes")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSignalIncreaseInPDAndT1w")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonRetraction")
                        .HasColumnType("boolean");

                    b.Property<byte>("LafosseClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Lengthwise")
                        .HasColumnType("smallint");

                    b.Property<byte>("LesionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("LimeOrTendinitisCalcareaLargestAxialDiameter")
                        .HasColumnType("integer");

                    b.Property<byte>("LocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MorphologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PartialLesionLocationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PartialLesionUpperThirdType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PartialRuptureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PatteClassificationType")
                        .HasColumnType("smallint");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<byte>("RockwoodType")
                        .HasColumnType("smallint");

                    b.Property<byte>("RotatorCuffClassificationType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("RotatorPageId")
                        .HasColumnType("uuid");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<byte>("TendonPartType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TendonRetractionBayneClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TendonRetractionClassificationByPatentType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TendonRetractionClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TossyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ImageFileId")
                        .IsUnique();

                    b.HasIndex("RotatorPageId");

                    b.ToTable("RotatorFindings");
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.RotatorPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AcromionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsAcromiale")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("RotatorPages");
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.Sequence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Is3D")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParallelImaging")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPostContrast")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSaturatedFat")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OrientationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SequenceType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("WeightingType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("Sequences");
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.SoftPartsFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("DeltoideusLocationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsArthrosisArticularEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsErosions")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInflammationArticularEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRuptureDiscusArticularis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRuptureSternoclavicularLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovitis")
                        .HasColumnType("boolean");

                    b.Property<int?>("LargestTransverseDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("LocationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LymphNodesAxillaryType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PleuraType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("SoftPartsPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SternoclavicularJointType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("SoftPartsPageId");

                    b.ToTable("SoftPartsFindings");
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.SoftPartsPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SoftPartsPages");
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.SummaryPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("FindingsDynamicsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FollowUpTimeType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBiopsy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFollowup")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsXray")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SummaryPages");
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.TechnologyPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BarcodeCMCharge")
                        .HasColumnType("text");

                    b.Property<byte>("CMReinforcedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastMediumType")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("ContrastQuantity")
                        .HasColumnType("numeric");

                    b.Property<int?>("DilutionAmount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArmPositionABER")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCMSideEffect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCortisoneIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH1BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH2BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIndirectArthrography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraarticular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntravenous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMagicAngleArtifact")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetalArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMotion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotFurtherSpecified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsO2Administration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOther")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneousEpinephrine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSusceptibilityArtifacts")
                        .HasColumnType("boolean");

                    b.Property<byte>("MagneticFieldStrengthType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SequencesType")
                        .HasColumnType("smallint");

                    b.Property<string>("SetName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("TechnologyPages");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("Pages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("ReportResults")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.HasOne("RadioReport.ShoulderMRT.Domain.Models.LocalizationPage", null)
                        .WithOne("PatientInformation")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", null)
                        .WithOne("Session")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", "ReportSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.AnamnesisPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.BonesFinding", b =>
                {
                    b.HasOne("RadioReport.ShoulderMRT.Domain.Models.BonesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("BonesPageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "UploadedImageFile")
                        .WithOne()
                        .HasForeignKey("RadioReport.ShoulderMRT.Domain.Models.BonesFinding", "ImageFileId");
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.BonesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.CMSideEffect", b =>
                {
                    b.HasOne("RadioReport.ShoulderMRT.Domain.Models.TechnologyPage", null)
                        .WithMany("CMSideEffects")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.JointAndBursaeFinding", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "UploadedImageFile")
                        .WithOne()
                        .HasForeignKey("RadioReport.ShoulderMRT.Domain.Models.JointAndBursaeFinding", "ImageFileId");

                    b.HasOne("RadioReport.ShoulderMRT.Domain.Models.JointAndBursaePage", null)
                        .WithMany("Findings")
                        .HasForeignKey("JointAndBursaePageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.JointAndBursaePage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.LabrumAndRibbonsFinding", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "UploadedImageFile")
                        .WithOne()
                        .HasForeignKey("RadioReport.ShoulderMRT.Domain.Models.LabrumAndRibbonsFinding", "ImageFileId");

                    b.HasOne("RadioReport.ShoulderMRT.Domain.Models.LabrumAndRibbonsPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("LabrumAndRibbonsPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.LabrumAndRibbonsPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.LocalizationPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.MusculatureFinding", b =>
                {
                    b.HasOne("RadioReport.ShoulderMRT.Domain.Models.SoftPartsFinding", null)
                        .WithMany("MusculatureFindings")
                        .HasForeignKey("SoftPartsFindingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.RotatorFinding", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "UploadedImageFile")
                        .WithOne()
                        .HasForeignKey("RadioReport.ShoulderMRT.Domain.Models.RotatorFinding", "ImageFileId");

                    b.HasOne("RadioReport.ShoulderMRT.Domain.Models.RotatorPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("RotatorPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.RotatorPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.Sequence", b =>
                {
                    b.HasOne("RadioReport.ShoulderMRT.Domain.Models.TechnologyPage", null)
                        .WithMany("Sequences")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.SoftPartsFinding", b =>
                {
                    b.HasOne("RadioReport.ShoulderMRT.Domain.Models.SoftPartsPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("SoftPartsPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.SoftPartsPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.SummaryPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.TechnologyPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
