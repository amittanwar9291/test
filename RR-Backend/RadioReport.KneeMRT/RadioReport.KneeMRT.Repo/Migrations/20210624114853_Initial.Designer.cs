// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RadioReport.KneeMRT.Repo;

namespace RadioReport.KneeMRT.Repo.Migrations
{
    [DbContext(typeof(KneeMRTDbContext))]
    [Migration("20210624114853_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PageNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("WasModified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("PageInfos");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessionNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Evaluation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExaminationType")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("FindingsDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FreeField")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("LicenseFractionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LicensingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("PatientAge")
                        .HasColumnType("smallint");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PresetCode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StudyInstanceUID")
                        .HasColumnType("text");

                    b.Property<byte>("TotalPageCount")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Approved")
                        .HasColumnType("text");

                    b.Property<string>("Discussion")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsICD10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferenceImage")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReportSummary")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportResults");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ReportSession");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ObjectName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ImageFiles");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<byte?>("Age")
                        .HasColumnType("smallint");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PatientInformation");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.FindingLocalizer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mapping")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FindingLocalizers");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("BuildVersion")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Paragraphs")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportTypeName", "VersionName")
                        .IsUnique();

                    b.ToTable("ReportSchemas");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ReportSchemaId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportSchemaId")
                        .IsUnique();

                    b.ToTable("ReportSchemaSessions");
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.AnamnesisPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CartilageTransplantationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("InstabilityLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnteriorCruciateLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilageTransplantation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEndoprosthesis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFemur")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFibula")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInstability")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntramedullaryNailingOsteosynthesis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsKneePain")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralCollateralLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralRetinacularRelease")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLigamentReconstruction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLuxationPatella")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMedialCollateralLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMeniscusSurgery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteosynthesis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOther")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPatella")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorCruciateLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsResection")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralDrilling")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTibia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrauma")
                        .HasColumnType("boolean");

                    b.Property<byte>("KneePainLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MonthOfLuxation")
                        .HasColumnType("smallint");

                    b.Property<byte>("MonthOfMRIPreliminaryExamination")
                        .HasColumnType("smallint");

                    b.Property<byte>("MonthOfPeriodTrauma")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("ResectionLocation")
                        .HasColumnType("smallint");

                    b.Property<byte>("SutureLocation")
                        .HasColumnType("smallint");

                    b.Property<byte>("TraumaType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TraumaVelocityType")
                        .HasColumnType("smallint");

                    b.Property<int>("YearOfLuxation")
                        .HasColumnType("integer");

                    b.Property<int>("YearOfMRIPreliminaryExamination")
                        .HasColumnType("integer");

                    b.Property<int>("YearOfPeriodTrauma")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("AnamnesisPages");
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.BonesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AbscessDiameter")
                        .HasColumnType("integer");

                    b.Property<byte>("AitkenClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ArticularMultipleFractureLinesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ArticularOneFractureLineType")
                        .HasColumnType("smallint");

                    b.Property<byte>("AvulsionFractureType")
                        .HasColumnType("smallint");

                    b.Property<int?>("BoneDiameterInPercent")
                        .HasColumnType("integer");

                    b.Property<byte>("BonesEpiphysealJointDetailsType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("BonesPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("ClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CoronaryFractureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CorticalisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis2")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis3")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("EpiphysealJointType")
                        .HasColumnType("smallint");

                    b.Property<byte>("EvaluationFractureType")
                        .HasColumnType("smallint");

                    b.Property<int?>("Expansion2ndPlaneAxialInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpansionAxialMaxInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpansionCraniocaudalInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("FemurArticularType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FemurExtraarticularType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FemurPartiallyArticularType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FibulaFractureDetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FissionAndImpressionFractureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FissionFractureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureDistType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HistologicallySecuredType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HorizontalFractureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ImpressionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAbscessMoreThanOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAbscessPeripheralCMEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnotherLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvulsionFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBMEInAdjacentMetaphysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBonyBridging")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcificationCentral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcificationDiffuselyDistributed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapT2wHyperintensity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilageCap")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContrastInSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCorticalDesmoidHeterogeneous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCorticalDesmoidLessThan30MM")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCorticalDesmoidLobbied")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCorticalDesmoidMetaphyseal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCorticalDesmoidRimSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCorticalDesmoidT1wIsointens")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCorticalisDestruction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCorticalisThinning")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiagnosisSubordinated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDifferentialDiagnosisSubordinate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpiphysisJointExtension")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExpansive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFormBroadBased")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFormLobbied")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFormMaplikeConfiguration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFormOrientation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFormRoundly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFormStored")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGreaseSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGrowthPatternPathologicalFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologicallySecured")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationBoundary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationSoftTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIrregularityEpiphysisJoint")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiquidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidusT2wHyperintensity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoblastic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoidMatrix")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteomyelitisBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteomyelitisSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerifocalSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostalReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealBoneApposition")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealSpur")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostrupture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReactionBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReactionSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRimLowSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerosingRim")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerotic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeptetedOrChambered")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSequestrum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSequestrumMoreThanOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSequestrumNoCMEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStagingPathologicalFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubperiostealAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSurroundingInflammatoryReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickenedAndEdematizedSynovial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTransientOsteoporosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWithinThePrimarilyAffectedBone")
                        .HasColumnType("boolean");

                    b.Property<int>("KneeExtensionLocation")
                        .HasColumnType("integer");

                    b.Property<byte>("KneeLocation")
                        .HasColumnType("smallint");

                    b.Property<int?>("LateralImpressionFractureDepthInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("LimitationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalSpreadType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MedialImpressionFractureDepthInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("MetaphysealMultifragmentaryType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MetaphysealOneFragmentType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MultifragmentaryFractureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<int?>("ObliqueImpressionFractureDepthInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("PatellaFractureBType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PatellaFractureCType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PatellaFractureLateralDetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PatellaFractureMedialDetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("RatingFractureDetailsType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SequestrumDiameter")
                        .HasColumnType("integer");

                    b.Property<byte>("SignalT1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT2w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SimpleFractureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SimpleLateralFractureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SimpleMedialFractureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SimplyArticulateType")
                        .HasColumnType("smallint");

                    b.Property<byte>("StageType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SubperiostealAbscessDiameter")
                        .HasColumnType("integer");

                    b.Property<byte>("TibiaArticularType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TibiaExtraarticularType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TibiaPartiallyArticularType")
                        .HasColumnType("smallint");

                    b.Property<byte>("WedgeFractureType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BonesPageId");

                    b.ToTable("BonesFindings");
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.BonesFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ContrastEnhancementDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CorticalisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAnotherLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcificationCentral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcificationDiffuselyDistributed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilageCap")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExpansive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFormBroadBased")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFormLobbied")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFormMaplikeConfiguration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFormOrientation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFormRoundly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFormStored")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGreaseSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationSoftTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiquidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoblastic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoidMatrix")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostalReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealSpur")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReactionBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReactionSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRimLowSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerosingRim")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerotic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeptetedOrChambered")
                        .HasColumnType("boolean");

                    b.Property<byte>("LimitationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT2w")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("BonesFindingPresets");
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.BonesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("BonesPages");
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.CMSideEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMSideEffectType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DurationAdverseReactionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCompletelyDeclining")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeriousAdverseEvent")
                        .HasColumnType("boolean");

                    b.Property<int?>("MinAfterCMinjection")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("CMSideEffects");
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.LocalizationPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<byte>("KneeLocation")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("LocalizationPages");
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.OsteoInterfaceFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AssociatedFindingType")
                        .HasColumnType("smallint");

                    b.Property<int?>("BurglaryOfTheJointSurfaceDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("ChondralLesionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DetectionDissekatType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DetectionJointMouseLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DiameterInfarction")
                        .HasColumnType("integer");

                    b.Property<byte>("EpiphysealJointType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ExpansivenessMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormOfArthrosisType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsArticularSurfaceImpression")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArticularSurfaceInvolvement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssociatedMeniscusLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowEdemaExtended")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowOedema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBurglaryOfTheJointSurface")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChondrocalcinosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChondropathy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCorticalisImpression")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCurvedLine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDetectionLooseBody")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDetectionOfFluidInTheSubchondralSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDetectionOsteochondralFragment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDoubleLineSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExpansiveness")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExpiringDefect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidEquivalentHem")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFormOfArthrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFragmentationArticularSurface")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypointenseAreaBetweenCortexAndLine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypointenseLineInterruptionCorticalis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypointenseLineIrregular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypointenseLineParallelToCortex")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraosseousCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIsointensToSynovia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsJointSurfaces")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocationCentralInMainLoadZone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNoArticularSurfaceInvolvement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNoContourIrregularity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteochondraFragment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteochondralCorticalImpression")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteochondralFragment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteophytes")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralFatSignalIntensityLoss")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSurroundingBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovialCyst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUninterruptedMarginalSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWavyAppearance")
                        .HasColumnType("boolean");

                    b.Property<byte>("JointSurfaceType")
                        .HasColumnType("smallint");

                    b.Property<int?>("LesionDiameter")
                        .HasColumnType("integer");

                    b.Property<byte>("Location")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("OsteoInterfacePageId")
                        .HasColumnType("uuid");

                    b.Property<int?>("OsteochondralTraumaMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("OuterbridgeClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("StageType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SubchondralTraumaMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("UnipolarJointSurfaceType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("OsteoInterfacePageId");

                    b.ToTable("OsteoInterfaceFindings");
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.OsteoInterfacePage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("OsteoInterfacePages");
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.PatellaFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AdditionalOssificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationRegardingJointsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DetectionDissekatType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ExpansivenessMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAccessoryOssificationCenters")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvulsionMedialPatella")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChondrocalcinosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContusionEdemaLateral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContusionEdemaMedial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExtendingIntoThePrecondylarSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralFacet")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralisChondropathyMedialPatella")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralisChondropathyMedialTrochlearand")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralisReachesToPrekondylar")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLesionDiameter")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLooseBody")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMedialFacet")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMedialPatellofemoralRupture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMediopatellarisChondropathyMedialPatella")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMediopatellarisChondropathyMedialTrochlearand")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOldLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteochondralLesionInferomedial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteochondralLesionLateral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPatellaRidge")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPlicaLateralisPatellae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPlicaMediopatellaris")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftPartEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSulcusAngleTrochlea")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrochleadysplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTtTgDistance")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerticalPosition")
                        .HasColumnType("boolean");

                    b.Property<int?>("LargestVerticalExpansionPatella")
                        .HasColumnType("integer");

                    b.Property<int?>("LengthPatellae")
                        .HasColumnType("integer");

                    b.Property<int?>("LesionDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("MedialPatellofemoralRuptureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MorphologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OuterbridgeClassificationType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("PatellaPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PatellaPositionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("PlicaLateralisPatellaeWidthInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("PlicaMediopatellarisWidthInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("SulcusAngleTrochleaInDegrees")
                        .HasColumnType("integer");

                    b.Property<byte>("TrochleadysplasiaType")
                        .HasColumnType("smallint");

                    b.Property<int?>("TtTgDistanceInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("VerticalPositionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("VisualSelectionType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("PatellaPageId");

                    b.ToTable("PatellaFindings");
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.PatellaPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("PatellaPages");
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.RibbonsFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("BandPortion")
                        .HasColumnType("smallint");

                    b.Property<byte>("BucketHandleTear")
                        .HasColumnType("smallint");

                    b.Property<byte>("BundleType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ChronicDimensionMM")
                        .HasColumnType("integer");

                    b.Property<byte>("Detail")
                        .HasColumnType("smallint");

                    b.Property<byte>("DetailLocalization")
                        .HasColumnType("smallint");

                    b.Property<byte?>("DimensionGrad2")
                        .HasColumnType("smallint");

                    b.Property<byte?>("DimensionGrad3")
                        .HasColumnType("smallint");

                    b.Property<byte>("DiscoidMeniscusType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Dislocation")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FlapTearType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GradeClassification")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<byte>("InjuryType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAbsentMeniscus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArcuateSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvulsionFibula")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvulsionFrakturFibula")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvulsionTibia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBicepsFemorisTendon")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBucklingOfThePCL")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursitisBetweenDeepAndMidLayers")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCMOedemaFemoral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCMOedemaSubchondralAssociated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCMOedemaTibial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChondropathyAssociated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChondropathyFemoral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChondropathyTibial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChronicGanglionCyst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChronicSignalIncreased")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChronicSynovialization")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChronicThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDegenerationRearAttachment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiscoidMeniscus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDislocated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDistortionGrade1Injury")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreshPartialDistalThird")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreshPartialMiddleThird")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreshPartialPoplitealTendonRupture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreshPartialSignalIncrease")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreshPartialThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreshPartialroximalThird")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreshTotalAnterolateralTibialPlateau")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreshTotalAnterolateralTibialPlateauDorsal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreshTotalBonyAvulsion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreshTotalContusionOrBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreshTotalFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreshTotalFrakturLatFemoralCondyleVentral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreshTotalFrakturLatTibialPlateauDorsal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreshTotalLatFemoralCondyle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreshTotalLatFemoralCondyleVentral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreshTotalLateralTibialPlateau")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreshTotalLateralTibialPlateau1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreshTotalMedialTibialPlateau")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreshTotalProximaleFibula")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreshTotalProximaleFibula1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreshTotalSignalIncreased")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreshTotalSubluxationTibiaAnteriorOver5mm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreshTotalThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInferiorArticularSurface")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralCollateralLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLigMeniscopliteale")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiggPopliteofibulare")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLigmeniskotibial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMeniscAnteriusLigamHumphry")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMeniscPosterLigamWrisberg")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMeniscalCyst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMeniscalExtrusionSubluxation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMeniscalOssile")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMeniscocapsularSeparation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMeniscofemoralFascicle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParsIntermediaWavyRepresentation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPhysiologicalT2Hyperintensity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorCruciateLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPullOutPosterolateralCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRetracted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRuptureOfAnteriorCruciateLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegondFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSignificantVolumeDeclineEM")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSignificantVolumeDeclineIM")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralFemoral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralSclerosisAssociated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralTibial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperiorArticularSurface")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickeningLigMeniscofemoralPosterius")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTibialEminence")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTractusIliotibialis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTunnelCyst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTunnelCystFemoral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTunnelCystTibial")
                        .HasColumnType("boolean");

                    b.Property<byte>("Measurement")
                        .HasColumnType("smallint");

                    b.Property<bool>("MeniscotibialLigamentum")
                        .HasColumnType("boolean");

                    b.Property<int?>("MeniscusDiameterMM")
                        .HasColumnType("integer");

                    b.Property<byte>("MeniscusLocalization1")
                        .HasColumnType("smallint");

                    b.Property<byte>("MeniscusLocalization2")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("RibbonsPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("RuptureKind")
                        .HasColumnType("smallint");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<byte>("TearClassification")
                        .HasColumnType("smallint");

                    b.Property<byte>("TransplantDetail")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ImageFileId")
                        .IsUnique();

                    b.HasIndex("RibbonsPageId");

                    b.ToTable("RibbonsFindings");
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.RibbonsPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("RibbonsPages");
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.Sequence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Is3D")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParallelImaging")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPostContrast")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSaturatedFat")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OrientationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SequenceType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("WeightingType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("Sequences");
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.SoftPartsFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte?>("APoliteaAneurysmaDiameterInMm")
                        .HasColumnType("smallint");

                    b.Property<int?>("AxialMaxInMm")
                        .HasColumnType("integer");

                    b.Property<byte?>("BursaDiameterInMm")
                        .HasColumnType("smallint");

                    b.Property<byte>("BursitisMarginsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationMunichConsensusType")
                        .HasColumnType("smallint");

                    b.Property<int?>("CraniocaudalInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("DemarcationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis01")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis02")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis03")
                        .HasColumnType("smallint");

                    b.Property<byte>("DistributionPatternsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("EdemaType")
                        .HasColumnType("smallint");

                    b.Property<byte>("EnthesiopathyDistalType")
                        .HasColumnType("smallint");

                    b.Property<byte>("EnthesiopathyType")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ExpansivenessMaxDiameterInMm")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ExpansivenessMaxLinearExpansionInMm")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FocalType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FurtherFindingsMusculatureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HingeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("IntramuscularHaematomaType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAlongTendonSheath")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArticularEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvulsionFibulaHeads")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvulsionPatella")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvulsionTuberosityTibiae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBakerCyst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBloomingArtifact")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneBruise")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowEdemaOfTheCaudalPatellapol")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowEdemaOfTuberosity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowEdemaUpperPatellarPole")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBonyAvulsionFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBonyErosions")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBuritisInfrapatellarisProfunda")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursaAnserina")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursaInfrapatellarisProfunda")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursaSubcutaneaPraepatellaris")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursaSubfascialisPraepatellaris")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursaSubtendineaMusculiBicipitisFemorisInferior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursaSubtendineaMusculiSemimembranosi")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursaSuprapatellar")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursaTractusIliotibialis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursaWithinTheInnerBand")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursitisInfrapatellarisProfunda")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursitisSubtendineaMusculiBicipitisFemorisInferior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursitisSubtendineaMusculusPoplitei")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursitisSuprapatellaris")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilageIsointenserNodulus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilageIsointenserNodulusGreaterThen1Lesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCentrally")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCrossDiameterRuptureBelow5Mm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCrossDiameterRuptureOver5Mm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCutisThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCyamella")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeep")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeepVeins")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdemaFocalDistal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdemaFocalDorsal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdemaFocalMaltrackingOfThePatella")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdemaFocalProximal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdemaFocalSuperolateral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdemaOfTheInfrapatellarFattyBody")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdemaOfTheVentralSoftTissues")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnthesiopathy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFibrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFibrovascularStimulus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFragmentation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFragmentationOfTuberosity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFurtherFindingsMusculature")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGanglionCyst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGrease")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHaemarthros")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHaematoma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHaemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHematomaSuprapatellar")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHigherT2wOrPDSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHoffaFatPad")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHyperplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypertrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncreasedContrastEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInterfacial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntermuscular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntracorticalOedema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntramuscular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntramuscularHaematoma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntratendinalCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntratendinousCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIrregularityOfTuberosityTibiae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLayer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLooseBody")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLooseBodyGreaterThan1Lesions")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLowSIInT1w")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLowSIInT2w")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMOsgoodSlatterBoneMarrowEdemaOfTuberosity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMOsgoodSlatterBursitisInfrapatellarisProfunda")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMOsgoodSlatterThickeningEdemaOfTheDistalPatellarLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMalignantAspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscleHerniation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscleLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscularAtrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecroses")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNoMassEffect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParsProfundus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPatellaAlta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPatellaBaja")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeripheral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPressureCorrosionerosionBone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRectusFemoris")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRetraction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRuptured")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSecondary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSedimentation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSignalVoids")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSindingLarsenJohanssonSyndrome")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSmoothMargins")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpindleShaped")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSplitFatSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperficial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperficialLegVeins")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperficialPars")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSurroundingHematoma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovialCystProxTibiofibularJoint")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovialNodulusGreaterThan1Lesions")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT1wIsointensToTheMusculature")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTBursitisOfTheIliotibialTract")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTear")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonsPesAnserinusBursitisPesAnserinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonsPesAnserinusMGracilis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonsPesAnserinusMSartorius")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonsPesAnserinusMSemitendinosus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonsPesAnserinusMusculusSemiMembranosus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonsPopliteusTendonMuscularAtrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonsQuadricepsTendonHaemarthros")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonsQuadricepsTendonTractionSpur")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickeningEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickeningEdemaOfTheDistalLigamentPatellae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickeningEdemaOfTheDistalPatellarLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickeningEdemaOfTheProximalLigamentPatellae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickeningPlicaSynovialisInfrapatellaris")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTractionSpur")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVastusIntermedius")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVastusLateralis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVastusMedialis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWavyAppearanceOfTheFibers")
                        .HasColumnType("boolean");

                    b.Property<byte?>("KMEnchancementDiameterInMm")
                        .HasColumnType("smallint");

                    b.Property<int?>("KneeRetractionInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("LocalizationAxialType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationCraniocaudalRelationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Location")
                        .HasColumnType("smallint");

                    b.Property<byte>("MuscularAtrophyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MusculatureCMEnchancementType")
                        .HasColumnType("smallint");

                    b.Property<int>("MusculatureLocation")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OsseousAvulsionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("QualityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("QuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("QuantityType")
                        .HasColumnType("smallint");

                    b.Property<byte?>("RetractionInMm")
                        .HasColumnType("smallint");

                    b.Property<int?>("SecondPlaneAxialInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("SoftPartsFindingType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("SoftPartsPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SynoviaCMEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SynoviaShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SynoviaType")
                        .HasColumnType("smallint");

                    b.Property<byte?>("SynovialCystProxTibiofibularJointMaxDiameterInMm")
                        .HasColumnType("smallint");

                    b.Property<byte>("T1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("T2w")
                        .HasColumnType("smallint");

                    b.Property<byte>("TPTLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TearType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TendonLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TissueTumorCMEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TissueTumorHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte?>("TornMuscleOrTendonRetractionInMm")
                        .HasColumnType("smallint");

                    b.Property<byte>("VesselsNervesHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("VesselsNervesLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("VesselsNervesType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("SoftPartsPageId");

                    b.ToTable("SoftPartsFindings");
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.SoftPartsFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("DemarcationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsArticularEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBloomingArtifact")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBonyErosions")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGrease")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHaemarthros")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLooseBody")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLooseBodyGreaterThan1Lesions")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeripheral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPressureCorrosionerosionBone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSignalVoids")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovialNodulusGreaterThan1Lesions")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("QuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SynoviaCMEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SynoviaShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("T1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("T2w")
                        .HasColumnType("smallint");

                    b.Property<byte>("TissueTumorCMEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TissueTumorHomogeneityType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("SoftPartsFindingPresets");
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.SoftPartsPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SoftPartsPages");
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.SummaryPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("FindingsDynamicsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FollowUpTimeType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBiopsy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFollowUp")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsXRay")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SummaryPages");
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.TechnologyPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BarcodeCMCharge")
                        .HasColumnType("text");

                    b.Property<byte>("CMReinforcedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastMediumType")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("ContrastQuantity")
                        .HasColumnType("numeric");

                    b.Property<int?>("DilutionAmount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCMSideEffect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCortisoneIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH1BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH2BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIndirectArthrography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraarticular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntravenous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMagicAngleArtifact")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetalArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMotion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotFurtherSpecified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsO2Administration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOther")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneousEpinephrine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSusceptibilityArtifacts")
                        .HasColumnType("boolean");

                    b.Property<byte>("MagneticFieldStrengthType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SequencesType")
                        .HasColumnType("smallint");

                    b.Property<string>("SetName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("TechnologyPages");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("Pages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("ReportResults")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.HasOne("RadioReport.KneeMRT.Domain.Models.LocalizationPage", null)
                        .WithOne("PatientInformation")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", null)
                        .WithOne("Session")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", "ReportSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.AnamnesisPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.BonesFinding", b =>
                {
                    b.HasOne("RadioReport.KneeMRT.Domain.Models.BonesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("BonesPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.BonesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.CMSideEffect", b =>
                {
                    b.HasOne("RadioReport.KneeMRT.Domain.Models.TechnologyPage", null)
                        .WithMany("CMSideEffects")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.LocalizationPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.OsteoInterfaceFinding", b =>
                {
                    b.HasOne("RadioReport.KneeMRT.Domain.Models.OsteoInterfacePage", null)
                        .WithMany("Findings")
                        .HasForeignKey("OsteoInterfacePageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.PatellaFinding", b =>
                {
                    b.HasOne("RadioReport.KneeMRT.Domain.Models.PatellaPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("PatellaPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.PatellaPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.RibbonsFinding", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "UploadedImageFile")
                        .WithOne()
                        .HasForeignKey("RadioReport.KneeMRT.Domain.Models.RibbonsFinding", "ImageFileId");

                    b.HasOne("RadioReport.KneeMRT.Domain.Models.RibbonsPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("RibbonsPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.RibbonsPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.Sequence", b =>
                {
                    b.HasOne("RadioReport.KneeMRT.Domain.Models.TechnologyPage", null)
                        .WithMany("Sequences")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.SoftPartsFinding", b =>
                {
                    b.HasOne("RadioReport.KneeMRT.Domain.Models.SoftPartsPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("SoftPartsPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.SoftPartsPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.SummaryPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.KneeMRT.Domain.Models.TechnologyPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
