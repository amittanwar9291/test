// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RadioReport.AbdomenCT.Repo;

namespace RadioReport.AbdomenCT.Repo.Migrations
{
    [DbContext(typeof(AbdomenCTDbContext))]
    partial class AbdomenCTDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RadioReport.AbdomenCT.Domain.Models.Acquisition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AcquisitionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("BreathingProtocolType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsArterial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArterialEarly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArterialLate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsECGGating")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNative")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPulmonaryArterialPhase")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVenous")
                        .HasColumnType("boolean");

                    b.Property<float?>("LateDelayInMin")
                        .HasColumnType("real");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<int?>("NumberOfLines")
                        .HasColumnType("integer");

                    b.Property<byte>("PatientPositioningType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ReferenceValueInMAs")
                        .HasColumnType("integer");

                    b.Property<float?>("SliceThicknessInMm")
                        .HasColumnType("real");

                    b.Property<byte>("TechniqueType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.Property<int?>("TubeCurrent1MAs")
                        .HasColumnType("integer");

                    b.Property<int?>("TubeCurrent2MAs")
                        .HasColumnType("integer");

                    b.Property<byte>("TubeCurrentModulationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("TubeVoltage1KV")
                        .HasColumnType("integer");

                    b.Property<int?>("TubeVoltage2KV")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("Acquisitions");
                });

            modelBuilder.Entity("RadioReport.AbdomenCT.Domain.Models.AreaOfInvestigationPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("AreaOfInvestigationPages");
                });

            modelBuilder.Entity("RadioReport.AbdomenCT.Domain.Models.CMSideEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMSideEffectType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DurationAdverseReactionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCompletelyDeclining")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeriousAdverseEvent")
                        .HasColumnType("boolean");

                    b.Property<int?>("MinAfterCMinjection")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("CMSideEffects");
                });

            modelBuilder.Entity("RadioReport.AbdomenCT.Domain.Models.MedicalHistoryClinic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ClinicType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MedicalHistoryPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ParentNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ScopeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MedicalHistoryPageId");

                    b.ToTable("MedicalHistoryClinic");
                });

            modelBuilder.Entity("RadioReport.AbdomenCT.Domain.Models.MedicalHistoryIndication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ConcretionOrganRegionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("IndicationType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAppendicitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAppendix")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBiopsy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCaudateLobe")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChemotherapy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsColon")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiverticulitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDuodenum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEsophagus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFistulaFormation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIleum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsJejunum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftLobeOfLiver")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOcclusionAorta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOcclusionPelvicAndLegArteries")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOcclusionVisceralVessel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPartialResection")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPostinterventional")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPostoperative")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsQuadrateLobe")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRadio")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRectum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsResection")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightLobeOfLiver")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSigma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStenting")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStomach")
                        .HasColumnType("boolean");

                    b.Property<int>("LiverSegmentsLocalizationType")
                        .HasColumnType("integer");

                    b.Property<byte>("LocalizationType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("MedicalHistoryPageId")
                        .HasColumnType("uuid");

                    b.Property<byte?>("MonthOfFollowUpAfterTherapy")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OrganRegionType")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ParentNumber")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathologyType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ScopeId")
                        .HasColumnType("uuid");

                    b.Property<int?>("YearOfFollowUpAfterTherapy")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MedicalHistoryPageId");

                    b.ToTable("MedicalHistoryIndication");
                });

            modelBuilder.Entity("RadioReport.AbdomenCT.Domain.Models.MedicalHistoryPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTAbdomen")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRIAbdomen")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPetCT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSonographyAbdomen")
                        .HasColumnType("boolean");

                    b.Property<byte?>("MonthOfCT")
                        .HasColumnType("smallint");

                    b.Property<byte?>("MonthOfMRI")
                        .HasColumnType("smallint");

                    b.Property<byte?>("MonthOfPetCT")
                        .HasColumnType("smallint");

                    b.Property<byte?>("MonthOfSonography")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<int?>("YearOfCT")
                        .HasColumnType("integer");

                    b.Property<int?>("YearOfMRI")
                        .HasColumnType("integer");

                    b.Property<int?>("YearOfPetCT")
                        .HasColumnType("integer");

                    b.Property<int?>("YearOfSonography")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("MedicalHistoryPages");
                });

            modelBuilder.Entity("RadioReport.AbdomenCT.Domain.Models.Reconstruction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AcquisitionId")
                        .HasColumnType("uuid");

                    b.Property<int?>("DoseLengthProductMGycm")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTAngiography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLungs")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMIP")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMPR")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMinIP")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissues")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVRT")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("ReconstructionType")
                        .HasColumnType("smallint");

                    b.Property<float?>("SliceThicknessST1Mm")
                        .HasColumnType("real");

                    b.Property<float?>("SliceThicknessST2Mm")
                        .HasColumnType("real");

                    b.Property<float?>("SliceThicknessST3Mm")
                        .HasColumnType("real");

                    b.Property<float?>("SliceThicknessST4Mm")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AcquisitionId");

                    b.ToTable("Reconstructions");
                });

            modelBuilder.Entity("RadioReport.AbdomenCT.Domain.Models.SpleenFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMEnhancementDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CharacterizationHematoma")
                        .HasColumnType("smallint");

                    b.Property<byte>("DelimitationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DensityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis2")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis3")
                        .HasColumnType("smallint");

                    b.Property<byte>("EarlyArterialSignalTypeExtended")
                        .HasColumnType("smallint");

                    b.Property<byte>("EquilibriumSignalTypeExtended")
                        .HasColumnType("smallint");

                    b.Property<int?>("ExtensionHematoma")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HistologyKnownType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAtTheHilus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBleeding")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCleaves")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCongestive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExtremePosterior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExtremitasAnterior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHematologicDisease")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHematoma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologyKnown")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfectious")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInflammatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInvolvementOfTheHilar")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLazerationParenchymaDepth")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiquid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLobulation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMass")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMiddleThird")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLesionParenchymatous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLesionSamePathology")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLesionSubcapsular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMultifocalLocalization")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNoDisplacement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNodes")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotches")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOcclusionOfTheSplenicVein")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParenchymatous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPlantVariationPathologicalMyProperty")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpleenContour")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSplenicRupture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSplenicVascularInjuryOr")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSplenicVascularInjuryWith")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcapsular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThrombosisOfTheSplenicVein")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpstreamAneurysm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpstreamArterialOcclusion")
                        .HasColumnType("boolean");

                    b.Property<byte>("LateArterialSignalTypeExtended")
                        .HasColumnType("smallint");

                    b.Property<int?>("LazerationParenchymaDepth")
                        .HasColumnType("integer");

                    b.Property<byte?>("MaxDiameterInMm")
                        .HasColumnType("smallint");

                    b.Property<byte>("ModifiedSpleenInjuryScaleType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<byte>("PlantVariationPathologicalAnatomyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PortalVenousSignalTypeExtended")
                        .HasColumnType("smallint");

                    b.Property<int?>("Quantitative")
                        .HasColumnType("integer");

                    b.Property<byte>("QuantityType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SecondPlane")
                        .HasColumnType("integer");

                    b.Property<int?>("SecondPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<byte>("SignalTypeExtended")
                        .HasColumnType("smallint");

                    b.Property<int?>("SizeInMm")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SpleenPageId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Subcapsular")
                        .HasColumnType("integer");

                    b.Property<int?>("ThirdPlane")
                        .HasColumnType("integer");

                    b.Property<int?>("ThirdPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("VenousSignalTypeExtended")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ImageFileId");

                    b.HasIndex("SpleenPageId");

                    b.ToTable("SpleenFindings");
                });

            modelBuilder.Entity("RadioReport.AbdomenCT.Domain.Models.SpleenPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SpleenPages");
                });

            modelBuilder.Entity("RadioReport.AbdomenCT.Domain.Models.TechnologyPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BarcodeCMCharge")
                        .HasColumnType("text");

                    b.Property<byte>("CMReinforcedType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ContrastVolumeInMl")
                        .HasColumnType("integer");

                    b.Property<byte>("ImageQualityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("IodineConcentrationType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBeamHardeningArtefacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCMSideEffect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCortisoneIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnteroclysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFistulaTract")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH1BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH2BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetalArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMotion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotFurtherSpecified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsO2Administration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOralContrast")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOther")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPulsationArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRectalContrast")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRespiratoryArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRetrogradeCystography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneousEpinephrine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVaginalContrast")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsViaInsertedDrain")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsViaInsertedTube")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SequencesType")
                        .HasColumnType("smallint");

                    b.Property<string>("SetName")
                        .HasColumnType("text");

                    b.Property<byte>("SpasmolysisType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("TechnologyPages");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PageNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("WasModified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("PageInfos");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessionNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Evaluation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExaminationType")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("FindingsDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FreeField")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("LicenseFractionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LicensingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("PatientAge")
                        .HasColumnType("smallint");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PresetCode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StudyInstanceUID")
                        .HasColumnType("text");

                    b.Property<byte>("TotalPageCount")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Approved")
                        .HasColumnType("text");

                    b.Property<string>("Discussion")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsICD10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferenceImage")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReportSummary")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportResults");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ReportSession");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("ObjectName")
                        .HasColumnType("text");

                    b.Property<byte[]>("Stream")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("ImageFile");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<byte?>("Age")
                        .HasColumnType("smallint");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PatientInformation");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.FindingLocalizer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mapping")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FindingLocalizers");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("BuildVersion")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Paragraphs")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportTypeName", "VersionName")
                        .IsUnique();

                    b.ToTable("ReportSchemas");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ReportSchemaId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportSchemaId")
                        .IsUnique();

                    b.ToTable("ReportSchemaSessions");
                });

            modelBuilder.Entity("RadioReport.AbdomenCT.Domain.Models.Acquisition", b =>
                {
                    b.HasOne("RadioReport.AbdomenCT.Domain.Models.TechnologyPage", null)
                        .WithMany("Acquisitions")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AbdomenCT.Domain.Models.AreaOfInvestigationPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.AbdomenCT.Domain.Models.CMSideEffect", b =>
                {
                    b.HasOne("RadioReport.AbdomenCT.Domain.Models.TechnologyPage", null)
                        .WithMany("CMSideEffects")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AbdomenCT.Domain.Models.MedicalHistoryClinic", b =>
                {
                    b.HasOne("RadioReport.AbdomenCT.Domain.Models.MedicalHistoryPage", null)
                        .WithMany("Clinics")
                        .HasForeignKey("MedicalHistoryPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AbdomenCT.Domain.Models.MedicalHistoryIndication", b =>
                {
                    b.HasOne("RadioReport.AbdomenCT.Domain.Models.MedicalHistoryPage", null)
                        .WithMany("Indications")
                        .HasForeignKey("MedicalHistoryPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AbdomenCT.Domain.Models.MedicalHistoryPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.AbdomenCT.Domain.Models.Reconstruction", b =>
                {
                    b.HasOne("RadioReport.AbdomenCT.Domain.Models.Acquisition", null)
                        .WithMany("Reconstructions")
                        .HasForeignKey("AcquisitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AbdomenCT.Domain.Models.SpleenFinding", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "UploadedImageFile")
                        .WithMany()
                        .HasForeignKey("ImageFileId");

                    b.HasOne("RadioReport.AbdomenCT.Domain.Models.SpleenPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("SpleenPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AbdomenCT.Domain.Models.SpleenPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.AbdomenCT.Domain.Models.TechnologyPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("Pages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("ReportResults")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.HasOne("RadioReport.AbdomenCT.Domain.Models.AreaOfInvestigationPage", null)
                        .WithOne("PatientInformation")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", null)
                        .WithOne("Session")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", "ReportSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
