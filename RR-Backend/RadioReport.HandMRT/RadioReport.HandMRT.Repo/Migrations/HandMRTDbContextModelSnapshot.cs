// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RadioReport.HandMRT.Repo;

namespace RadioReport.HandMRT.Repo.Migrations
{
    [DbContext(typeof(HandMRTDbContext))]
    partial class HandMRTDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PageNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("WasModified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("PageInfos");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessionNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Evaluation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExaminationType")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("FindingsDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FreeField")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("LicenseFractionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LicensingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("PatientAge")
                        .HasColumnType("smallint");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PresetCode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StudyInstanceUID")
                        .HasColumnType("text");

                    b.Property<byte>("TotalPageCount")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Approved")
                        .HasColumnType("text");

                    b.Property<string>("Discussion")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsICD10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferenceImage")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReportSummary")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportResults");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ReportSession");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("ObjectName")
                        .HasColumnType("text");

                    b.Property<byte[]>("Stream")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("ImageFile");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<byte?>("Age")
                        .HasColumnType("smallint");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PatientInformation");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.FindingLocalizer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mapping")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FindingLocalizers");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("BuildVersion")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Paragraphs")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportTypeName", "VersionName")
                        .IsUnique();

                    b.ToTable("ReportSchemas");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ReportSchemaId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportSchemaId")
                        .IsUnique();

                    b.ToTable("ReportSchemaSessions");
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.AnamnesisIndication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnamnesisPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("DetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("IndicationType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCarpalia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLtDissociation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetacarpaliaPhalanges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOccult")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRadius")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRingbandRupture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSlDissociation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonRuptureOfThePhalanges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTfccRuptureDegeneration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUlna")
                        .HasColumnType("boolean");

                    b.Property<byte>("MonthOfTrauma")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<int>("YearOfTrauma")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesisPageId");

                    b.ToTable("AnamnesisIndications");
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.AnamnesisPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMri")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsXRay")
                        .HasColumnType("boolean");

                    b.Property<byte>("MonthOfCT")
                        .HasColumnType("smallint");

                    b.Property<byte>("MonthOfMri")
                        .HasColumnType("smallint");

                    b.Property<byte>("MonthOfXRay")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<int>("YearOfCT")
                        .HasColumnType("integer");

                    b.Property<int>("YearOfMri")
                        .HasColumnType("integer");

                    b.Property<int>("YearOfXRay")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("AnamnesisPages");
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.AnamnesisPreviousSurgeries", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnamnesisPageId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAbductorPollicisLongusTendonPlastic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilageTransplantation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrapezectomy")
                        .HasColumnType("boolean");

                    b.Property<byte>("MonthOfSurgery")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PreviousSurgeriesType")
                        .HasColumnType("smallint");

                    b.Property<int>("YearOfSurgery")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesisPageId");

                    b.ToTable("AnamnesisPreviousSurgeriess");
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.BonesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ArthritisDifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("BoneMarrowEdemaDifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("BonesPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("ContrastDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastHomogenityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CortexType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DorsomedialDrugType")
                        .HasColumnType("smallint");

                    b.Property<byte>("EatonLitterStagingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("EtiologyDetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("EtiologyType")
                        .HasColumnType("smallint");

                    b.Property<int?>("Extension2ndPlaneSize")
                        .HasColumnType("integer");

                    b.Property<int?>("Extension3rdPlaneSize")
                        .HasColumnType("integer");

                    b.Property<int?>("ExtensionSize")
                        .HasColumnType("integer");

                    b.Property<byte>("FacetType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureFormNotSpecifiedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureFormScaphoideumType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureFormSubType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureFormType")
                        .HasColumnType("smallint");

                    b.Property<int>("HandJointsLocalizer")
                        .HasColumnType("integer");

                    b.Property<byte>("HomogenityType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<byte>("ImpactionImpingementSyndromeType")
                        .HasColumnType("smallint");

                    b.Property<int?>("Intraosseous2ndPlaneSize")
                        .HasColumnType("integer");

                    b.Property<int?>("Intraosseous3rdPlaneSize")
                        .HasColumnType("integer");

                    b.Property<int?>("IntraosseousSize")
                        .HasColumnType("integer");

                    b.Property<int>("InvolvedBonesLocalizer")
                        .HasColumnType("integer");

                    b.Property<int>("InvolvedBonesType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAdjacentBoneInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnkulosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArticularCartilageDamage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneApposition")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBroadBased")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapitatumSecundarium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilageCap")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCentral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCentrale")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChondropathy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCodmanSpur")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCutisThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCystsFormation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDepressionOfJointSurface")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDestruction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDestructions")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiaphyseal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDifferentialDiagnosisSuspected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffuse")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpilunatum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpiphyseal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpipyramis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpitrapezium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsErosions")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExpansile")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGapInJoinSurface")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGeographic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologyKnown")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypolunatum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypotriquetrum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncreasedSubchondralSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInflammatoryBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntaosseousLasion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraArticularBodies")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraosseousAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsJoinSurfaceMoreThan20")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsJointEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsJointSpaceNarrowing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLesionSameEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLobulated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLunateNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLunula")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMarginWithLowSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetaphyseal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMutilations")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNegativeUlnarVariance")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNoContrastEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsHamuliProprium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsHematumBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsLunatum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsTriquetrum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOssiculumGruberi")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoblastic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoidMatrix")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteophyte")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParascaphoid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParatrapezium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPathologicalFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPathologicalFractureSuspected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPedunculated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPenumbraSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerifocalSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealRupture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeripheralContrast")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosttraumatic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrimarilyInvolvedBone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProjectingAway")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProliferativeBoneChanges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRadialeExternum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRemodellingAtIncisuraUlnaris")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRound")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerotic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScleroticMargin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSecondary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSecondaryUlnarVariance")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeptated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSequester")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSequesterLasion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShortenedRadius")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStyloidum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralCyts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubperiostealAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSunBurst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSurroundingInflammatoryReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovitisWithPannus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTFCC")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTenosynovitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickenedSynovia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThinning")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrapeziumSecundarium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrapezoidesSecundarium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTriangulare")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUlna")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUlnareExternum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVesalianum")
                        .HasColumnType("boolean");

                    b.Property<byte>("KnownHistologyMalignancyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LichtmanStagingSubType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LichtmanStagingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalExpansionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxCartilageThicness")
                        .HasColumnType("integer");

                    b.Property<byte>("MinaarClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OsteoarthritisSlacWristType")
                        .HasColumnType("smallint");

                    b.Property<byte>("OsteoarthritisSnacWristType")
                        .HasColumnType("smallint");

                    b.Property<byte>("OsteomyelitisDifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("OsteomyelitisStageType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PartitumType")
                        .HasColumnType("smallint");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<byte>("RadioulnarEarlyPhaseType")
                        .HasColumnType("smallint");

                    b.Property<byte>("RadioulnarImpingementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("RadioulnarLatePhaseType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ScaphoidCystType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ScaphoidOsteoarthritisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ScaphoidPseudarthrosisClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ScaphoidSclerosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ScaphoidSnacType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ScaphoideumClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ScaphoideumGradingType")
                        .HasColumnType("smallint");

                    b.Property<int?>("Sequester2ndPlaneSize")
                        .HasColumnType("integer");

                    b.Property<int?>("Sequester3rdPlaneSize")
                        .HasColumnType("integer");

                    b.Property<int?>("SequesterSize")
                        .HasColumnType("integer");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<byte>("SignalT1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT2w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignificanceType")
                        .HasColumnType("smallint");

                    b.Property<byte>("StandardVariantsType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SubperiostealSize")
                        .HasColumnType("integer");

                    b.Property<byte>("TumorDifferentialDiagnosis1Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("TumorDifferentialDiagnosis2Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("TumorDifferentialDiagnosis3Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("TumorDifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("UlnocarpalEtiologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("VitalityType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BonesPageId");

                    b.HasIndex("ImageFileId");

                    b.ToTable("BonesFindings");
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.BonesFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ContrastDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastHomogenityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CortexType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogenityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBroadBased")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilageCap")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCentral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCodmanSpur")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffuse")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpiphyseal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExpansile")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLobulated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMarginWithLowSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetaphyseal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoblastic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoidMatrix")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPedunculated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProjectingAway")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRound")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerotic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScleroticMargin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeptated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSunBurst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT2w")
                        .HasColumnType("smallint");

                    b.Property<byte>("TumorDifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("BonesFindingPresets");
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.BonesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("BonesPages");
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.CMSideEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMSideEffectType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DurationAdverseReactionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCompletelyDeclining")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeriousAdverseEvent")
                        .HasColumnType("boolean");

                    b.Property<int?>("MinAfterCMinjection")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("CMSideEffects");
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.CapsuleAndRibbonsFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AnnularPulleyRupturType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("CapsuleAndRibbonsPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("ClassificationPalmerSubType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationPalmerType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CollateralLigamentInjuryType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DorsalType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAnnularPulleyRupture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvulsionFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvulsionInjury")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCentrally")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDISIDeformity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDip")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDorsal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMcp")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPalmar")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPip")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRuptureOfCollateralLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRuptureOfTheExtensorTendon")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSecondaryArthrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStaticSlDissociation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTenosynovitisStenosans")
                        .HasColumnType("boolean");

                    b.Property<byte>("LesionOfExtrinsicLigamentsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PalmarType")
                        .HasColumnType("smallint");

                    b.Property<byte>("RuptureOfCollateralLigamentSideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("RuptureOfTheLigamentInjurySubType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SlacWristType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TenosynovitisStenosansType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CapsuleAndRibbonsPageId");

                    b.ToTable("CapsuleAndRibbonsFindings");
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.CapsuleAndRibbonsPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("CapsuleAndRibbonsPages");
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.EvaluationPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("FindingsDynamicsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FollowUpType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBiopsy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTArthrography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFollowUp")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalRecurrence")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRArthrography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRIContrast")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsXray")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsXrayScaphoidQuartet")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("TClassificationType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("EvaluationPages");
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.LocalizationPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<byte>("Localization")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("LocalizationPages");
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.NerveCompressionFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCarpalTunnelEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleteCut")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDistalFlatteningOfTheMedianNerve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypertrophicFormation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypertrophicOsteophytes")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncreasedT2wSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncreasedT2wSignalUlnarNerve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsCapitatum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsHamatum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsPisiforme")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsTrapezium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsTrapezoid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsTriquetrum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeritendinousCarpiTendon")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProlapseOfFlexorTendons")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProminenceOfTheLigCarpiTransversum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProtrusionOfCarpalLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPseudarthrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickeningOfTendonSheaths")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickeningTendonSheat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUlnarNerveFlattening")
                        .HasColumnType("boolean");

                    b.Property<int?>("Length")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxDiameter")
                        .HasColumnType("integer");

                    b.Property<Guid?>("NerveCompressionPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("NeurogeneOriginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OsseousCauseType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathogenesisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PostoperativePathogenesisDetailsType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SecondLevel")
                        .HasColumnType("integer");

                    b.Property<byte>("SecondaryPathogenesisDetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SoftTissueSpaceRequirementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SynovialOriginType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ThirdLevel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NerveCompressionPageId");

                    b.ToTable("NerveCompressionFindings");
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.NerveCompressionPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("NerveCompressionPages");
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.Sequence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Is3D")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParallelImaging")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPostContrast")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSaturatedFat")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OrientationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SequenceType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("WeightingType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("Sequences");
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.SoftTissueFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis2")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis3")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<int>("HandJointsLocalizer")
                        .HasColumnType("integer");

                    b.Property<int>("HandLocationsLocalizer")
                        .HasColumnType("integer");

                    b.Property<byte>("HistologyKnownType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAlongMedianNerve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAlongTendonSheath")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArticularEffusionWithExtraarticularSpread")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBones")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsuleRupture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompressionOfThePosteriorInterosseousNerve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCutisThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffusionRestriction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDisplacedNerveFasciclesAxialPomegranateSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFascia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemarthros")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologyKnown")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLooseBody")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMacrodactyly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLesionSameEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNerves")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNoDisplacement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPressureCorrosionBone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSecondary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSignalVoids")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSkin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpaghettiLikeAppearanceOfTheNerve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVessel")
                        .HasColumnType("boolean");

                    b.Property<byte>("LocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("QuantityType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SecondPlane")
                        .HasColumnType("integer");

                    b.Property<byte>("SignalTypeT1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalTypeT2w")
                        .HasColumnType("smallint");

                    b.Property<int?>("Size")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SoftTissuePageId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ThirdPlane")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SoftTissuePageId");

                    b.ToTable("SoftTissueFindings");
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.SoftTissueFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAlongMedianNerve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDisplacedNerveFasciclesAxialPomegranateSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMacrodactyly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPressureCorrosionBone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpaghettiLikeAppearanceOfTheNerve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneous")
                        .HasColumnType("boolean");

                    b.Property<byte>("LocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalTypeT1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalTypeT2w")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("SoftTissueFindingPresets");
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.SoftTissuePage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SoftTissuePages");
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.TechnologyPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ApplicationLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<string>("BarcodeCMCharge")
                        .HasColumnType("text");

                    b.Property<byte>("CMReinforcedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastMediumType")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("ContrastQuantity")
                        .HasColumnType("numeric");

                    b.Property<int?>("DilutionAmount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCMSideEffect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCortisoneIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH1BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH2BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIndirectArthrography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraarticular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntravenous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMagicAngleArtifact")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetalArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMotion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotFurtherSpecified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsO2Administration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOther")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneousEpinephrine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSusceptibilityArtifacts")
                        .HasColumnType("boolean");

                    b.Property<byte>("MagneticFieldStrengthType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SequencesType")
                        .HasColumnType("smallint");

                    b.Property<string>("SetName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("TechnologyPages");
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.TendinopathyFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("DetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<bool>("ExtensoresD2")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExtensoresD3")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExtensoresD4")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExtensoresD5")
                        .HasColumnType("boolean");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("InternalStructureType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsPeriTenosynovitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerifocalHematoma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeritendinousChanges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStenosisInTheOsteofibrousCanal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTearAtTheEnthesis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonAbductorPollicisLongusMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonExtensorCarpiRadialisBrevisMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonExtensorCarpiRadialisLongusMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonExtensorCarpiUlnarisMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonExtensorDigitiMinimiMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonExtensorPollicisBrevisMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonExtensorPollicisLongusMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonFlexorCarpiRadialisMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonFlexorCarpiUlnarisMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonFlexorPollicisLongusMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonsExtensoresDigitorumAndIndicisMuscles")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonsFlexorDigitorumProfundusMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonsFlexorDigitorumSuperficialisMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWithTendonTear")
                        .HasColumnType("boolean");

                    b.Property<byte>("LocalizationDetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxSize")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathologyType")
                        .HasColumnType("smallint");

                    b.Property<bool>("ProfundusD2")
                        .HasColumnType("boolean");

                    b.Property<bool>("ProfundusD3")
                        .HasColumnType("boolean");

                    b.Property<bool>("ProfundusD4")
                        .HasColumnType("boolean");

                    b.Property<bool>("ProfundusD5")
                        .HasColumnType("boolean");

                    b.Property<int?>("Retraction")
                        .HasColumnType("integer");

                    b.Property<byte>("RuptureType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SecondPlane")
                        .HasColumnType("integer");

                    b.Property<byte>("SignalTypeT1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalTypeT2w")
                        .HasColumnType("smallint");

                    b.Property<int?>("Size")
                        .HasColumnType("integer");

                    b.Property<bool>("SuperficialisD2")
                        .HasColumnType("boolean");

                    b.Property<bool>("SuperficialisD3")
                        .HasColumnType("boolean");

                    b.Property<bool>("SuperficialisD4")
                        .HasColumnType("boolean");

                    b.Property<bool>("SuperficialisD5")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("TendinopathyPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("TendonInvolvementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TendovaginitisType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ThirdPlane")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TendinopathyPageId");

                    b.ToTable("TendinopathyFindings");
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.TendinopathyPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("TendinopathyPages");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("Pages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("ReportResults")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.HasOne("RadioReport.HandMRT.Domain.Models.LocalizationPage", null)
                        .WithOne("PatientInformation")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", null)
                        .WithOne("Session")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", "ReportSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.AnamnesisIndication", b =>
                {
                    b.HasOne("RadioReport.HandMRT.Domain.Models.AnamnesisPage", null)
                        .WithMany("Indications")
                        .HasForeignKey("AnamnesisPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.AnamnesisPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.AnamnesisPreviousSurgeries", b =>
                {
                    b.HasOne("RadioReport.HandMRT.Domain.Models.AnamnesisPage", null)
                        .WithMany("PreviousSurgeries")
                        .HasForeignKey("AnamnesisPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.BonesFinding", b =>
                {
                    b.HasOne("RadioReport.HandMRT.Domain.Models.BonesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("BonesPageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "UploadedImageFile")
                        .WithMany()
                        .HasForeignKey("ImageFileId");
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.BonesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.CMSideEffect", b =>
                {
                    b.HasOne("RadioReport.HandMRT.Domain.Models.TechnologyPage", null)
                        .WithMany("CMSideEffects")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.CapsuleAndRibbonsFinding", b =>
                {
                    b.HasOne("RadioReport.HandMRT.Domain.Models.CapsuleAndRibbonsPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("CapsuleAndRibbonsPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.CapsuleAndRibbonsPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.EvaluationPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.LocalizationPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.NerveCompressionFinding", b =>
                {
                    b.HasOne("RadioReport.HandMRT.Domain.Models.NerveCompressionPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("NerveCompressionPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.NerveCompressionPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.Sequence", b =>
                {
                    b.HasOne("RadioReport.HandMRT.Domain.Models.TechnologyPage", null)
                        .WithMany("Sequences")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.SoftTissueFinding", b =>
                {
                    b.HasOne("RadioReport.HandMRT.Domain.Models.SoftTissuePage", null)
                        .WithMany("Findings")
                        .HasForeignKey("SoftTissuePageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.SoftTissuePage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.TechnologyPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.TendinopathyFinding", b =>
                {
                    b.HasOne("RadioReport.HandMRT.Domain.Models.TendinopathyPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("TendinopathyPageId");
                });

            modelBuilder.Entity("RadioReport.HandMRT.Domain.Models.TendinopathyPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
