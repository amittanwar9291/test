// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RadioReport.MammaMRT.Repo;

namespace RadioReport.MammaMRT.Repo.Migrations
{
    [DbContext(typeof(MammaMRTDbContext))]
    partial class MammaMRTDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PageNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("WasModified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("PageInfos");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessionNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Evaluation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExaminationType")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("FindingsDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FreeField")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("LicenseFractionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LicensingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("PatientAge")
                        .HasColumnType("smallint");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PresetCode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StudyInstanceUID")
                        .HasColumnType("text");

                    b.Property<byte>("TotalPageCount")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Approved")
                        .HasColumnType("text");

                    b.Property<string>("Discussion")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsICD10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferenceImage")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReportSummary")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportResults");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ReportSession");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ObjectName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ImageFiles");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<byte?>("Age")
                        .HasColumnType("smallint");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PatientInformations");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.FindingLocalizer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mapping")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FindingLocalizers");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("BuildVersion")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Paragraphs")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportTypeName", "VersionName")
                        .IsUnique();

                    b.ToTable("ReportSchemas");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ReportSchemaId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportSchemaId")
                        .IsUnique();

                    b.ToTable("ReportSchemaSessions");
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.AnamnesisPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ArePreviousTherapies")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Calendar")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<byte>("MenstruationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("OwnFamilyAnamnesisPresent")
                        .HasColumnType("smallint");

                    b.Property<int?>("PregnanciesQuantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("AnamnesisPages");
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.AnatomyEnhancementPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("Artefact")
                        .HasColumnType("smallint");

                    b.Property<byte>("ArtefactFinding1")
                        .HasColumnType("smallint");

                    b.Property<int>("ArtefactFinding1Location")
                        .HasColumnType("integer");

                    b.Property<byte>("ArtefactFinding2")
                        .HasColumnType("smallint");

                    b.Property<int>("ArtefactFinding2Location")
                        .HasColumnType("integer");

                    b.Property<byte>("BIRADS")
                        .HasColumnType("smallint");

                    b.Property<byte>("GlandularBody")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFindingsLocalizationLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFindingsLocalizationRight")
                        .HasColumnType("boolean");

                    b.Property<byte>("Left")
                        .HasColumnType("smallint");

                    b.Property<byte>("LevelParenchymalesSide")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("MamillaFinding1Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MamillaFinding2Id")
                        .HasColumnType("uuid");

                    b.Property<byte>("Mamille")
                        .HasColumnType("smallint");

                    b.Property<byte>("NonEnhancingFindingsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("OnBothSides")
                        .HasColumnType("smallint");

                    b.Property<byte>("ParenchymaDynamicContrastType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ParenchymaType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Right")
                        .HasColumnType("smallint");

                    b.Property<byte>("SiliconeImplant")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("SiliconeImplantFinding1Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SiliconeImplantFinding2Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MamillaFinding1Id");

                    b.HasIndex("MamillaFinding2Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.HasIndex("SiliconeImplantFinding1Id");

                    b.HasIndex("SiliconeImplantFinding2Id");

                    b.ToTable("AnatomyEnhancementPages");
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.AnatomyPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CutisRetraction")
                        .HasColumnType("smallint");

                    b.Property<int>("CutisRetractionLocation")
                        .HasColumnType("integer");

                    b.Property<byte>("CutisThickness")
                        .HasColumnType("smallint");

                    b.Property<int>("CutisThicknessLocation")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<byte>("PectoralisMuscle")
                        .HasColumnType("smallint");

                    b.Property<int>("PectoralisMuscleLocation")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<int>("SubcutaneousFatSpaceLocation")
                        .HasColumnType("integer");

                    b.Property<byte>("SubcutaneousTissueType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Volume")
                        .HasColumnType("smallint");

                    b.Property<int>("VolumeLocation")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("AnatomyPages");
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.BonesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("BoneLocalization")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("BonesPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsTVB1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTVB10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTVB11")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTVB12")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTVB2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTVB3")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTVB4")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTVB5")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTVB6")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTVB7")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTVB8")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTVB9")
                        .HasColumnType("boolean");

                    b.Property<byte>("LesionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BonesPageId");

                    b.ToTable("BonesFindings");
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.BonesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("BonesType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("BonesPages");
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.CMSideEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMSideEffectType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DurationAdverseReactionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCompletelyDeclining")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeriousAdverseEvent")
                        .HasColumnType("boolean");

                    b.Property<int?>("MinAfterCMinjection")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("CMSideEffects");
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.DiagnosisFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AdditionalDiagnosis1Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("AdditionalDiagnosis2Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("AdditionalDiagnosis3Type")
                        .HasColumnType("smallint");

                    b.Property<int?>("AxisRightAngledInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("DemarcationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("DiagnosisPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("DiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DistanceToNippleInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("DistributionPatternType")
                        .HasColumnType("smallint");

                    b.Property<byte>("EnhancementType")
                        .HasColumnType("smallint");

                    b.Property<int>("FindingLocation")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HistologicallySecuredType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<byte>("InternalEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAdditionalIpsilateralLesionsSameEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChestWall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffusionRestriction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologicalConfirmation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntralesionalFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPectoralisMuscleInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSkinInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinated")
                        .HasColumnType("boolean");

                    b.Property<byte>("KMDynamicDelayedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("KMDynamicInitialType")
                        .HasColumnType("smallint");

                    b.Property<int?>("LargestDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<byte>("SignalT1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT2w")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisPageId");

                    b.HasIndex("ImageFileId")
                        .IsUnique();

                    b.ToTable("DiagnosisFindings");
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.DiagnosisFindingTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AdditionalDiagnosis1Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("DemarcationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("EnhancementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("KMDynamicDelayedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("KMDynamicInitialType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT2w")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("DiagnosisFindingTemplates");
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.DiagnosisPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("DiagnosisPages");
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.LymphsPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AxillaryLymphNodesType")
                        .HasColumnType("smallint");

                    b.Property<byte?>("CervicalMaxShortAxisInMm")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FocalLiverLesionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBones")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnlarged")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAxillary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAxillaryLevelI")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAxillaryLevelII")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAxillaryLevelIII")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftCervical")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftParasternal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizationLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizationRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMediastinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOverOneLesionsOfSameEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPericardium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPleura")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAxillary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAxillaryLevelI")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAxillaryLevelII")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAxillaryLevelIII")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightCervical")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightParasternal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThyroidNodule")
                        .HasColumnType("boolean");

                    b.Property<int?>("LeftAxillaryShortAxis")
                        .HasColumnType("integer");

                    b.Property<byte>("LeftBreastDetailType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LiverLesionBenigneType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LungDiseaseType")
                        .HasColumnType("smallint");

                    b.Property<byte?>("MaxDiameterAxialInMm")
                        .HasColumnType("smallint");

                    b.Property<byte>("OtherLymphNodesType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<int?>("RightAxillaryShortAxis")
                        .HasColumnType("integer");

                    b.Property<byte>("RightBreastDetailType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("LymphsPages");
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.MamillaFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsInvasion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRetraction")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("MamillaFinding");
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.OwnFamilyAnamnesisFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnamnesisPageId")
                        .HasColumnType("uuid");

                    b.Property<int?>("BreastCarcinomaAge")
                        .HasColumnType("integer");

                    b.Property<byte>("BreastCarcinomaType")
                        .HasColumnType("smallint");

                    b.Property<int>("BreastLocation")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsBreastCancer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOvarianCancer")
                        .HasColumnType("boolean");

                    b.Property<byte>("MenopauseType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<int?>("OvarianCancerAge")
                        .HasColumnType("integer");

                    b.Property<byte?>("OwnAnamnesisMonth")
                        .HasColumnType("smallint");

                    b.Property<int?>("OwnAnamnesisYear")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesisPageId");

                    b.ToTable("OwnFamilyAnamnesisFindings");
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.PatientIndicationFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ChestPainType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAntibiosis")
                        .HasColumnType("boolean");

                    b.Property<int>("NippleDischargeLocalization")
                        .HasColumnType("integer");

                    b.Property<byte>("NippleDischargeSinceWhen")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("PatientIndicationPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientIndicationPageId");

                    b.ToTable("PatientIndicationFindings");
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.PatientIndicationPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<byte>("MRIMammaType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MammasonographyDetails")
                        .HasColumnType("smallint");

                    b.Property<byte>("MammographyDetails")
                        .HasColumnType("smallint");

                    b.Property<byte?>("MonthOfLastMRT")
                        .HasColumnType("smallint");

                    b.Property<byte?>("MonthOfLastMammography")
                        .HasColumnType("smallint");

                    b.Property<byte?>("MonthOfLastMammosonography")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WasMammasonography")
                        .HasColumnType("boolean");

                    b.Property<bool>("WasMammography")
                        .HasColumnType("boolean");

                    b.Property<int?>("YearOfLastMRT")
                        .HasColumnType("integer");

                    b.Property<int?>("YearOfLastMammography")
                        .HasColumnType("integer");

                    b.Property<int?>("YearOfLastMammosonography")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("PatientIndicationPages");
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.PreviousTherapiesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnamnesisPageId")
                        .HasColumnType("uuid");

                    b.Property<int>("BreastLocation")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LeftReconstructionLocalization")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("RightReconstructionLocalization")
                        .HasColumnType("smallint");

                    b.Property<byte?>("TheraphyMonth")
                        .HasColumnType("smallint");

                    b.Property<int?>("TheraphyYear")
                        .HasColumnType("integer");

                    b.Property<byte>("TimeStatusType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesisPageId");

                    b.ToTable("PreviousTherapiesFindings");
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.RatingPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("BiopsyLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("BiopsyModalityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FurtherActionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBreastSurgeryConsultation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEvaluationInTumorBoard")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRI")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMammography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUltrasound")
                        .HasColumnType("boolean");

                    b.Property<byte?>("LeftBiRads")
                        .HasColumnType("smallint");

                    b.Property<byte>("LeftBiRadsLevel4Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("LeftBiRadsMulticentricType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LeftBiRadsMultifocalType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MRIDateType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MammographyDateType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MammographyLocationType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte?>("RightBiRads")
                        .HasColumnType("smallint");

                    b.Property<byte>("RightBiRadsLevel4Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("RightBiRadsMulticentricType")
                        .HasColumnType("smallint");

                    b.Property<byte>("RightBiRadsMultifocalType")
                        .HasColumnType("smallint");

                    b.Property<byte>("UltrasoundDateType")
                        .HasColumnType("smallint");

                    b.Property<byte>("UltrasoundLocationType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("RatingPages");
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.Sequence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Is3D")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDynamicsFollowingGdApplication")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateStage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParallelImaging")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSaturatedFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubtraction")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OrientationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SequenceType")
                        .HasColumnType("smallint");

                    b.Property<bool>("SiliconeSensitive")
                        .HasColumnType("boolean");

                    b.Property<bool>("SiliconeSuppressing")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("WeightingType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("Sequences");
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.SiliconeImplantFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte?>("CapsularFibrosisType")
                        .HasColumnType("smallint");

                    b.Property<int>("Location")
                        .HasColumnType("integer");

                    b.Property<decimal?>("LongestExtent")
                        .HasColumnType("numeric");

                    b.Property<byte?>("RuptureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SiliconeImplantType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("SiliconeImplantFinding");
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.TechnologyPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BarcodeCMCharge")
                        .HasColumnType("text");

                    b.Property<byte>("CMReinforcedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastMediumType")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("ContrastQuantity")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAutomatedCAInjection")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCMSideEffect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsComputerAidedAnalysisOfCADynamics")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCortisoneIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH1BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH2BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncorrectSubtraction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetalArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMotion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotFurtherSpecified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsO2Administration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOther")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPulsationOrBreathing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneousEpinephrine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSusceptibilityArtifacts")
                        .HasColumnType("boolean");

                    b.Property<byte>("MagneticFieldStrengthType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SequencesType")
                        .HasColumnType("smallint");

                    b.Property<string>("SetName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("TechnologyPages");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("Pages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("ReportResults")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.HasOne("RadioReport.MammaMRT.Domain.Models.PatientIndicationPage", null)
                        .WithOne("PatientInformation")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", null)
                        .WithOne("Session")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", "ReportSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.AnamnesisPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.AnatomyEnhancementPage", b =>
                {
                    b.HasOne("RadioReport.MammaMRT.Domain.Models.MamillaFinding", "MamillaFinding1")
                        .WithMany()
                        .HasForeignKey("MamillaFinding1Id");

                    b.HasOne("RadioReport.MammaMRT.Domain.Models.MamillaFinding", "MamillaFinding2")
                        .WithMany()
                        .HasForeignKey("MamillaFinding2Id");

                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RadioReport.MammaMRT.Domain.Models.SiliconeImplantFinding", "SiliconeImplantFinding1")
                        .WithMany()
                        .HasForeignKey("SiliconeImplantFinding1Id");

                    b.HasOne("RadioReport.MammaMRT.Domain.Models.SiliconeImplantFinding", "SiliconeImplantFinding2")
                        .WithMany()
                        .HasForeignKey("SiliconeImplantFinding2Id")
                        .HasConstraintName("FK_AnatomyEnhancementPages_SiliconeImplantFinding_SiliconeImp~1");
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.AnatomyPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.BonesFinding", b =>
                {
                    b.HasOne("RadioReport.MammaMRT.Domain.Models.BonesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("BonesPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.BonesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.CMSideEffect", b =>
                {
                    b.HasOne("RadioReport.MammaMRT.Domain.Models.TechnologyPage", null)
                        .WithMany("CMSideEffects")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.DiagnosisFinding", b =>
                {
                    b.HasOne("RadioReport.MammaMRT.Domain.Models.DiagnosisPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("DiagnosisPageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "UploadedImageFile")
                        .WithOne()
                        .HasForeignKey("RadioReport.MammaMRT.Domain.Models.DiagnosisFinding", "ImageFileId");
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.DiagnosisPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.LymphsPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.OwnFamilyAnamnesisFinding", b =>
                {
                    b.HasOne("RadioReport.MammaMRT.Domain.Models.AnamnesisPage", null)
                        .WithMany("OwnFamilyAnamnesisFindings")
                        .HasForeignKey("AnamnesisPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.PatientIndicationFinding", b =>
                {
                    b.HasOne("RadioReport.MammaMRT.Domain.Models.PatientIndicationPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("PatientIndicationPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.PatientIndicationPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.PreviousTherapiesFinding", b =>
                {
                    b.HasOne("RadioReport.MammaMRT.Domain.Models.AnamnesisPage", null)
                        .WithMany("PreviousTherapiesFindings")
                        .HasForeignKey("AnamnesisPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.RatingPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.Sequence", b =>
                {
                    b.HasOne("RadioReport.MammaMRT.Domain.Models.TechnologyPage", null)
                        .WithMany("Sequences")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.MammaMRT.Domain.Models.TechnologyPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
