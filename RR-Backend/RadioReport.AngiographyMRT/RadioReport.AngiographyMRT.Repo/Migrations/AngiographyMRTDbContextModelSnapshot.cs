// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RadioReport.AngiographyMRT.Repo;

namespace RadioReport.AngiographyMRT.Repo.Migrations
{
    [DbContext(typeof(AngiographyMRTDbContext))]
    partial class AngiographyMRTDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.AbdomenFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AbdomenPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("AnatomicVariantsOrPathologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ArisesFromCeliacTrunkType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CharacterizationType")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("DegreeOfStenosisAccordingToNASCETInPercentage")
                        .HasColumnType("numeric");

                    b.Property<byte>("DetailsType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DiameterNormalPoststenoticSegmentInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("DiameterStenosisInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("DirectOriginFromTheAbdominalAortaType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FurtherVariantsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HepatomesentericTrunkType")
                        .HasColumnType("smallint");

                    b.Property<byte>("IncompleteHepatomesentericTrunkType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAnatomicVariants")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAneurysmaticChanges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBifurcatedPreAndRetroarticLeftRenalVein")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCaudal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsClampingDamageWithAfferentArteryStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCollateralFlowViaPancreaticoduodenalArcades")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCollaterals")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCranial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDecreasedPerfusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDecreasedPerfusionOfTheLiverPeriphery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDissection")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEccentricPartialThrombosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFibromuscularDysplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemodynamicallyRelevant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHepatomesentericTrunk")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInferiorMesenteryArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInvolvementOfTheVisceralArteries")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftHepaticArteryArisesFromLeftGastricArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLimitedContrastOfTheRenalParenchyma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMarginalCalcifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMultifocalChanges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMultipleRenalVeins")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsObstructionHepatovenousOutflow")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOrthotopicRenalVascularizarion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPearlLikeChanges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPersistentDottedHyperContrastEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPortalVeinThrombosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPortoportalCollaterals")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPortosystemicCollateralPathways")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrestenoticDilatation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProminentPeriportalCollaterals")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRenalVeinThrombosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsResidualContrast")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRetroaortalCourseLeftRenalVein")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRiolanAnastomosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShortLengthStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSignsOfPortalHypertension")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSplenicArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStenosisOrOcclusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubtleChanges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperiorMesenteryArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT1wHyperintenseCorticalHaemorrhages")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTandemStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThrombolization")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTransplantRenalArteryKinking")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTransplantRenalArteryStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTransplantRenalArteryStenosisAanular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTransplantRenalArteryTorsion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVenousInfarction")
                        .HasColumnType("boolean");

                    b.Property<int?>("LengthInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("LevelOfTheObstructionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxPortalVeinDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("MesentericVesselsLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MinVesselDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OrganSizeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PearlLikeChangesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PortalVeinThrombosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("RenalArteryLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SeverityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("StatusType")
                        .HasColumnType("smallint");

                    b.Property<int?>("StentLengthInMm")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AbdomenPageId");

                    b.ToTable("AbdomenFindings");
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.AbdomenPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("AbdomenPages");
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.AnamnesisFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnamnesisPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAbdomen")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArterialHypertension")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBicuspidAorticValve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervical")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervicalLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervicalRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCocaine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCollagenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiabetesMellitus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHyperlipidemia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntracranial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsKnownLiverCirrhosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLowerLimb")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLowerLimbLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLowerLimbRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSmoking")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspiciousFor")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpperLimb")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpperLimbLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpperLimbRight")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("StadiumAccordingToFontaineType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesisPageId");

                    b.ToTable("AnamnesisFindings");
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.AnamnesisPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AfterTransplantationType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAfterTransplantation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBypass")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTAngiography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDigitalSubtractionAngiography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRAngiography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPTAOrStentImplantation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsValveSurgery")
                        .HasColumnType("boolean");

                    b.Property<byte>("MonthCTAngiography")
                        .HasColumnType("smallint");

                    b.Property<byte>("MonthDigitalSubtractionAngiography")
                        .HasColumnType("smallint");

                    b.Property<byte>("MonthMRAngiography")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<int>("YearCTAngiography")
                        .HasColumnType("integer");

                    b.Property<int>("YearDigitalSubtractionAngiography")
                        .HasColumnType("integer");

                    b.Property<int>("YearMRAngiography")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("AnamnesisPages");
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.AortaFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AnomaliesType")
                        .HasColumnType("smallint");

                    b.Property<int>("AortaLocation")
                        .HasColumnType("integer");

                    b.Property<int>("AortaLocationReentry")
                        .HasColumnType("integer");

                    b.Property<Guid?>("AortaPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("AorticAneurysmDifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("AortitisDifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("BeginningType")
                        .HasColumnType("smallint");

                    b.Property<int?>("CraniocaudalLengthInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("DeepInMm")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DegreeOfStenosisAccordingToNASCETInPercentage")
                        .HasColumnType("numeric");

                    b.Property<byte>("DetailsAorticArchKinkingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DetailsCongenitalVascularRingsType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DiameterNormalPoststenoticSegmentInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("DiameterStenosisInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FollowUpType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAberrantArteriaWithKommerellDiverticulum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAcuteExtravasalHematoma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnnuloaorticEctasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAorticEctasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAortitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBrachiocephalicTrunk")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCoeliacTrunk")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConcentric")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContrastEnhancementOfTheArterialWall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEccentric")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEccentricPartialThrombus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreeFloating")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemodynamicallyRelevant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypoplasticAorticArch")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInferiorMesentericArteryIMA")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIrregularContour")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftCarotidArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftCommonIliacArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftCoronaryArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftRenalArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftSubclavianArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMushroomShaped")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriaortitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPostoperativeResidualStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPoststenoticDilatation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPseudoaneurysm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAorticWithKommerellDiverticulum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightCommonIliacArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightCoronaryArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightRenalArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShortLengthStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperiorMesentericArterySMA")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspiciousOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSvenssonClassificationOfAorticDissection")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wHyperintensityOfArterialWallEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThrombosisFalseLumen")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThrombus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVascularDilatation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWallAdherent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWallHematomaHyperintenseInUnenhancedT1w")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWallThickening")
                        .HasColumnType("boolean");

                    b.Property<int?>("LengthInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxAorticDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxAxialDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxAxialDiameterPreviousExaminationInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxWidthInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathologyType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ProximalAneuysmaticNeckDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("ProximalNeckLengthInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("QuantificationAortitisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SeverityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("StanfordClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SvenssonClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("VascularDilatationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("WallThicknessInMm")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AortaPageId");

                    b.ToTable("AortaFindings");
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.AortaPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("AortaPages");
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.CMSideEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMSideEffectType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DurationAdverseReactionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCompletelyDeclining")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeriousAdverseEvent")
                        .HasColumnType("boolean");

                    b.Property<int?>("MinAfterCMinjection")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("CMSideEffects");
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.LocalizationPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<byte>("Localization")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("LocalizationPages");
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.PelvisLegArteriesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AnastomoticAneurysmType")
                        .HasColumnType("smallint");

                    b.Property<byte>("BypassType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CharacterizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationAccordingToTASCIIDetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationAccordingToTASCIISubType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationAccordingToTASCIIType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CollectionWithoutContrastEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ComplicationsType")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("DegreeOfStenosisAccordingToNASCETInPercentage")
                        .HasColumnType("numeric");

                    b.Property<int?>("DiameterNormalPoststenoticSegmentInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("DiameterStenosisInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("ExtentType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActiveBleedingOrFreshHematoma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnastomoticAneurysm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArterialWallEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBridgingCollaterals")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCollateralsFromAdjacentVessels")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConcentricFilumTerminaleSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCorkscrewCollaterals")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDetectionOfCystsWithinTheVesselWall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEccentric")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEspeciallyPeriprostheticInfection")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemodynamicallyRelevant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHighOriginAnteriorTibialArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHighOriginPeronealArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHighOriginPosteriorTibialArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMicroaneurysm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPartiallyThrombosed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeripheralOcclusionsOrStenoses")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriprostheticFluidCollection")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPersistentIschiadicArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPoorCollateralization")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegmentalOcclusions")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeveralShortStretchStenoses")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShortLengthStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSingularStenosisLessThan1Cm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuddenChangeInDiameter")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wHyperintensityOfVascularWallOrOedema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTortuousCourseOfTheSuperficialFemoralArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTypeA")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTypeB")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTypeC")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTypeD")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTypeV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWallThickening")
                        .HasColumnType("boolean");

                    b.Property<int?>("LengthEmbolusInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("LengthInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("LocalizationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathologySubType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathologyType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("PelvisLegArteriesPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PeriprostheticFluidCollectionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SeverityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("StenosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TherapyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("VascularPathologyLocalizationType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("PelvisLegArteriesPageId");

                    b.ToTable("PelvisLegArteriesFindings");
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.PelvisLegArteriesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("PelvisLegArteriesPages");
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.Sequence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ContrastEnhancedMRAngiographyType")
                        .HasColumnType("smallint");

                    b.Property<bool>("Is3D")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsECGTriggering")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMIP")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMPR")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParallelImaging")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSaturatedFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVRT")
                        .HasColumnType("boolean");

                    b.Property<byte>("MethodType")
                        .HasColumnType("smallint");

                    b.Property<byte>("NonContrastEnhancedMRAngiographyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OrientationType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("Sequences");
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.SummaryPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ComparisonToPriorExamsType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFollowUp")
                        .HasColumnType("boolean");

                    b.Property<byte>("ModalityType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("TimeInterval")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SummaryPages");
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.SupraaorticVesselsFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AffectedBranchType")
                        .HasColumnType("smallint");

                    b.Property<int>("AffectedSegmentsOrVesselsLocation")
                        .HasColumnType("integer");

                    b.Property<int?>("DegreeOfStenosisCalculatedInNASCET")
                        .HasColumnType("integer");

                    b.Property<int?>("DiameterDiseaseFreePoststenoticSegment")
                        .HasColumnType("integer");

                    b.Property<int?>("DiameterStenosis")
                        .HasColumnType("integer");

                    b.Property<byte>("DifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("InternalCarotidArterySegmentsLocation")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsBranchesOfTheExternalCarotidArteryToTheOphthalmicArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCaliberIrregularities")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCerebralEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCirculusArteriosusWillisii")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConfluenceOfSinuses")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContralateralInternalCarotidArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContralateralVertebralArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContrastEnhancementOfTheArterialWall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGreatCerebralVein")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemodynamicallyRelevant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInferiorSagittalSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftA1Aplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftA1FenestrationOrDuplication")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftA1Hypoplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAcomAAplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAcomAFenestrationOrDuplication")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftCavernousSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftP1Aplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftP1FenestrationOrDuplication")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftP1HypoplasiaOrFTPConfiguration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftPICATerminationVA")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftPcomAAplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftPcomAHypoplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftPetrosalSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftSigmoidSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftTransverseSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftTriplicatedACA")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftVAAplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftVAHypoplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeptomeningealCollaterals")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOphtalmicArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPanarteritisNodosa")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorCommunicansArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightA1Aplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightA1FenestrationOrDuplication")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightA1Hypoplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAcomAAplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAcomAFenestrationOrDuplication")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightCavernousSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightP1Aplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightP1FenestrationOrDuplication")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightP1HypoplasiaOrFTPConfiguration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightPICATerminationVA")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightPcomAAplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightPcomAHypoplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightPetrosalSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightSigmoidSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightTransverseSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightTriplicatedACA")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightVAAplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightVAHypoplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegmentV1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegmentV2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegmentV3")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegmentV4")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShortStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStraightSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubarachnoidHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperiorSagittalSinus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wHyperintensityOfArterialWallOrEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWallHematoma")
                        .HasColumnType("boolean");

                    b.Property<int?>("Length")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxDiameter")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SeverityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SubarachnoidHemorrhageType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("SupraaorticVesselsPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SupraaorticVesselsPageId");

                    b.ToTable("SupraaorticVesselsFindings");
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.SupraaorticVesselsPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SupraaorticVesselsPages");
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.TechnologyPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BarcodeCMCharge")
                        .HasColumnType("text");

                    b.Property<byte>("CMReinforcedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastMediumType")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("ContrastQuantity")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCMSideEffect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCortisoneIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH1BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH2BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInadequateBolusTiming")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetalArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMotion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotFurtherSpecified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsO2Administration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOther")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPulsationOrBreathing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneousEpinephrine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSusceptibilityArtifacts")
                        .HasColumnType("boolean");

                    b.Property<byte>("MagneticFieldStrengthType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SequencesType")
                        .HasColumnType("smallint");

                    b.Property<string>("SetName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("TechnologyPages");
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.UpperArteriesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ArteriovenousMalformationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CharacterizationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DegreeOfStenosisAccordingToNASCET")
                        .HasColumnType("integer");

                    b.Property<byte>("DetailsVascularMalformationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DiameterDiseaseFreePoststenoticSegment")
                        .HasColumnType("integer");

                    b.Property<int?>("DiameterStenosis")
                        .HasColumnType("integer");

                    b.Property<byte>("DifferentialDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis2")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HemodialysisShuntType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAneurysm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBrachiocephalicTrunk")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCaliberVariations")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCollateralization")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContrastEnhancementOfTheArterialWall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCorkscrewCollaterals")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDistalAspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemodynamicallyRelevant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfection")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAxillarArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftBrachialArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftDeepPalmarArch")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftDistalAspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftMidAspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftPalmarDigitalArteries")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftProximalAspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftRadialArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftSubclavianArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftSuperficialPalmarArch")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftUlnarArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMicroaneurysms")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMidAspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOcclusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPreStenoticDilatation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProximalAspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAxillarArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightBrachialArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightDeepPalmarArch")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightDistalAspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightMidAspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightPalmarDigitalArteries")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightProximalAspect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightRadialArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightSubclavianArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightSuperficialPalmarArch")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightUlnarArtery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegmentalOcclusions")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeveralShortStenoses")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShortStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubclavianStealSyndrome")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspiciousFor")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wHyperintensityOfArterialWallOrEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThrombusSurroundedByContrastAgent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWallHematoma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWallThickening")
                        .HasColumnType("boolean");

                    b.Property<byte>("LeftNumberOfAffectedArteriesType")
                        .HasColumnType("smallint");

                    b.Property<int?>("Length")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxDiameter")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("RightNumberOfAffectedArteriesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SeverityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("UpperArteriesPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UpperArteriesPageId");

                    b.ToTable("UpperArteriesFindings");
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.UpperArteriesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("UpperArteriesPages");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PageNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("WasModified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("PageInfos");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessionNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Evaluation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExaminationType")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("FindingsDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FreeField")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("LicenseFractionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LicensingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("PatientAge")
                        .HasColumnType("smallint");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PresetCode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StudyInstanceUID")
                        .HasColumnType("text");

                    b.Property<byte>("TotalPageCount")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Approved")
                        .HasColumnType("text");

                    b.Property<string>("Discussion")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsICD10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferenceImage")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReportSummary")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportResults");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ReportSession");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<byte?>("Age")
                        .HasColumnType("smallint");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PatientInformation");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.FindingLocalizer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mapping")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FindingLocalizers");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("BuildVersion")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Paragraphs")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportTypeName", "VersionName")
                        .IsUnique();

                    b.ToTable("ReportSchemas");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ReportSchemaId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportSchemaId")
                        .IsUnique();

                    b.ToTable("ReportSchemaSessions");
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.AbdomenFinding", b =>
                {
                    b.HasOne("RadioReport.AngiographyMRT.Domain.Models.AbdomenPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("AbdomenPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.AbdomenPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.AnamnesisFinding", b =>
                {
                    b.HasOne("RadioReport.AngiographyMRT.Domain.Models.AnamnesisPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("AnamnesisPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.AnamnesisPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.AortaFinding", b =>
                {
                    b.HasOne("RadioReport.AngiographyMRT.Domain.Models.AortaPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("AortaPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.AortaPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.CMSideEffect", b =>
                {
                    b.HasOne("RadioReport.AngiographyMRT.Domain.Models.TechnologyPage", null)
                        .WithMany("CMSideEffects")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.LocalizationPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.PelvisLegArteriesFinding", b =>
                {
                    b.HasOne("RadioReport.AngiographyMRT.Domain.Models.PelvisLegArteriesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("PelvisLegArteriesPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.PelvisLegArteriesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.Sequence", b =>
                {
                    b.HasOne("RadioReport.AngiographyMRT.Domain.Models.TechnologyPage", null)
                        .WithMany("Sequences")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.SummaryPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.SupraaorticVesselsFinding", b =>
                {
                    b.HasOne("RadioReport.AngiographyMRT.Domain.Models.SupraaorticVesselsPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("SupraaorticVesselsPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.SupraaorticVesselsPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.TechnologyPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.UpperArteriesFinding", b =>
                {
                    b.HasOne("RadioReport.AngiographyMRT.Domain.Models.UpperArteriesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("UpperArteriesPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.AngiographyMRT.Domain.Models.UpperArteriesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("Pages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("ReportResults")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.HasOne("RadioReport.AngiographyMRT.Domain.Models.LocalizationPage", null)
                        .WithOne("PatientInformation")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", null)
                        .WithOne("Session")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", "ReportSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
