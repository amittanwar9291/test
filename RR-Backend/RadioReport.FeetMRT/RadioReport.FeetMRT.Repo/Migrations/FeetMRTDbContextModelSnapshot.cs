// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RadioReport.FeetMRT.Repo;

namespace RadioReport.FeetMRT.Repo.Migrations
{
    [DbContext(typeof(FeetMRTDbContext))]
    partial class FeetMRTDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PageNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("WasModified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("PageInfos");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessionNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Evaluation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExaminationType")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("FindingsDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FreeField")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("LicenseFractionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LicensingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("PatientAge")
                        .HasColumnType("smallint");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PresetCode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StudyInstanceUID")
                        .HasColumnType("text");

                    b.Property<byte>("TotalPageCount")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Approved")
                        .HasColumnType("text");

                    b.Property<string>("Discussion")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsICD10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferenceImage")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReportSummary")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportResults");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ReportSession");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<byte?>("Age")
                        .HasColumnType("smallint");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PatientInformation");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.FindingLocalizer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mapping")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FindingLocalizers");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("BuildVersion")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Paragraphs")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportTypeName", "VersionName")
                        .IsUnique();

                    b.ToTable("ReportSchemas");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ReportSchemaId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportSchemaId")
                        .IsUnique();

                    b.ToTable("ReportSchemaSessions");
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.Anamnesis.AnamnesisIndication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnamnesisPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("IndicationType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsSuspected")
                        .HasColumnType("boolean");

                    b.Property<byte>("LesionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PeriodTraumaMonth")
                        .HasColumnType("smallint");

                    b.Property<int>("PeriodTraumaYear")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesisPageId");

                    b.ToTable("AnamnesisIndications");
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.Anamnesis.AnamnesisPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CTMonth")
                        .HasColumnType("smallint");

                    b.Property<int>("CTYear")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRI")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsXRay")
                        .HasColumnType("boolean");

                    b.Property<byte>("MRIMonth")
                        .HasColumnType("smallint");

                    b.Property<int>("MRIYear")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("XRayMonth")
                        .HasColumnType("smallint");

                    b.Property<int>("XRayYear")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("AnamnesisPages");
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.BonesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("ApophysitisMorbusIselin")
                        .HasColumnType("boolean");

                    b.Property<bool>("ApophysitisMorbusSever")
                        .HasColumnType("boolean");

                    b.Property<byte>("ArthritisDifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ArticularSurfacesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("AssociatedFindingsType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("BonesPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("ContrastAgentEnhancementFormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastAgentEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CortexType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DetectionDissekatType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DiameterLesionInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("DifferentialDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis2")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis3")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DislocationClassificationDetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DislocationClassificationSubType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DislocationClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DislocationLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DislocationStageType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DistalTibiaFractureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("EpiphysealJointsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ErosionsLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ExpansionLargestDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<int>("FootThreeSidesLocalization")
                        .HasColumnType("integer");

                    b.Property<byte>("FractureClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureFormSubType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureTypeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HistologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("InflammatoryBoneMarrowEdemaLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("IntensityType")
                        .HasColumnType("smallint");

                    b.Property<int?>("IntrabonyAbscessSizeInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("IntraosseousAbscessSecondPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("IntraosseousAbscessThirdPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAdjacentArticularEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnkylosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnterior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArticularEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneApposition")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilageCap")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCentral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChondrocalcinosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChondropathy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDestruction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDestructions")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDetectionFragment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiaphyseal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffuse")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdgeWithLowSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnvironmentalReactionBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnvironmentalReactionSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpiphyseal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsErosions")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExpanding")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFibulaNeckFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForefoot")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFractureOfTheMedialMalleolus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFrontalCoronal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGeographic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHindfoot")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHyperplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncreasedContrastEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationOfAdjacentBones")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationOfSoftTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInflammatoryBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInsideTheBonePrimarilyAffected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraossalAbscessMoreThanOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraosseousAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraosseousCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiquidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLobulated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMedArticularSurfaceInclMedMalleolus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMedial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetaphyseal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMidfoot")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLesionSameEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidusT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOrientationFromTheEpiphysisTowardTheDiaphysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoblastic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoidMatrix")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteophytes")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPannus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPathologicFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPathologicalFractureSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPedunculated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPenumbraSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerifocalSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealRupture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealSpur")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeripheralContrastEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorVolkmann")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProliferativeBoneChanges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProximalTibiofibularJointDislocation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRound")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRuptureOfTheDeltoidLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSagittalPlane")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerotic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScleroticMargin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeptatedChambered")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSequesterNoContrastEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSequestrum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSequestrumMoreThanOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSessile")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralCyst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralCystsGeodes")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubperiostealAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSurroundingInflammatoryReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSyndesmosisUnstable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovialCyst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2HyperintenseRim")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wHyperintensity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThinning")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWagstaffeLeFortAvulsionFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsnTillauxChaputTubercleFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("KohlerDiseaseI")
                        .HasColumnType("boolean");

                    b.Property<bool>("KohlerDiseaseII")
                        .HasColumnType("boolean");

                    b.Property<byte>("LimitationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalPropagationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxThicknessInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("MedialMalleolusType")
                        .HasColumnType("smallint");

                    b.Property<byte>("NoCaEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OsteochondralLesionClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("OsteomyelitisDifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("OuterbridgeClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("RadioulnarSynostosisType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SecondPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("SequesterSecondPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("SequesterThirdPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("SequestrumSizeInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("SignalT1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT2w")
                        .HasColumnType("smallint");

                    b.Property<int?>("SizeInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("SpaceRequirementDifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("StageType")
                        .HasColumnType("smallint");

                    b.Property<byte>("StandardVariantType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SubperiostealAbscessSizeInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("SynarthrosisType")
                        .HasColumnType("smallint");

                    b.Property<bool>("ThiemannDisease")
                        .HasColumnType("boolean");

                    b.Property<int?>("ThirdPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<decimal>("ThreeDimensionalLocalization")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("BonesPageId");

                    b.ToTable("BonesFindings");
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.BonesFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ContrastAgentEnhancementFormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastAgentEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CortexType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilageCap")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCentral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffuse")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdgeWithLowSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnvironmentalReactionBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnvironmentalReactionSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpiphyseal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExpanding")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationOfSoftTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiquidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLobulated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetaphyseal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidusT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOrientationFromTheEpiphysisTowardTheDiaphysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoblastic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoidMatrix")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPedunculated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealSpur")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRound")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerotic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScleroticMargin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeptatedChambered")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSessile")
                        .HasColumnType("boolean");

                    b.Property<byte>("LimitationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("NoCaEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT2w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpaceRequirementDifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("BonesFindingPresets");
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.BonesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("BonesPages");
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.LigamentsAndTendonsFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AgeOfTheLesionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("AssociatedFindingsType")
                        .HasColumnType("smallint");

                    b.Property<int?>("CraniocaudaleExtensionInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("DiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("DifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DistanceFromTuberCalcanei")
                        .HasColumnType("integer");

                    b.Property<int?>("DistanceToTuberCalcaneiInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("ExtraarticularLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAccompanyingBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAfterHalluxValgusSurgery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnkleJointEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnteriorProcessOfTheCalcaneus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnteriorTalofibularLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnteriorTibiofibularLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnteriorTibiotalarLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvulsionFractureOfTheMedialMalleolus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcaneocuboidalLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcaneofibularLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcaneonavicularLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcifyingTendinitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervicalLigamentRupture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContactWithOsteosynthesisMaterial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConvexAnteriorContour")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDorsalHeelSpur")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdemaInKagerFatPad")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidInTendonSheath")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidInTheCommonTendonSheathOfThePeronealTendons")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidInTheTendonSheathDistalToTheLateralMalleolus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFusiformContour")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGanglion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGanglionAtTheLevelOfTheInsertionAtOsMetatarsalD1OsCuboideum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGanglionToInsertionBaseDistalPhalanxD1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHaglundDeformity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncreasedT2Signal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInferoplantarLongitudinalLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInterosseousTibiofibularLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntratendinousSoftTissueFoci")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLongPlantarLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLongitudinalTear")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMPeroneusLongusTendon")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMedioplantarObliqueLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsPeroneum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsTibialAccessorium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsTrigonumSyndrome")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsseousAvulsionFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteitisOnTheTuberCalcanei")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParsTibiocalcaneareBonyAvulsionOnMalleolusMedialis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeritendinitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeritendinousEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPesPlanumDeformity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorTalofibularLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorTibiofibularLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorTibiotalarLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPseudotumorOnTheBackOfTheFoot")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReRupture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRetrocalcanealSubachillealBursitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScarTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShortPlantarLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueHematoma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperomedialCalcaneonavicularLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT1wHyperintensity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wPDHyperintensity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTalocalcanealInterosseouseLigamentRupture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTalocalcanealLigamentRupture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTarsalSinusFatEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTear")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendinopathy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonDislocation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonHypervascularisation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonHypervascularization")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendovaginitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendovaginitisDueToOsteophyteAtDorsomedialDistalTibia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTertiusFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTibiocalcanealLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTibionavicularLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWithRetraction")
                        .HasColumnType("boolean");

                    b.Property<byte>("LigamentaLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LigamentaType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("LigamentsAndTendonsPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("LocalizationOfTendonRuptureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxExtentInCrossSectionInPercent")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxSagittalDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PartialRuptureType")
                        .HasColumnType("smallint");

                    b.Property<int?>("RetractionInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("RuptureLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("RuptureType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SizeInMm")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LigamentsAndTendonsPageId");

                    b.ToTable("LigamentsAndTendonsFindings");
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.LigamentsAndTendonsPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("LigamentsAndTendonsPages");
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.LocalizationPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnkleJoint")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFoot")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForefoot")
                        .HasColumnType("boolean");

                    b.Property<byte>("Localization")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("LocalizationPages");
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.SoftTissueFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AbscessMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("AdjacentGanglionMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("AgeType")
                        .HasColumnType("smallint");

                    b.Property<int?>("CcExpansionInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("ClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CmEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("D1Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("DemarcationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DetailMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("DetailType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis2")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis3")
                        .HasColumnType("smallint");

                    b.Property<byte>("DimensionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DiseasesOfTheMTPLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DiseasesOfTheMtpType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DistanceOfTheOSGInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("Expansion2ndStageInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("Expansion3rdStageInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpansionSizeMaxInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("FibromaMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FredericsonStadiumType")
                        .HasColumnType("smallint");

                    b.Property<int?>("FreeJointBodyDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("GrowthPatternsType")
                        .HasColumnType("smallint");

                    b.Property<int?>("HalluxValgusAngleInDegrees")
                        .HasColumnType("integer");

                    b.Property<byte>("HistologyKnownType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("InTheMetatarsotarsalJoints")
                        .HasColumnType("boolean");

                    b.Property<byte>("InterdigitalSpaceType")
                        .HasColumnType("smallint");

                    b.Property<int?>("IntermetatarsalAngleInDegrees")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAccompanyingBursitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdjacentGanglion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApophysitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArticularEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBleedingIn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBloomingArtifact")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBold")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowEdemaOfTheCalcaneus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowEdemaZone1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowEdemaZone2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowEdemaZone3")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowEdemaZone4")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowEdemaZone5")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBonyAvulsion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBonyErosionsInsertionSynovialMembrane")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBreakInLongitudinalVault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursaIntermetatarsale")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursaMetatarsophalangealis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursaRetrocalcaneal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursaSubcutaneaCalcanea")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursaSubcutaneaLateralMalleolus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursaSubcutaneaMedialMalleolus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCentral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCloseToTheCalcaneus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCrossDiameterOfTheRuptureLessThan5Mm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCrossDiameterOfTheRuptureMoreThan5Mm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCutisThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsD1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsD2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsD3")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsD4")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsD5")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDifferentialDiagnosisArthrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDifferentialDiagnosisOsteomyelitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffusionRestriction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDilatedVein")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDistalLocalization")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExpansionUpToCollateralLigaments")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExtraarticular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExtravasationArticularEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFasciaTear")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFattyDegeneration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFibroma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFragmentation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreeJointBody")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreeJointBodyMoreThanOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGhostCharacterInT1w")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHaemarthros")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHematoma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHeterogeneousSignalIntensityInT1wOrT2w")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHigherT2wOrPDSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologyKnown")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHyperplasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypervascularization")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInTheMetatarsophalangealJoints")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInTheSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncreasedCMEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInterfacial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntermuscular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraarticular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntracorticalEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntramuscular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsJointDestruction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsJointDestructionZone1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsJointDestructionZone2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsJointDestructionZone3")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsJointDestructionZone4")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsJointDestructionZone5")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralDeviation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralDislocationTheSesamoidBones")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralProliferationSesamoidBones")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLinearIntramedullaryT1wHypointensity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLisfrancJoint")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLowSignalThrombusInDeepPlantarVein")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLowSignalThrombusWithFillingDefect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLuxation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLuxationMTP")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMAbductorDigitiMinimi")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMFlexorDigitorumBrevis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMQuadratusPlantae")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMedial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetatarsalBursa")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMicrofracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMortonNovelty")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscleHerniation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscleLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscularAtrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecroses")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNode")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsCuboideum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsNavicular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsNaviculareAfterCranialMedial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOssaCuneiforme")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOssaMetatarsalia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOssaMetatarsaliaCranialAndLateral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteomyelitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriarticularlyAccentuated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPericapsularFibrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerivascularEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPhlegmone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPlantarHeelSpur")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPressureCorrosionBone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProximalLocalization")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPseudoexostosisMedial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRetraction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRockerbottomDeformity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSignalIncreaseOfTheAdjacentMusculature")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSignalVoids")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueInfection")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpindleShaped")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubluxationInBigToeMetatarsophalangealJoint")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSurroundingEdemaOrPerifasciitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSurroundingInflammatoryReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSusceptibilityArtifact")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovialEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovialNodulusMoreThanOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT1wIncreasedSignalIntensityTheFascia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wIncreasedSignalIntensityTheFascia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTalusHeadLowering")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickeningOfTheFascia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTumorCenterLiesPlantarOfTheLigMetatarsalTransversumProfundum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUlcerationOfTheSoleOfTheFoot")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWavyCourseOfTheFibers")
                        .HasColumnType("boolean");

                    b.Property<byte>("LimitationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationOfTheSynoviaSynovitisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationWithinOfTheMuscleType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxAxialExpansionInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxDiameterBursa")
                        .HasColumnType("integer");

                    b.Property<byte>("MuscleChangeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MuscleLesionLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MuscularAtrophyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("NodeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PlantarFasciaDiseaseType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PowerfulHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("QualityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("QuantitativeHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("QuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<int?>("RetractionDimensionInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("RetractionInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("RuptureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalBehaviorT1wType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalBehaviorT2wType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT2w")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("SoftTissuePageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SynoviaFormType")
                        .HasColumnType("smallint");

                    b.Property<int>("TendonsLocalization")
                        .HasColumnType("integer");

                    b.Property<decimal>("ThreeDimensionalLocalization")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("SoftTissuePageId");

                    b.ToTable("SoftTissueFindings");
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.SoftTissueFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("DemarcationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GrowthPatternsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAccompanyingBursitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBold")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecroses")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSignalVoids")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTumorCenterLiesPlantarOfTheLigMetatarsalTransversumProfundum")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("QuantitativeHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("QuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT2w")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("SoftTissueFindingPresets");
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.SoftTissuePage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SoftTissuePages");
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.SummaryPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("EvaluationType")
                        .HasColumnType("integer");

                    b.Property<int>("FollowUpTimeType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFollowUp")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSupplementaryDiagnosticsXray")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<int>("TClassificationType")
                        .HasColumnType("integer");

                    b.Property<bool>("isBiopsy")
                        .HasColumnType("boolean");

                    b.Property<bool>("isSupplementaryDiagnosticsCT")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SummaryPages");
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.Technology.Sequence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Is3D")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParallelImaging")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPostContrast")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSaturatedFat")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OrientationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SequenceType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("WeightingType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("Sequences");
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.Technology.TechnologyPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BarcodeCMCharge")
                        .HasColumnType("text");

                    b.Property<byte>("CMReinforcedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastMediumType")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("ContrastQuantity")
                        .HasColumnType("numeric");

                    b.Property<int?>("DilutionAmount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCMSideEffect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCortisoneIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH1BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH2BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIndirectArthrography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraarticular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntravenous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMagicAngleArtifact")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetalArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMotion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotFurtherSpecified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsO2Administration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOther")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneousEpinephrine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSusceptibilityArtifacts")
                        .HasColumnType("boolean");

                    b.Property<byte>("MagneticFieldStrengthType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SequencesType")
                        .HasColumnType("smallint");

                    b.Property<string>("SetName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("TechnologyPages");
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Technology.Domain.Models.Technology.CMSideEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMSideEffectType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DurationAdverseReactionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCompletelyDeclining")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeriousAdverseEvent")
                        .HasColumnType("boolean");

                    b.Property<int?>("MinAfterCMinjection")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("CMSideEffects");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("Pages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("ReportResults")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.HasOne("RadioReport.FeetMRT.Domain.Models.LocalizationPage", null)
                        .WithOne("PatientInformation")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", null)
                        .WithOne("Session")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", "ReportSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.Anamnesis.AnamnesisIndication", b =>
                {
                    b.HasOne("RadioReport.FeetMRT.Domain.Models.Anamnesis.AnamnesisPage", null)
                        .WithMany("Indications")
                        .HasForeignKey("AnamnesisPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.Anamnesis.AnamnesisPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.BonesFinding", b =>
                {
                    b.HasOne("RadioReport.FeetMRT.Domain.Models.BonesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("BonesPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.BonesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.LigamentsAndTendonsFinding", b =>
                {
                    b.HasOne("RadioReport.FeetMRT.Domain.Models.LigamentsAndTendonsPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("LigamentsAndTendonsPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.LigamentsAndTendonsPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.LocalizationPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.SoftTissueFinding", b =>
                {
                    b.HasOne("RadioReport.FeetMRT.Domain.Models.SoftTissuePage", null)
                        .WithMany("Findings")
                        .HasForeignKey("SoftTissuePageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.SoftTissuePage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.SummaryPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.Technology.Sequence", b =>
                {
                    b.HasOne("RadioReport.FeetMRT.Domain.Models.Technology.TechnologyPage", null)
                        .WithMany("Sequences")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Domain.Models.Technology.TechnologyPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.FeetMRT.Technology.Domain.Models.Technology.CMSideEffect", b =>
                {
                    b.HasOne("RadioReport.FeetMRT.Domain.Models.Technology.TechnologyPage", null)
                        .WithMany("CMSideEffects")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
