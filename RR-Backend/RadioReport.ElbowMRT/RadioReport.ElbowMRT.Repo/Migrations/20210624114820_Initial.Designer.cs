// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RadioReport.ElbowMRT.Repo;

namespace RadioReport.ElbowMRT.Repo.Migrations
{
    [DbContext(typeof(ElbowMRTDbContext))]
    [Migration("20210624114820_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PageNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("WasModified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("PageInfos");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessionNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Evaluation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExaminationType")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("FindingsDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FreeField")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("LicenseFractionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LicensingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("PatientAge")
                        .HasColumnType("smallint");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PresetCode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StudyInstanceUID")
                        .HasColumnType("text");

                    b.Property<byte>("TotalPageCount")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Approved")
                        .HasColumnType("text");

                    b.Property<string>("Discussion")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsICD10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferenceImage")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReportSummary")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportResults");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ReportSession");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<byte?>("Age")
                        .HasColumnType("smallint");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PatientInformation");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.FindingLocalizer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mapping")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FindingLocalizers");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("BuildVersion")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Paragraphs")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportTypeName", "VersionName")
                        .IsUnique();

                    b.ToTable("ReportSchemas");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ReportSchemaId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportSchemaId")
                        .IsUnique();

                    b.ToTable("ReportSchemaSessions");
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.AnamnesisPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte?>("CTMonth")
                        .HasColumnType("smallint");

                    b.Property<int?>("CTYear")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRI")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsXRay")
                        .HasColumnType("boolean");

                    b.Property<byte?>("MRIMonth")
                        .HasColumnType("smallint");

                    b.Property<int?>("MRIYear")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte?>("XRayMonth")
                        .HasColumnType("smallint");

                    b.Property<int?>("XRayYear")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("AnamnesisPages");
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.BonesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AoClassificationType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("BonesPageId")
                        .HasColumnType("uuid");

                    b.Property<int?>("CartilageCapMaxThicknessInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("ClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ComplexDislocationFracturesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CorticalisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis2")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis3")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DirectionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DistributionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ExtensionSecondPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("ExtensionSizeInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("ExtensionThirdPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureFormDetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureFormSubType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureFormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GraduationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HistologyConfirmedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<int?>("IntraosseousAbscessSecondPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("IntraosseousAbscessSizeInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("IntraosseousAbscessThirdPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<bool>("IsApophysitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneApposition")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilageCap")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCentral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCodmanTriangle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsComplexDislocationFracturesStatusPost")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDestruction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiaphyseal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffuselyDistributed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDirectionStatusPost")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpicondylitisHumeri")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpiphyseal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExpansile")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGeographic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologicallyConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHumerusDistal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHumerusLateralEpicondyle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHumerusMedialEpicondyle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsImpaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationOfAdjacentBones")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationOfSoftTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraosseousAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraosseousAbscessMoreThanOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsJointSpaceNarrowing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLobulated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLooseBody")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetaphyseal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLesionSameEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLooseBody")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidusT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNoCmEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOlecranon")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOrientation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoblastic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoidMatrix")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteophytes")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPathologicalFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPathologicalFractureSuspectedDiagnosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPedunculated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPenumbraSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerifocalSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealReactionSunBurst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealRupture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeripheralContrastEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRadial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRadialHead")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRadioulnarSynostosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRadiusProximal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRimWithLowSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRound")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerotic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScleroticMargin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeptatedChambered")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSequester")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSequesterMoreThanOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSessile")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubperiostealAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSupracondylarProcess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSupratrochlearFormen")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSurroundingInflammatoryReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspectedDiagnosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThinningScalopping")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUlnaProximal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUlnar")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWithinThePrimarilyAffectedBone")
                        .HasColumnType("boolean");

                    b.Property<byte>("LimitationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalExtensionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationLongitudinalType")
                        .HasColumnType("smallint");

                    b.Property<int?>("LooseBodyMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("LooseBodyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MonteggiaFractureType")
                        .HasColumnType("smallint");

                    b.Property<byte>("NotFurtherSpecifiedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<int?>("SequesterSecondPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("SequesterSizeInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("SequesterThirdPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("SignalT1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT2w")
                        .HasColumnType("smallint");

                    b.Property<byte>("StadiumType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SubperiostealAbscessSecondPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("SubperiostealAbscessSizeInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("SubperiostealAbscessThirdPlaneInMm")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BonesPageId");

                    b.ToTable("BonesFindings");
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.BonesFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ContrastEnhancementDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CorticalisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilageCap")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCentral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCodmanTriangle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffuselyDistributed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpiphyseal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExpansile")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGeographic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationOfSoftTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLobulated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetaphyseal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLesionSameEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidusT2wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOrientation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoblastic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoidMatrix")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPedunculated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealReactionSunBurst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRimWithLowSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRound")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerotic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScleroticMargin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeptatedChambered")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSessile")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<byte>("LimitationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT2w")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("BonesFindingPresets");
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.BonesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("BonesPages");
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.CMSideEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMSideEffectType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DurationAdverseReactionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCompletelyDeclining")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeriousAdverseEvent")
                        .HasColumnType("boolean");

                    b.Property<int?>("MinAfterCMinjection")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("CMSideEffects");
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.CartilageFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CapsuleType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CartilageLocation")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("CartilagePageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("CharacterizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationSubType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CompleteRuptureLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DetectionFragmentationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("EpiphysealJointsClassificationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("EtiologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ExtentOfTearType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GeneralCharacterizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("InstabilityRingTheoryType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAccessoryLateralCollateralLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdjacentSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnconeusMuscleLesionExtensorTendonComplex")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnnularLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnterior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnteriorBundle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilageDestruction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChondrocalcinosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConcomitantInjuriesOfTheAdjacentMuscleEnthesis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDetailsOsteochondralDefectLooseBody")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExtraarticularJointEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGeneral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemarthros")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIllDefined")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIllDefinedMargin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncreasedSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraosseousCystsAdjacentToLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsJointEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralUlnarCollateralLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLesionOfThePronatorFlexorTendonComplex")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLesionOutlinedByHighSignalFluid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalChondropathy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalSynovialInflammation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalization")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLooseBody")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThan3MmMaximumExtension")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThan4MmDiameter")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorBundle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosterolateral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProminentPlicaHumeroradialis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRadialCollateralLigament")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRetraction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubchondralCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovialCMEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynovitisWithPannusFormation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTransversalBundle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWavyAppearance")
                        .HasColumnType("boolean");

                    b.Property<byte>("LigamentsLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OuterbridgeClassificationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SecondPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("SizeInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("StagingType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ThirdPlaneInMm")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartilagePageId");

                    b.ToTable("CartilageFindings");
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.CartilagePage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("CartilagePages");
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.LocalizationPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<byte>("Localization")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("LocalizationPages");
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.Sequence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Is3D")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParallelImaging")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPostContrast")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSaturatedFat")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OrientationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SequenceType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("WeightingType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("Sequences");
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.SoftTissueFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AneurysmLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ArticularEffusionLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("AssociatedFindingsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CAEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CompressionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DemarcationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis1Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis2Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis3Type")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ExtensionLevel2InMm")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ExtensionLevel3InMm")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ExtensionSizeInMm")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HematomaCharacterizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HeterogenousType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HistologyConfirmedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("IntensityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAlongMedianNerve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAlongTheTendonSheath")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnterior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBicipitoradialBursitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursitisCalcarea")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompression")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContrastEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCutisThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDistendedFluidFilledBursa")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDistractedNerveFasciclesAxialPomegranateSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdematous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForeignBody")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologicallyConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypertrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInflammatoryChangesOfTheAdjacent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIsointenseToBone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIsointenseToCartilage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLooseBody")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMacrodactyly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMedial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNoDisplacement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosterior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPressureErosionBonyErosion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSecondary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSecondaryOsteomyelitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSignalVoids")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpaghettiLikeAppearanceOfTheNerve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSurroundingFibrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspectedDiagnosis")
                        .HasColumnType("boolean");

                    b.Property<byte>("LocalizationAxialType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationRelatedJointSpaceLevelType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MainFeaturesDifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MainHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxDiameterBursaInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("NMedianusType")
                        .HasColumnType("smallint");

                    b.Property<byte>("NUlnarisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("NeuritisLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("SoftTissuePageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("T1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("T2w")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("SoftTissuePageId");

                    b.ToTable("SoftTissueFindings");
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.SoftTissueFindingPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CAEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DemarcationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HeterogenousType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAlongMedianNerve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDistractedNerveFasciclesAxialPomegranateSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMacrodactyly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPressureErosionBonyErosion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpaghettiLikeAppearanceOfTheNerve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneous")
                        .HasColumnType("boolean");

                    b.Property<byte>("MainFeaturesDifferentialDiagnosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MainHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("T1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("T2w")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("SoftTissueFindingPresets");
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.SoftTissuePage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SoftTissuePages");
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.SummaryPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ComparisonToPriorExamsType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBiopsy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFollowUp")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsXRay")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("TCategoryType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TimeType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SummaryPages");
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.TechnologyPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BarcodeCMCharge")
                        .HasColumnType("text");

                    b.Property<byte>("CMReinforcedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastMediumType")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("ContrastQuantity")
                        .HasColumnType("numeric");

                    b.Property<int?>("DilutionAmount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCMSideEffect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCortisoneIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFABSPosition")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH1BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH2BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIndirectArthrography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraarticular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntravenous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMagicAngleArtifact")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetalArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMotion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotFurtherSpecified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsO2Administration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOther")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneousEpinephrine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSusceptibilityArtifacts")
                        .HasColumnType("boolean");

                    b.Property<byte>("MagneticFieldStrengthType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SequencesType")
                        .HasColumnType("smallint");

                    b.Property<string>("SetName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("TechnologyPages");
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.TendonsAndMusclesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("BicipitalAponeurosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ClassificationMunichConsensusType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CompleteRuptureRetractionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HematomaCharacterizationType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsApophysitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArticularEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBonyAvulsion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBonyErosion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursitisBicipitoradialis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBursitisOlecranii")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleteRuptureRetraction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCrossDiameterRuptureOverOrEqual5Mm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeep")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDetailsThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnthesiopathyDeepExtensorTendons")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnthesiopathyFlexorOrPronatorTendons")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnthesiopathyRestrictedTendonExtensorCarpiRadialisBrevisMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnthesiophytes")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFascialLaceration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFattyInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFocalBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHematoma")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInterfascial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntermuscular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntracorticalEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntramuscular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateralJointCapsuleThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLigamentThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMCLRupture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscleHerniation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscleLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscularAtrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosisSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPartialRuptureMoreThan50Percent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeritendinousEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRadialCollateralLigamentRupture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRadialCollateralLigamentThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRetraction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRupture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRuptureDeepExtensorTendons")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRuptureDiameterBelow5Mm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRuptureRestrictedTendonExtensorCarpiRadialisBrevisMuscle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperficial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wHyperintensity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTendonTear")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickeningJointCapsuleMedial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUlnarNerveNeuritis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVascularization")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWavyAppearanceOfTheFibers")
                        .HasColumnType("boolean");

                    b.Property<byte>("LocalizationMuscleCompartmentsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LocalizationWithinMuscleType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MuscularAtrophyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathologyType")
                        .HasColumnType("smallint");

                    b.Property<int?>("RetractionInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("ScopeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT1w")
                        .HasColumnType("smallint");

                    b.Property<byte>("SignalT2w")
                        .HasColumnType("smallint");

                    b.Property<byte>("TearOfDeepExtensorType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TendinopathyPronatorThickeningType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TendonTearType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TendonsAndMusclesPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TendonsAndMusclesPageId");

                    b.ToTable("TendonsAndMusclesFindings");
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.TendonsAndMusclesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("TendonsAndMusclesPages");
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.AnamnesisFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnamnesisPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsEpicondylitis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLesionOfBicepsTendon")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLesionOfTricepsTendon")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspectedDiagnosis")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte?>("TraumaMonth")
                        .HasColumnType("smallint");

                    b.Property<int?>("TraumaYear")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesisPageId");

                    b.ToTable("AnamnesisFindings");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("Pages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("ReportResults")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.HasOne("RadioReport.ElbowMRT.Domain.Models.LocalizationPage", null)
                        .WithOne("PatientInformation")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", null)
                        .WithOne("Session")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", "ReportSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.AnamnesisPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.BonesFinding", b =>
                {
                    b.HasOne("RadioReport.ElbowMRT.Domain.Models.BonesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("BonesPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.BonesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.CMSideEffect", b =>
                {
                    b.HasOne("RadioReport.ElbowMRT.Domain.Models.TechnologyPage", null)
                        .WithMany("CMSideEffects")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.CartilageFinding", b =>
                {
                    b.HasOne("RadioReport.ElbowMRT.Domain.Models.CartilagePage", null)
                        .WithMany("Findings")
                        .HasForeignKey("CartilagePageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.CartilagePage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.LocalizationPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.Sequence", b =>
                {
                    b.HasOne("RadioReport.ElbowMRT.Domain.Models.TechnologyPage", null)
                        .WithMany("Sequences")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.SoftTissueFinding", b =>
                {
                    b.HasOne("RadioReport.ElbowMRT.Domain.Models.SoftTissuePage", null)
                        .WithMany("Findings")
                        .HasForeignKey("SoftTissuePageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.SoftTissuePage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.SummaryPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.TechnologyPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.TendonsAndMusclesFinding", b =>
                {
                    b.HasOne("RadioReport.ElbowMRT.Domain.Models.TendonsAndMusclesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("TendonsAndMusclesPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ElbowMRT.Domain.Models.TendonsAndMusclesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ShoulderMRT.Domain.Models.AnamnesisFinding", b =>
                {
                    b.HasOne("RadioReport.ElbowMRT.Domain.Models.AnamnesisPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("AnamnesisPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
