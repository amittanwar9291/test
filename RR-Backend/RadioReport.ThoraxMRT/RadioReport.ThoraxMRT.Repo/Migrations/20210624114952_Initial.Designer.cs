// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RadioReport.ThoraxMRT.Repo;

namespace RadioReport.ThoraxMRT.Repo.Migrations
{
    [DbContext(typeof(ThoraxMRTDbContext))]
    [Migration("20210624114952_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PageNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("WasModified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("PageInfos");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessionNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Evaluation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExaminationType")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("FindingsDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FreeField")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("LicenseFractionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LicensingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("PatientAge")
                        .HasColumnType("smallint");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PresetCode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StudyInstanceUID")
                        .HasColumnType("text");

                    b.Property<byte>("TotalPageCount")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Approved")
                        .HasColumnType("text");

                    b.Property<string>("Discussion")
                        .HasColumnType("text");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsICD10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocalizer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferenceImage")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReportSummary")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportResults");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ReportSession");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ObjectName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ImageFiles");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<byte?>("Age")
                        .HasColumnType("smallint");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PatientInformation");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.FindingLocalizer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mapping")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FindingLocalizers");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("BuildVersion")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Paragraphs")
                        .HasColumnType("text");

                    b.Property<string>("ReportTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportTypeName", "VersionName")
                        .IsUnique();

                    b.ToTable("ReportSchemas");
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ReportSchemaId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportSchemaId")
                        .IsUnique();

                    b.ToTable("ReportSchemaSessions");
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.AnamnesisFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AnamnesisFindingType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("AnamnesisPageId")
                        .HasColumnType("uuid");

                    b.Property<int?>("CigarettePacksPerDay")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAfterPartialLungResectionLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAfterPartialLungResectionRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAorticValveTavi")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCoronary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThoracicAortaTevar")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesisPageId");

                    b.ToTable("AnamnesisFindings");
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.AnamnesisPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte?>("CTPreliminaryExaminationMonth")
                        .HasColumnType("smallint");

                    b.Property<int?>("CTPreliminaryExaminationYear")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTPreliminaryExamination")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRIPreliminaryExamination")
                        .HasColumnType("boolean");

                    b.Property<byte?>("MRIPreliminaryExaminationMonth")
                        .HasColumnType("smallint");

                    b.Property<int?>("MRIPreliminaryExaminationYear")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("AnamnesisPages");
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.BonesFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BonesPageId")
                        .HasColumnType("uuid");

                    b.Property<int?>("CartilageCapMaxThickness")
                        .HasColumnType("integer");

                    b.Property<byte>("CharacterizationOneDifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementDistributionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CorticalBone")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis01")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis02")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis03")
                        .HasColumnType("smallint");

                    b.Property<int?>("ExtensionSecondPlane")
                        .HasColumnType("integer");

                    b.Property<int?>("ExtensionSize")
                        .HasColumnType("integer");

                    b.Property<int?>("ExtensionThirdPlane")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FractureAge")
                        .HasColumnType("smallint");

                    b.Property<int>("FractureSubType")
                        .HasColumnType("integer");

                    b.Property<int>("FractureType")
                        .HasColumnType("integer");

                    b.Property<byte>("HistologyKnownType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAOClassification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneMarrowEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCartilageCap")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCentral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCystic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiagnosisSuspected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffuselyDistributed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffusionRestriction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdgreenVainoSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEndplateHerniation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExpansile")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluidLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologyKnown")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInadequateTraumaSuspected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationOfAdjacentBone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationOfSoftTissues")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInterruptionOfVertebralEndPlate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntraosseousAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMapLike")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThanOneLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNidus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteoblastic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOsteolytic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPathologicFracture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPedicleDestruction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPedunculated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerifocalSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPeriostealReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPermeativeGrowth")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPolkaDotSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRockwood")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSchmorlNodes")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSclerosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScleroticMargin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScleroticMarginGrowthPattern")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeptatedOrChambered")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSingalPoorPerichondrium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpinalCanalInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSternalBodyLocalized")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSternalManubriumLocalized")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSurroundingInflammatoryReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wHyperintenseCartilageCap")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT2wHyperintenseNidus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTossy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsXiphoidProcessLocalized")
                        .HasColumnType("boolean");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MassShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MatrixType")
                        .HasColumnType("smallint");

                    b.Property<byte>("NotFutherSpecfiedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathologyNoFractureType")
                        .HasColumnType("smallint");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<long>("RibLocalization")
                        .HasColumnType("bigint");

                    b.Property<byte>("RockwoodInjuryGrade")
                        .HasColumnType("smallint");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<int>("SpineLocalization")
                        .HasColumnType("integer");

                    b.Property<byte>("T1wSignal")
                        .HasColumnType("smallint");

                    b.Property<byte>("T2wSignal")
                        .HasColumnType("smallint");

                    b.Property<byte>("TossyInjuryGrade")
                        .HasColumnType("smallint");

                    b.Property<byte>("VertebralBodyLocalization")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BonesPageId");

                    b.HasIndex("ImageFileId");

                    b.ToTable("BonesFindings");
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.BonesPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("BonesPages");
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.CMSideEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CMSideEffectType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DurationAdverseReactionType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCompletelyDeclining")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeriousAdverseEvent")
                        .HasColumnType("boolean");

                    b.Property<int?>("MinAfterCMinjection")
                        .HasColumnType("integer");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("CMSideEffects");
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.IndicationFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnamnesisPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("ChestWallType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DetailsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("IndicationFindingType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSternoclavicularJoint")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesisPageId");

                    b.ToTable("IndicationFindings");
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.LungParenchymaFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BronchiectasisOrWallThickeningLocalizerId")
                        .HasColumnType("uuid");

                    b.Property<byte>("BronchiectasisOrWallThickeningLocation")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ConsolidationLocalizerId")
                        .HasColumnType("uuid");

                    b.Property<byte>("ConsolidationLocation")
                        .HasColumnType("smallint");

                    b.Property<byte>("CysticFibrosisType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("FunctionLocalizerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBronchiectasisOrWallThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConsolidation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMediastinalShift")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMucusPlaque")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerfusionDisorder")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPleuralEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPleuralEffusionLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPleuralEffusionRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPleuritis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPleuritisLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPleuritisRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPneumothorax")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPneumothoraxLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPneumothoraxRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSacculationOrAbscess")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LungParenchymaPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("LungParenchymaPathologyLocation")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("MucusPlaqueLocalizerId")
                        .HasColumnType("uuid");

                    b.Property<byte>("MucusPlaqueLocation")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("OtherAbnormalityLocalizerId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PerfusionDisorderLocation")
                        .HasColumnType("smallint");

                    b.Property<int?>("PleuralEffusionInMm")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SacculationOrAbscessLocalizerId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SacculationOrAbscessLocation")
                        .HasColumnType("smallint");

                    b.Property<int?>("Score")
                        .HasColumnType("integer");

                    b.Property<int?>("SecondPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("SideType")
                        .HasColumnType("smallint");

                    b.Property<int?>("SizeInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("SuspicionOfType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ThirdPlaneInMm")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BronchiectasisOrWallThickeningLocalizerId");

                    b.HasIndex("ConsolidationLocalizerId");

                    b.HasIndex("FunctionLocalizerId");

                    b.HasIndex("LungParenchymaPageId");

                    b.HasIndex("MucusPlaqueLocalizerId");

                    b.HasIndex("OtherAbnormalityLocalizerId");

                    b.HasIndex("SacculationOrAbscessLocalizerId");

                    b.ToTable("LungParenchymaFindings");
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.LungParenchymaPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("LungParenchymaPages");
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.LungsFlapsMulticolorLocalizer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("LessThan50Location")
                        .HasColumnType("smallint");

                    b.Property<byte>("MoreThan50Location")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("LungsFlapsMulticolorLocalizers");
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.MediastinumFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AnomaliesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("AorticNodesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CalcificationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("CaudalExtensionInMmDiagnosis01")
                        .HasColumnType("integer");

                    b.Property<int?>("CaudalExtensionInMmDiagnosis02")
                        .HasColumnType("integer");

                    b.Property<int?>("CaudalExtensionInMmDiagnosis03")
                        .HasColumnType("integer");

                    b.Property<byte>("ChronicThromboembolicType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementPatternType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CurvatureOfInterventricularSeptumType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CystsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DetailsCongenitalVascularRingsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DetailsKinkingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DiagnosisType1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DiagnosisType2")
                        .HasColumnType("smallint");

                    b.Property<byte>("DiagnosisType3")
                        .HasColumnType("smallint");

                    b.Property<byte>("DiagnosisType4")
                        .HasColumnType("smallint");

                    b.Property<int?>("DiameterOfTheLargestLnSadInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("DirectionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("EffusionWidthMaxInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("EsuphagusLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("EsuphagusType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ExpansionCraniocaudalInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpansionMaxAxialDiameter")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpansionSecondPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpansionSizeInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpansionThirdPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FocalSignalVoidsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HeightInRelationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HilarLobarNodesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HistologyKnownType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("InferiorMediastinalNodesType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAbruptCaliberChange")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnteriorMediastinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAorticEctasia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalcification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCollateralSupply")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConfluent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffusionRestriction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEccentricPartialThrombosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEffusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatIsointens")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFibrousSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFocalSignalVoid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFocalSignalVoids")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhageBloodDegradation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologyKnown")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHypoplasticAorticArch")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntravascularBandsAndNets")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftAtriumEnlargement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftEnlargementOfTheVentricle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftMyocardialThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftThrombus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiquidFatLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiquidIsointens")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocoregionalOsteolysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLowerMediastinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMacroscopic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMass")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMicroscopic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMiddleMediastinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMosaicPerfusion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNeuroforaminalWidening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPericarditisConstrictiva")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPericardium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPleura")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPneumopericardium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPoloMintSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosteriorMediastinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPostoperativeResidualStenosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPoststenoticDilatation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPouchDefect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPreservedFattyHilum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPressureErosionRib")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferenceLesionAccToRECIST")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRemodeling")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightAtriumEnlargement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightEnlargementOfTheVentricle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightMyocardialThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightThrombus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSaddlePulmonaryEmbolism")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScaloppedThinnedPedicle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStrictures")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicious")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThrombus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsToothBone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTracheomalaciaCollapseInExpiration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpperMediastinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpsideDownStomach")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVenousContrastAgentReflux")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWithKommerellSDiverticulum")
                        .HasColumnType("boolean");

                    b.Property<byte>("LimitationType")
                        .HasColumnType("smallint");

                    b.Property<int>("LocalizationType")
                        .HasColumnType("integer");

                    b.Property<byte>("LocalizationWithinVesselType")
                        .HasColumnType("smallint");

                    b.Property<long>("LungsLocation")
                        .HasColumnType("bigint");

                    b.Property<byte>("LymphNodeStationsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LymphNodesLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LymphNodesType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MassDetailsMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MassDiameterMaxInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxAxialDiameterPreliminaryExaminationInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxExpansionCraniocaudalInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxWallDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("MediastinumGrowthPatternsType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("MediastinumPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("MediastinumType")
                        .HasColumnType("smallint");

                    b.Property<int?>("MinDiameterAxial")
                        .HasColumnType("integer");

                    b.Property<int?>("MinDiameterCraniocaudal")
                        .HasColumnType("integer");

                    b.Property<byte>("NoCMEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("ParatrachealNodesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PathologyType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ProgressMonitoringType")
                        .HasColumnType("smallint");

                    b.Property<float?>("QuantitativePAAADiameterQuotient")
                        .HasColumnType("real");

                    b.Property<float?>("QuantitativeRVLVDiameterQuotient")
                        .HasColumnType("real");

                    b.Property<float?>("QuantitativeRVLVVolumeQuotient")
                        .HasColumnType("real");

                    b.Property<int?>("QuantitativeWideCentralPulmonaryArteryInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("SadInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("ShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SupraclavicularLowCervicalAndJugular")
                        .HasColumnType("smallint");

                    b.Property<byte>("T1wSignalType")
                        .HasColumnType("smallint");

                    b.Property<byte>("T2wSignalType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TracheaShiftType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TracheaType")
                        .HasColumnType("smallint");

                    b.Property<int?>("VesselDiameterProximalOfTheAneurysmInMm")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MediastinumPageId");

                    b.ToTable("MediastinumFindings");
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.MediastinumPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("MediastinumPages");
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.PleuraFinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AdrenalGlandMassSiteType")
                        .HasColumnType("smallint");

                    b.Property<byte>("AngleToThoracicWallType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementHomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementPatternType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastEnhancementQuantitativeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CraniocaudalType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CysticChangesType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DescriptionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("DiameterSADInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("DifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis1")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis2")
                        .HasColumnType("smallint");

                    b.Property<byte>("DifferentialDiagnosis3")
                        .HasColumnType("smallint");

                    b.Property<byte>("DiffuseLesionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DisplacementOfAdiposeTissueType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DistributionType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ExpansionMaxWidthInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpansionSizeInMM")
                        .HasColumnType("integer");

                    b.Property<byte>("ExtensionType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FindingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FocalLeasionSiteType")
                        .HasColumnType("smallint");

                    b.Property<int?>("FocalLiverLesionMaxDiameterAxialInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("FocalPancreaticLesionMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("FocalSignalVoidsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("GradingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HistologyKnownType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomogeneityType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAblatioLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAblatioRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAbscess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdrenalGlandMass")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnterior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArrosionAdjacentOsseousStructures")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAscitesNotFurtherDefined")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssociatedFindingsHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAtelectasis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBreastAugmentationLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBreastAugmentationRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCMEnrichingCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCapsule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCholecystolithiasis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCoagulum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContrastEnhancement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCutaneousThickening")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysticChanges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCysts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffuseLiverLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffusePancreaticLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiffusionRestriction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnlargedAbdominalLymphNodes")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFattyAtrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFissural")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFocalLiverLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFocalPancreaticLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFocalSignalVoids")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHemorrhage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistologyKnown")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationChestWall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfiltrationOfExtrapleuralFatTissue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsKidney")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsKidneyFocalLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateral")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftLevel1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftLevel2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeftLevel3")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLung")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLymphNodeLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLymphNodeRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMacroscopic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMass")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMediastinal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMediastinalshift")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMediastinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMicroscopic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoreThan1Lesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuscleAtrophy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNodularConfiguration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNonDisplacing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsObscured")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsObscuredLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsObscuredRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPathological")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPathologicalConglomerate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPathologicalHiatalHernia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPathologicalMultiple")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPericardium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerihepatic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerisplenic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPleura")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPneumomediastinum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPneumopericardium")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosterior")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPressureCorrosionRib")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightLevel1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightLevel2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightLevel3")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSedimentation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSepta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSignalVoid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEdema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftTissueEmphysema")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSplenomegaly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSplitPleuraSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubordinate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOfDiffuseLiverLesion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuspicionOfMassAdrenalGland")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsT1wHyperintense")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThickened")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUrinaryRetention")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUrinaryRetentionLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUrinaryRetentionRight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVascularContact")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVessels")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWallThickeningOfTheGallBladder")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWirsungDuctDilatation")
                        .HasColumnType("boolean");

                    b.Property<int?>("KidneyFocalLesionMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("LeasionLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("LeftMarginalShortAxisDiameter")
                        .HasColumnType("integer");

                    b.Property<byte>("LevelType")
                        .HasColumnType("smallint");

                    b.Property<byte>("LymphNodesAxillaType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MammaFocalSignalVoidsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MammaMarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MammaShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MarginType")
                        .HasColumnType("smallint");

                    b.Property<byte>("MassAdrenalGlandDifferentialDiagnosis")
                        .HasColumnType("smallint");

                    b.Property<int?>("MassAdrenalGlandMaxDiameterInMm")
                        .HasColumnType("integer");

                    b.Property<int>("MassBreastLocation")
                        .HasColumnType("integer");

                    b.Property<int?>("MassMaxDiameterAxialInMm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxWidthInMM")
                        .HasColumnType("integer");

                    b.Property<byte>("MediastinalPleuraSiteType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<string>("PictureNumber")
                        .HasColumnType("text");

                    b.Property<byte>("PleuraFormType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PleuraLocalizationCraniocaudalType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("PleuraPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PleuraShapeType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PleuraSiteType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PleuralThickeningMassLocalizationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("PneumothoraxType")
                        .HasColumnType("smallint");

                    b.Property<byte>("QualityType")
                        .HasColumnType("smallint");

                    b.Property<long>("RibLocations")
                        .HasColumnType("bigint");

                    b.Property<int?>("RightMarginalShortAxisDiameter")
                        .HasColumnType("integer");

                    b.Property<int?>("SecondPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<int>("SpineLocations")
                        .HasColumnType("integer");

                    b.Property<byte>("T1wSignalType")
                        .HasColumnType("smallint");

                    b.Property<byte>("T2wSignalType")
                        .HasColumnType("smallint");

                    b.Property<int>("ThickenedCutisBreastLocation")
                        .HasColumnType("integer");

                    b.Property<int?>("ThirdPlaneInMm")
                        .HasColumnType("integer");

                    b.Property<byte>("VolumeType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ImageFileId")
                        .IsUnique();

                    b.HasIndex("PleuraPageId");

                    b.ToTable("PleuraFindings");
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.PleuraPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AreFindings")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("PleuraPages");
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.Sequence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Is3D")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsADCMap")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsB0")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsB100")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsB1000")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsB1400")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsB50")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsB800")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCalculated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsECGTriggering")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParallelImaging")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPostContrast")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRespiratoryTriggering")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSaturatedFat")
                        .HasColumnType("boolean");

                    b.Property<byte>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("OrientationType")
                        .HasColumnType("smallint");

                    b.Property<byte>("SequenceType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TechnologyPageId")
                        .HasColumnType("uuid");

                    b.Property<byte>("WeightingType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyPageId");

                    b.ToTable("Sequences");
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.StudyAreaPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("StudyAreaPages");
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.SummaryPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("BiopsyRecommendedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("CysticFibrosisDynamicFindingsType")
                        .HasColumnType("smallint");

                    b.Property<byte>("DynamicFindingsType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBiopsyRecommended")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoneScan")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTAbdomen")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTAngiography")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTNeck")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTPA")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCTThorax")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCardiacDiagnostics")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEvaluationInInterdisciplinaryBoard")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFurtherDiagnostics")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInterstitialLungDisease")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRIAbdomen")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRIFollowUp")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRINeck")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMRISpine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMammographyAndBreastUltrasound")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPETCT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsQuantitativeEvaluationCysticFibrosis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSPECT")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTumorBoard")
                        .HasColumnType("boolean");

                    b.Property<byte>("MRIFollowUpType")
                        .HasColumnType("smallint");

                    b.Property<byte>("NStageType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ScorePreliminaryExaminationPoints")
                        .HasColumnType("integer");

                    b.Property<byte>("TNStagingType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TStageType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SummaryPages");
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.TechnologyPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BarcodeCMCharge")
                        .HasColumnType("text");

                    b.Property<byte>("CMReinforcedType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContrastMediumType")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("ContrastQuantity")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCMSideEffect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCortisoneIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH1BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsH2BlockerIV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetalArtifacts")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMotion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotFurtherSpecified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsO2Administration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOther")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPulsationOrBreathing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubcutaneousEpinephrine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSusceptibilityArtifacts")
                        .HasColumnType("boolean");

                    b.Property<byte>("MagneticFieldStrengthType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SequencesType")
                        .HasColumnType("smallint");

                    b.Property<string>("SetName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("TechnologyPages");
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.PageInfo", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("Pages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Logic.Models.ReportModels.ReportResult", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany("ReportResults")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", b =>
                {
                    b.HasOne("RadioReport.ThoraxMRT.Domain.Models.StudyAreaPage", null)
                        .WithOne("PatientInformation")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.Pages.PatientInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchema", null)
                        .WithOne("Session")
                        .HasForeignKey("RadioReport.Common.Module.Logic.Models.ReportGenerator.ReportSchemaSession", "ReportSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.AnamnesisFinding", b =>
                {
                    b.HasOne("RadioReport.ThoraxMRT.Domain.Models.AnamnesisPage", null)
                        .WithMany("AnamnesisFindings")
                        .HasForeignKey("AnamnesisPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.AnamnesisPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.BonesFinding", b =>
                {
                    b.HasOne("RadioReport.ThoraxMRT.Domain.Models.BonesPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("BonesPageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "UploadedImageFile")
                        .WithMany()
                        .HasForeignKey("ImageFileId");
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.BonesPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.CMSideEffect", b =>
                {
                    b.HasOne("RadioReport.ThoraxMRT.Domain.Models.TechnologyPage", null)
                        .WithMany("CMSideEffects")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.IndicationFinding", b =>
                {
                    b.HasOne("RadioReport.ThoraxMRT.Domain.Models.AnamnesisPage", null)
                        .WithMany("IndicationFindings")
                        .HasForeignKey("AnamnesisPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.LungParenchymaFinding", b =>
                {
                    b.HasOne("RadioReport.ThoraxMRT.Domain.Models.LungsFlapsMulticolorLocalizer", "BronchiectasisOrWallThickeningLocalizer")
                        .WithMany()
                        .HasForeignKey("BronchiectasisOrWallThickeningLocalizerId");

                    b.HasOne("RadioReport.ThoraxMRT.Domain.Models.LungsFlapsMulticolorLocalizer", "ConsolidationLocalizer")
                        .WithMany()
                        .HasForeignKey("ConsolidationLocalizerId");

                    b.HasOne("RadioReport.ThoraxMRT.Domain.Models.LungsFlapsMulticolorLocalizer", "FunctionLocalizer")
                        .WithMany()
                        .HasForeignKey("FunctionLocalizerId");

                    b.HasOne("RadioReport.ThoraxMRT.Domain.Models.LungParenchymaPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("LungParenchymaPageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RadioReport.ThoraxMRT.Domain.Models.LungsFlapsMulticolorLocalizer", "MucusPlaqueLocalizer")
                        .WithMany()
                        .HasForeignKey("MucusPlaqueLocalizerId");

                    b.HasOne("RadioReport.ThoraxMRT.Domain.Models.LungsFlapsMulticolorLocalizer", "OtherAbnormalityLocalizer")
                        .WithMany()
                        .HasForeignKey("OtherAbnormalityLocalizerId");

                    b.HasOne("RadioReport.ThoraxMRT.Domain.Models.LungsFlapsMulticolorLocalizer", "SacculationOrAbscessLocalizer")
                        .WithMany()
                        .HasForeignKey("SacculationOrAbscessLocalizerId");
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.LungParenchymaPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.MediastinumFinding", b =>
                {
                    b.HasOne("RadioReport.ThoraxMRT.Domain.Models.MediastinumPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("MediastinumPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.MediastinumPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.PleuraFinding", b =>
                {
                    b.HasOne("RadioReport.Common.Module.Logic.Models.Pages.ImageFile", "UploadedImageFile")
                        .WithOne()
                        .HasForeignKey("RadioReport.ThoraxMRT.Domain.Models.PleuraFinding", "ImageFileId");

                    b.HasOne("RadioReport.ThoraxMRT.Domain.Models.PleuraPage", null)
                        .WithMany("Findings")
                        .HasForeignKey("PleuraPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.PleuraPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.Sequence", b =>
                {
                    b.HasOne("RadioReport.ThoraxMRT.Domain.Models.TechnologyPage", null)
                        .WithMany("Sequences")
                        .HasForeignKey("TechnologyPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.StudyAreaPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.SummaryPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioReport.ThoraxMRT.Domain.Models.TechnologyPage", b =>
                {
                    b.HasOne("RadioReport.Common.Logic.Models.ReportModels.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
